52a53
> from SAMOS_DMD_dev.DMD_get_pixel_mapping_GUI_dana import Coord_Transform_Helpers as CTH
53a55,56
> from SAMOS_DMD_dev.DMD_Pattern_Helpers.Class_DMDGroup import DMDGroup
> from SAMOS_DMD_dev.Class_DMD_dev import DigitalMicroMirrorDevice
54a58,66
> from SAMOS_SOAR_dev.Class_SOAR import Class_SOAR
> from SAMOS_CCD_dev.Class_CCD_dev import Class_Camera
> #from SAMOS_CCD_dev.Class_CCD_dev import Class_Camera
> from SAMOS_Astrometry_dev.skymapper_interrogate import skymapper_interrogate
> from SAMOS_Astrometry_dev.tk_class_astrometry_V5 import Astrometry
> from SAMOS_system_dev.SAMOS_Functions import Class_SAMOS_Functions as SF
> from SlitTableViewer import SlitTableView as STView
> import utils as U
> import WriteFITSHead as WFH
59c71
< from SAMOS_MOTORS_dev.Class_PCM import Class_PCM
---
> #from SAMOS_MOTORS_dev.Class_PCM import Class_PCM
61,63c73
< import WriteFITSHead as WFH
< from SlitTableViewer import SlitTableView as STView
< from SAMOS_Astrometry_dev.skymapper_interrogate import skymapper_interrogate
---
> 
65,66d74
< from SAMOS_Astrometry_dev.tk_class_astrometry_V5 import Astrometry
< from SAMOS_DMD_dev.DMD_Pattern_Helpers.Class_DMDGroup import DMDGroup
89,92d96
< from SAMOS_DMD_dev.Class_DMD_dev import DigitalMicroMirrorDevice
< from SAMOS_CCD_dev.Class_CCD_dev import Class_Camera
< #from SAMOS_CCD_dev.Class_CCD_dev import Class_Camera
< from SAMOS_system_dev.SAMOS_Functions import Class_SAMOS_Functions as SF
102a107
> from tkinter import messagebox
110d114
< 
122d125
< import utils as U
127c130
< from Hadamard.generate_DMD_patterns_samos import make_S_matrix_masks,make_H_matrix_masks
---
> from Hadamard.generate_DMD_patterns_samos import make_S_matrix_masks, make_H_matrix_masks
151,153c154,157
< params = {'Exposure Time': 0, 'CCD Temperature': 2300, 'Trigger Mode': 4, 'NofFrames': 1}
<         # Trigger Mode = 4: light
<         # Trigger Mode = 5: dark
---
> params = {'Exposure Time': 0, 'CCD Temperature': 2300,
>           'Trigger Mode': 4, 'NofFrames': 1}
> # Trigger Mode = 4: light
> # Trigger Mode = 5: dark
214,220c218,224
< dir_Astrometry = os.path.join(local_dir,"SAMOS_Astrometry_dev")
< dir_CCD = os.path.join(local_dir,"SAMOS_CCD_dev")
< dir_DMD = os.path.join(local_dir,"SAMOS_DMD_dev")
< dir_MOTORS = os.path.join(local_dir,"SAMOS_MOTORS_dev")
< dir_SOAR = os.path.join(local_dir,"SAMOS_SOAR_dev")
< dir_CONFIG = os.path.join(local_dir,"SAMOS_CONFIG_dev")
< dir_SYSTEM = os.path.join(local_dir,"SAMOS_system_dev")
---
> dir_Astrometry = os.path.join(local_dir, "SAMOS_Astrometry_dev")
> dir_CCD = os.path.join(local_dir, "SAMOS_CCD_dev")
> dir_DMD = os.path.join(local_dir, "SAMOS_DMD_dev")
> dir_MOTORS = os.path.join(local_dir, "SAMOS_MOTORS_dev")
> dir_SOAR = os.path.join(local_dir, "SAMOS_SOAR_dev")
> dir_CONFIG = os.path.join(local_dir, "SAMOS_CONFIG_dev")
> dir_SYSTEM = os.path.join(local_dir, "SAMOS_system_dev")
243a248
> SOAR = Class_SOAR()
272,275c277,280
< bright_blues = [c for c in gcolors.color_list if (gcolors.color_dict[c][0]<=r_ulim and \
<                                                   gcolors.color_dict[c][1]>=g_llim and \
<                                                       gcolors.color_dict[c][2]>=b_llim or \
<                                                           c=='blueviolet' or c=='cadetblue1')]
---
> bright_blues = [c for c in gcolors.color_list if (gcolors.color_dict[c][0] <= r_ulim and
>                                                   gcolors.color_dict[c][1] >= g_llim and
>                                                   gcolors.color_dict[c][2] >= b_llim or
>                                                   c == 'blueviolet' or c == 'cadetblue1')]
277,279c282,284
< bright_reds = [c for c in gcolors.color_list if (gcolors.color_dict[c][0]>=r_llim and \
<                                                   gcolors.color_dict[c][1]<=g_ulim and \
<                                                       gcolors.color_dict[c][2]<=b_ulim)]
---
> bright_reds = [c for c in gcolors.color_list if (gcolors.color_dict[c][0] >= r_llim and
>                                                  gcolors.color_dict[c][1] <= g_ulim and
>                                                  gcolors.color_dict[c][2] <= b_ulim)]
281,284c286,289
< bright_greens = [c for c in gcolors.color_list if (gcolors.color_dict[c][0]<=r_ulim and \
<                                                   gcolors.color_dict[c][1]>=g_llim and \
<                                                       gcolors.color_dict[c][2]<=b_ulim)]
<     
---
> bright_greens = [c for c in gcolors.color_list if (gcolors.color_dict[c][0] <= r_ulim and
>                                                    gcolors.color_dict[c][1] >= g_llim and
>                                                    gcolors.color_dict[c][2] <= b_ulim)]
> 
289c294
<     
---
> 
291a297
> 
312a319
>         self.SOAR_Page = SOAR_Page
317c324
<         for F in {ConfigPage, DMDPage, CCD2DMD_RecalPage, Motors, CCDPage, MainPage}:
---
>         for F in {ConfigPage, DMDPage, CCD2DMD_RecalPage, Motors, CCDPage, SOAR_Page, MainPage}:
572c579
<          # Create A Button
---
>         # Create A Button
672c679,680
<             self.fits_dir = os.path.join(self.local_dir,"SISI_images/SAMOS_" + today.strftime('%Y%m%d'))
---
>             self.fits_dir = os.path.join(
>                 self.local_dir, "SISI_images/SAMOS_" + today.strftime('%Y%m%d'))
679c687
<                 os.path.join(dir_SYSTEM,"fits_current_dir_name.txt"), "w")
---
>                 os.path.join(dir_SYSTEM, "fits_current_dir_name.txt"), "w")
688c696
<         with open(os.path.join(dir_SYSTEM,"dirlist_default.csv"), mode='r') as inp:
---
>         with open(os.path.join(dir_SYSTEM, "dirlist_default.csv"), mode='r') as inp:
719c727
<         with open(os.path.join(dir_SYSTEM,"dirlist_user.csv"), mode='r') as inp:
---
>         with open(os.path.join(dir_SYSTEM, "dirlist_user.csv"), mode='r') as inp:
743d750
< 
762c769
<         file_dirlist = open(os.path.join(dir_SYSTEM,"dirlist_user.csv"), "w")
---
>         file_dirlist = open(os.path.join(dir_SYSTEM, "dirlist_user.csv"), "w")
764c771
<         print(os.path.join(dir_SYSTEM,"dirlist_user.csv"))
---
>         print(os.path.join(dir_SYSTEM, "dirlist_user.csv"))
776c783,784
<             ip_file = os.path.join(dir_SYSTEM,"IP_addresses_default_inside.csv")
---
>             ip_file = os.path.join(
>                 dir_SYSTEM, "IP_addresses_default_inside.csv")
778,779c786,788
<             ip_file = os.path.join(dir_SYSTEM,"IP_addresses_default_outside.csv")
<         ip_file_default = os.path.join(dir_SYSTEM,"IP_addresses_default.csv")
---
>             ip_file = os.path.join(
>                 dir_SYSTEM, "IP_addresses_default_outside.csv")
>         ip_file_default = os.path.join(dir_SYSTEM, "IP_addresses_default.csv")
819c828,829
<             ip_file = os.path.join(dir_SYSTEM,"IP_addresses_default_inside.csv")
---
>             ip_file = os.path.join(
>                 dir_SYSTEM, "IP_addresses_default_inside.csv")
821,822c831,833
<             ip_file = os.path.join(dir_SYSTEM,"IP_addresses_default_outside.csv")
<         ip_file_default = os.path.join(dir_SYSTEM,"IP_addresses_default.csv")
---
>             ip_file = os.path.join(
>                 dir_SYSTEM, "IP_addresses_default_outside.csv")
>         ip_file_default = os.path.join(dir_SYSTEM, "IP_addresses_default.csv")
841c852,853
<             ip_file = os.path.join(dir_SYSTEM,"IP_addresses_default_inside.csv")
---
>             ip_file = os.path.join(
>                 dir_SYSTEM, "IP_addresses_default_inside.csv")
843,844c855,857
<             ip_file = os.path.join(dir_SYSTEM,"IP_addresses_default_outside.csv")
<         ip_file_default = os.path.join(dir_SYSTEM,"IP_addresses_default.csv")
---
>             ip_file = os.path.join(
>                 dir_SYSTEM, "IP_addresses_default_outside.csv")
>         ip_file_default = os.path.join(dir_SYSTEM, "IP_addresses_default.csv")
870c883,884
<         file_IPstatus = open(os.path.join(dir_SYSTEM,"IP_status_dict.csv"), "w")
---
>         file_IPstatus = open(os.path.join(
>             dir_SYSTEM, "IP_status_dict.csv"), "w")
903c917
<         url_name = "http://"+os.path.join(self.PAR.IP_dict['IP_CCD'])# +'/'
---
>         url_name = "http://"+os.path.join(self.PAR.IP_dict['IP_CCD'])  # +'/'
1009,1010c1023,1024
<         ## Filemenu
<         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED, 
---
>         # Filemenu
>         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED,
1023a1038,1039
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
1028c1044
<         filemenu.add_command(label="Exit", command=parent.quit)  
---
>         filemenu.add_command(label="Exit", command=parent.quit)
1057a1074
> 
1062,1063d1078
<         
<         
1129,1130c1144,1145
<                         text="Edit DMD Map",
<                         command=self.BrowseMapFiles)
---
>                                 text="Edit DMD Map",
>                                 command=self.BrowseMapFiles)
1134,1135c1149,1150
<                         text="Load DMD Map",
<                         command=self.LoadMap)
---
>                                     text="Load DMD Map",
>                                     command=self.LoadMap)
1144d1158
< 
1148c1162
<         label_x0.place(x=5,y=230)
---
>         label_x0.place(x=5, y=230)
1151,1152c1165,1167
<         self.entry_x0 = tk.Entry(self.frame_startup,width=4,textvariable=self.x0)
<         self.entry_x0.place(x=30,y=228)
---
>         self.entry_x0 = tk.Entry(
>             self.frame_startup, width=4, textvariable=self.x0)
>         self.entry_x0.place(x=30, y=228)
1155c1170
<         label_y0.place(x=90,y=230)
---
>         label_y0.place(x=90, y=230)
1158,1159c1173,1174
<         entry_y0 = tk.Entry(self.frame_startup,width=4,textvariable=self.y0)
<         entry_y0.place(x=115,y=228)
---
>         entry_y0 = tk.Entry(self.frame_startup, width=4, textvariable=self.y0)
>         entry_y0.place(x=115, y=228)
1162c1177
<         label_x1.place(x=125,y=200)
---
>         label_x1.place(x=125, y=200)
1165,1167c1180,1181
<         entry_x1 = tk.Entry(self.frame_startup,width=4,textvariable=self.x1)
<         entry_x1.place(x=150,y=198)
< 
---
>         entry_x1 = tk.Entry(self.frame_startup, width=4, textvariable=self.x1)
>         entry_x1.place(x=150, y=198)
1170c1184
<         label_y1.place(x=210,y=200)
---
>         label_y1.place(x=210, y=200)
1173,1174c1187,1188
<         entry_y1 = tk.Entry(self.frame_startup,width=4,textvariable=self.y1)
<         entry_y1.place(x=235,y=198)
---
>         entry_y1 = tk.Entry(self.frame_startup, width=4, textvariable=self.y1)
>         entry_y1.place(x=235, y=198)
1177,1178c1191,1192
<                        text="Add",
<                        command=self.AddSlit)
---
>                                     text="Add",
>                                     command=self.AddSlit)
1182,1183c1196,1197
<                        text="Push",
<                        command=self.PushCurrentMap)
---
>                                      text="Push",
>                                      command=self.PushCurrentMap)
1187,1188c1201,1202
<                        text="Save",
<                        command=self.SaveMap)
---
>                                     text="Save",
>                                     command=self.SaveMap)
1191c1205
<         """ Load Slit Grid """
---
>         """ Load Slit Table """
1193,1194c1207,1208
<                        text="Load Slit Grid",
<                        command=self.LoadSlits)
---
>                                       text="Load Slit List",
>                                       command=self.LoadSlits)
1196c1210
<         
---
> 
1199c1213
<             self.frame_startup, text="Current Slit Grid")
---
>             self.frame_startup, text="Current Slit List")
1202c1216
<         #print(gridfnam)
---
>         # print(gridfnam)
1264c1278
<         # 
---
>         #
1309c1323
<         self.textbox_field_width.place(x=50, y=150)
---
>         self.textbox_field_width.place(x=70, y=150)
1314,1315c1328,1329
<                                       command=self.HTS_generate)
<         self.button_Generate.place(x=70, y=180)
---
>                                          command=self.HTS_generate)
>         self.button_Generate.place(x=70, y=150)  # 80)
1318c1332
<         self.textbox_masknames.place(x=4, y=220)
---
>         self.textbox_masknames.place(x=4, y=190)  # 220)
1322,1323c1336,1337
<                                              text="Rename:")
<         button_save_masks.place(x=4, y=243)
---
>                                      text="Rename:")
>         button_save_masks.place(x=4, y=213)  # 243)
1327c1341,1391
<         self.entrybox_newmasknames.place(x=90, y=245)
---
>         self.entrybox_newmasknames.place(x=70, y=213)  # 243)
> 
>         self.Hadamard_RADEC_frame = tk.Frame(
>             self.HadamardConf_LabelFrame, width=280, height=125, bg="gray")
>         self.Hadamard_RADEC_frame.place(x=0, y=245)  # 275)
>         """ Target RADEC?"""
>         label_target_RA = tk.Label(
>             self.Hadamard_RADEC_frame, text="Target RA:", bd=4)  # , font=("Arial", 24))
>         label_target_RA.place(x=4, y=4)
>         self.entrybox_target_RA = tk.Entry(
>             self.Hadamard_RADEC_frame, width=14)
>         self.entrybox_target_RA.insert(0, "01.234567")
>         self.entrybox_target_RA.place(x=80, y=4)
> 
>         label_target_DEC = tk.Label(
>             self.Hadamard_RADEC_frame, text="Target DEC:", bd=4)  # , font=("Arial", 24))
>         label_target_DEC.place(x=4, y=34)
>         self.entrybox_target_DEC = tk.Entry(
>             self.Hadamard_RADEC_frame, width=14)
>         self.entrybox_target_DEC.insert(0, "01.234567")
>         self.entrybox_target_DEC.place(x=80, y=34)
> 
>         """ GENERATE FROM RADEC"""
>         self.button_Generate_from_RADEC = tk.Button(self.Hadamard_RADEC_frame, text="GENERATE FROM RADEC", bd=3, bg='#A877BA', font=("Arial", 18),
>                                                     command=self.HTS_generate_from_RADEC)
>         self.button_Generate_from_RADEC.place(x=10, y=64)
> 
>     def HTS_generate_from_RADEC(self):
>         """ Generates HTS mask centered on RADEC coordinates 
>             - requires WCS (check on existence has to be written)
>             - no check on the RADEC being inside the field (to be written)
>             - RADEC format in decimal degrees (no HH:MM:SS, dd:mm:ss)
>         """
>         # get AR and DEC from input fields
>         dec_HTS_center = float(self.entrybox_target_DEC.get())
>         ra_HTS_center = float(self.entrybox_target_RA.get())
> 
>         # convert radec->pixels using WCS
>         # from https://gist.github.com/barentsen/548f88ef38f645276fccea1481c76fc3
>         ad = np.array([[ra_HTS_center, dec_HTS_center]]).astype(float)
>         x_CCD_HTS_center, y_CCD_HTS_center = WCS_global.all_world2pix(ad, 0)[0]
> 
>         # convert pixels -> DMD mirrors
>         x_DMD_HTS_center, y_DMD_HTS_center = convert.CCD2DMD(
>             int(x_CCD_HTS_center), int(y_CCD_HTS_center))
> 
>         # refresh entrybox field
>         self.entrybox_center_x.delete(0, tk.END)
>         self.entrybox_center_x.insert(0, int(x_DMD_HTS_center))
>         self.entrybox_center_y.delete(0, tk.END)
>         self.entrybox_center_y.insert(0, int(y_DMD_HTS_center))
1329c1393,1397
<         """ Check mask # ?"""
---
>         # generate mask
>         self.HTS_generate()
>         """
>         """" Check mask  ? """
>         """
1342a1411
>         """
1344a1414
>         """
1356,1358c1426,1431
< 
<         # &&&
< 
---
>         """
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
>     """
1360c1433
<         """load_masks_file """
---
>         """""""load_masks_file """""""
1377a1451
>     """
1380,1381c1454,1455
<         """ to be written """
<         print("inside")
---
>         """ rename the mask file, only the part starting with 'mask' """
> 
1383,1385c1457,1466
<         old = str(oldfilename_masks[0:oldfilename_masks.rfind("_")])
<         new = self.entrybox_newmasknames.get()
<         file_names = os.path.join(local_dir,"Hadamard","mask_sets",old,"*.bmp")
---
> 
>         # => find all positions of the '_' string in the filename
>         i_ = [x for x, v in enumerate(oldfilename_masks) if v == '_']
>         old_string = oldfilename_masks[i_[0]+1:i_[1]]
>         #second = oldfilename_masks[i_[1]]
> 
>         old = str(oldfilename_masks[0:i_[-1]])
>         new_string = self.entrybox_newmasknames.get()
>         file_names = os.path.join(
>             local_dir, "Hadamard", "mask_sets", old+"*.bmp")
1387d1467
<         #head, tail = os.path.split(oldfilename_masks)
1389c1469,1472
<             os.rename(files[ifile], files[ifile].replace(old, new))
---
>             path, tail = os.path.split(files[ifile])
>             oldName = files[ifile]
>             newName = os.path.join(path, tail.replace(old_string, new_string))
>             os.rename(oldName, newName)
1392c1475
<             tk.END, oldfilename_masks[0:-1].replace(old, new))
---
>             tk.END, oldfilename_masks[0:-1].replace(old_string, new_string))
1395,1397c1478
< 
<         pass
< 
---
>     """
1399c1480
<         """ to be written """
---
>         """""" to be written """""""
1421,1423c1502,1504
<         pass
<    
<     def calculate_field_width(self,event=None):
---
>         """
> 
>     def calculate_field_width(self, event=None):
1427,1429c1508,1510
<         self.textbox_field_width.insert(tk.INSERT,str(self.field_width))
<         
<     def set_SH_matrix(self,event=None):
---
>         self.textbox_field_width.insert(tk.INSERT, str(self.field_width))
> 
>     def set_SH_matrix(self, event=None):
1435c1516
<             self.mask_arrays = np.arange(0,self.order)
---
>             self.mask_arrays = np.arange(0, self.order)
1440,1442c1521,1523
<             a = tuple(['a'+str(i),'b'+str(i)] for i in range(1, 4))
<             self.mask_arrays=[inner for outer in zip(*a) for inner in outer]
<         self.calculate_field_width()    
---
>             a = tuple(['a'+str(i), 'b'+str(i)] for i in range(1, 4))
>             self.mask_arrays = [inner for outer in zip(*a) for inner in outer]
>         self.calculate_field_width()
1447c1528
<         #for choice in self.mask_arrays:
---
>         # for choice in self.mask_arrays:
1449c1530
<     
---
> 
1452,1454c1533,1536
<         DMD_size = (1080,2048) 
<         matrix_type = self.SHMatrix_Checked.get() # Two options, H or S
<         order = self.order # e.g. 15 Order of the hadamard matrix (or S matrix)
---
>         DMD_size = (1080, 2048)
>         matrix_type = self.SHMatrix_Checked.get()  # Two options, H or S
>         # e.g. 15 Order of the hadamard matrix (or S matrix)
>         order = self.order
1456c1538,1539
<         Xo, Yo = float(self.entrybox_center_y.get()), float(self.entrybox_center_x.get())
---
>         Xo, Yo = int(self.entrybox_center_y.get()), int(
>             self.entrybox_center_x.get())
1459c1542,1546
<         slit_width = int(self.entrybox_width.get()) #4 # Slit width in number of micromirrors 
---
>         # 4 # Slit width in number of micromirrors
>         slit_width = int(self.entrybox_width.get())
>         # 4 # Slit length in number of micromirrors
>         slit_length = int(self.entrybox_length.get())
> 
1464c1551
<         folder = os.path.join(local_dir,'Hadamard','mask_sets/')
---
>         folder = os.path.join(local_dir, 'Hadamard', 'mask_sets/')
1466,1467c1553,1557
<             mask_set, matrix = make_S_matrix_masks(order, DMD_size, slit_width, Xo, Yo, folder)
<             name = 'S'+str(order)+'_'+str(slit_width)+'w_mask_1-'+str(order)+'.bmp'
---
>             mask_set, matrix = make_S_matrix_masks(
>                 order, DMD_size, slit_width, slit_length, Xo, Yo, folder)  # mask_set.shape (1080,2048,7)
> #            name = 'S'+str(order)+'_'+str(slit_width)+'w_mask_1-'+str(order)+'.bmp'
>             name = 'S'+str(order)+'_mask_'+str(slit_width) + \
>                 'w_' + "{:03d}".format(order) + '.bmp'
1469,1470c1559,1563
<             mask_set_a,mask_set_b, matrix = make_H_matrix_masks(order, DMD_size, slit_width, Xo, Yo, folder)
<             name = str(matrix_type)+str(order)+'_'+str(slit_width)+'w_mask_ab1-'+str(order)+'.bmp'
---
>             mask_set_a, mask_set_b, matrix = make_H_matrix_masks(
>                 order, DMD_size, slit_width, slit_length, Xo, Yo, folder)
> #            name = str(matrix_type)+str(order)+'_'+str(slit_width)+'w_mask_ab1-'+str(order)+'.bmp'
>             name = str(matrix_type)+str(order)+'_mask_' + \
>                 str(slit_width) + 'w_ab_' + "{:03d}".format(order) + '.bmp'
1472c1565
<         self.textbox_masknames.insert(tk.INSERT,str(name))
---
>         self.textbox_masknames.insert(tk.INSERT, str(name))
1474,1478c1567,1572
<         self.entrybox_newmasknames.insert(tk.INSERT,str(name[0:name.rfind("_")]))
<         self.textbox_filename_masks.delete("1.0", tk.END)
<         self.textbox_filename_masks.insert(tk.INSERT,str(name))
<         pass
<         
---
>         self.entrybox_newmasknames.insert(
>             tk.INSERT, str(name[0:name.rfind("_")]))
>         #self.textbox_filename_masks.delete("1.0", tk.END)
>         # self.textbox_filename_masks.insert(tk.INSERT,str(name))
> 
> 
1480c1574
< # 
---
> #
1491a1586,1587
> 
> 
1495c1591
<         [host,port] = IP.split(":")
---
>         [host, port] = IP.split(":")
1498c1594
<         image_map = Image.open(dir_DMD + "/current_dmd_state.png")
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
1500c1596
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1504c1600
<         image_map.close() 
---
>         image_map.close()
1506c1602
<         self.textbox_filename.delete("1.0","end")
---
>         self.textbox_filename.delete("1.0", "end")
1509d1604
<               
1517c1612
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1523c1618
<         self.textbox_filename.delete("1.0","end")
---
>         self.textbox_filename.delete("1.0", "end")
1526d1620
< 
1534c1628
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1540c1634
<         self.textbox_filename.delete("1.0","end")
---
>         self.textbox_filename.delete("1.0", "end")
1547c1641,1642
<         shutil.copy(os.path.join(dir_DMD, "checkerboard.png"),os.path.join(dir_DMD, "current_dmd_state.png"))
---
>         shutil.copy(os.path.join(dir_DMD, "checkerboard.png"),
>                     os.path.join(dir_DMD, "current_dmd_state.png"))
1549c1644
<         image_map = Image.open( os.path.join(dir_DMD, "current_dmd_state.png") )
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
1551c1646
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1557c1652
<         self.textbox_filename.delete("1.0","end")
---
>         self.textbox_filename.delete("1.0", "end")
1563c1658
<         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png") )
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
1572c1667
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1577c1672
<         #self.str_map_filename.set("checkerboard")
---
>         # self.str_map_filename.set("checkerboard")
1589c1684
<         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png") )
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
1591c1686
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1596c1691
<             
---
> 
1600,1606c1695,1701
<         filename = filedialog.askopenfilename(initialdir = os.path.join(dir_DMD, "DMD_csv","maps"),
<                                           title = "Select a File",
<                                           filetypes = (("Text files",
<                                                         "*.csv"),
<                                                        ("all files",
<                                                         "*.*")))
<         subprocess.call(['open', '-a','TextEdit', filename])
---
>         filename = filedialog.askopenfilename(initialdir=os.path.join(dir_DMD, "DMD_csv", "maps"),
>                                               title="Select a File",
>                                               filetypes=(("Text files",
>                                                           "*.csv"),
>                                                          ("all files",
>                                                           "*.*")))
>         subprocess.call(['open', '-a', 'TextEdit', filename])
1610,1611c1705,1706
<         
<         
---
> 
> 
1622,1627c1717,1722
<         filename = filedialog.askopenfilename(initialdir = os.path.join(dir_DMD, "DMD_csv","maps"),
<                                         title = "Select a File",
<                                         filetypes = (("Text files",
<                                                       "*.csv"),
<                                                      ("all files",
<                                                       "*.*")))
---
>         filename = filedialog.askopenfilename(initialdir=os.path.join(dir_DMD, "DMD_csv", "maps"),
>                                               title="Select a File",
>                                               filetypes=(("Text files",
>                                                           "*.csv"),
>                                                          ("all files",
>                                                           "*.*")))
1630c1725
<         
---
> 
1632c1727
<         
---
> 
1635c1730
<         with open (filename,'r') as file:
---
>         with open(filename, 'r') as file:
1639,1641c1734,1736
<         # print(myList) 
<         file.close()        
<       
---
>         # print(myList)
>         file.close()
> 
1644,1645c1739,1740
<         
<         test_shape = np.ones((1080,2048)) # This is the size of the DC2K    
---
> 
>         test_shape = np.ones((1080, 2048))  # This is the size of the DC2K
1647,1650c1742,1746
<             test_shape[int(myList[i][0]):int(myList[i][1]),int(myList[i][2]):int(myList[i][3])] = int(myList[i][4])
<         
<         try: 
<             DMD.apply_shape(test_shape)    
---
>             test_shape[int(myList[i][0]):int(myList[i][1]), int(
>                 myList[i][2]):int(myList[i][3])] = int(myList[i][4])
> 
>         try:
>             DMD.apply_shape(test_shape)
1653c1749
<                 
---
> 
1655,1659d1750
<         
<         #1. instantiate the convert class
<         c=CONVERT()
<                 
<         f = open(os.path.join(local_dir, 'SAMOS_regions','pixels', tail[:-3]+'reg'), 'w')
1661,1662c1752,1759
<         #2. loop over the lines to create ds9 region files
<         header= "# Region file format: DS9 astropy/regions\nglobal edit=1 width=1 font=Sans Serif fill=0 color=red\nimage"
---
>         # 1. instantiate the convert class
>         c = CONVERT()
> 
>         f = open(os.path.join(local_dir, 'SAMOS_regions',
>                  'pixels', tail[:-3]+'reg'), 'w')
> 
>         # 2. loop over the lines to create ds9 region files
>         header = "# Region file format: DS9 astropy/regions\nglobal edit=1 width=1 font=Sans Serif fill=0 color=red\nimage"
1665,1666c1762,1763
<             x0,y0 = c.DMD2CCD(float(myList[i][0]),float(myList[i][2]))
<             x1,y1 = c.DMD2CCD(float(myList[i][1]),float(myList[i][3]))
---
>             x0, y0 = c.DMD2CCD(float(myList[i][0]), float(myList[i][2]))
>             x1, y1 = c.DMD2CCD(float(myList[i][1]), float(myList[i][3]))
1671c1768,1769
<             output_string = "box("+str(xc)+","+str(yc)+","+str(dx)+","+str(dy)+",0)"
---
>             output_string = "box("+str(xc)+","+str(yc) + \
>                 ","+str(dx)+","+str(dy)+",0)"
1675,1677c1773,1775
<             
<         self.m=MainPage(None,None)
<         self.m.textbox_filename_regfile_xyAP.insert(tk.END,tail[:-3]+'reg')       
---
> 
>         self.m = MainPage(None, None)
>         self.m.textbox_filename_regfile_xyAP.insert(tk.END, tail[:-3]+'reg')
1682,1683c1780
<         self.img= ImageTk.PhotoImage(image_map)
<         
---
>         self.img = ImageTk.PhotoImage(image_map)
1686c1783
<         self.canvas.create_image(104,128,image=self.img)
---
>         self.canvas.create_image(104, 128, image=self.img)
1688c1785
<         
---
> 
1694c1791
<         
---
> 
1699,1704c1796,1801
<         filename_slits = filedialog.askopenfilename(initialdir = os.path.join(dir_DMD,"DMD_csv","slits"),
<                                         title = "Select a File",
<                                         filetypes = (("Text files",
<                                                       "*.csv"),
<                                                      ("all files",
<                                                       "*.*")))
---
>         filename_slits = filedialog.askopenfilename(initialdir=os.path.join(dir_DMD, "DMD_csv", "slits"),
>                                                     title="Select a File",
>                                                     filetypes=(("Text files",
>                                                                 "*.csv"),
>                                                                ("all files",
>                                                                 "*.*")))
1710c1807
<         yoffset = np.full(len(table.index),int(2048/4))
---
>         yoffset = np.full(len(table.index), int(2048/4))
1715c1812
<         self.slit_shape = np.ones((1080,2048)) # This is the size of the DC2K
---
>         self.slit_shape = np.ones((1080, 2048))  # This is the size of the DC2K
1717c1814
<            self.slit_shape[x1[i]:x2[i],y1[i]:y2[i]]=0
---
>             self.slit_shape[x1[i]:x2[i], y1[i]:y2[i]] = 0
1719c1816
<         
---
> 
1727c1824
<         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png") )        
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
1729c1826
<         label1 = tk.Label(self.canvas,image=test)
---
>         label1 = tk.Label(self.canvas, image=test)
1735d1831
< 
1739c1835
<         
---
> 
1746,1749c1842,1846
<         
<         #1. read the current filename
<         self.map_filename = os.path.join(dir_DMD,"DMD_csv","maps", self.str_map_filename.get())
<         #2.
---
> 
>         # 1. read the current filename
>         self.map_filename = os.path.join(
>             dir_DMD, "DMD_csv", "maps", self.str_map_filename.get())
>         # 2.
1751c1848
<         with open (self.map_filename,'r') as file:
---
>         with open(self.map_filename, 'r') as file:
1755,1756c1852,1853
<         file.close()        
<         #3
---
>         file.close()
>         # 3
1758c1855,1856
<         row = [str(int(self.x0.get())),str(int(self.y0.get())),str(int(self.x1.get())),str(int(self.y1.get())), "0"]
---
>         row = [str(int(self.x0.get())), str(int(self.y0.get())), str(
>             int(self.x1.get())), str(int(self.y1.get())), "0"]
1760,1761c1858,1859
<         self.map=myList          
<  
---
>         self.map = myList
> 
1765,1766c1863,1864
<         pandas_map.to_csv(self.map_filename,index=False, header=None)
<         
---
>         pandas_map.to_csv(self.map_filename, index=False, header=None)
> 
1769,1771c1867,1870
<         
<         self.map_filename = os.path.join(dir_DMD,"DMD_csv","maps", self.str_map_filename.get())
<         
---
> 
>         self.map_filename = os.path.join(
>             dir_DMD, "DMD_csv", "maps", self.str_map_filename.get())
> 
1773c1872
<         with open (self.map_filename,'r') as file:
---
>         with open(self.map_filename, 'r') as file:
1778,1779c1877,1878
<         
<         #for i in range(len(myList)):
---
> 
>         # for i in range(len(myList)):
1781,1782c1880,1881
<         
<         test_shape = np.ones((1080,2048)) # This is the size of the DC2K    
---
> 
>         test_shape = np.ones((1080, 2048))  # This is the size of the DC2K
1784,1786c1883,1886
<             test_shape[int(myList[i][0]):int(myList[i][1]),int(myList[i][2]):int(myList[i][3])] = int(myList[i][4])
<         
<         DMD.apply_shape(test_shape)    
---
>             test_shape[int(myList[i][0]):int(myList[i][1]), int(
>                 myList[i][2]):int(myList[i][3])] = int(myList[i][4])
> 
>         DMD.apply_shape(test_shape)
1791,1792c1891,1892
<         image_map = Image.open( os.path.join(dir_DMD,"current_dmd_state.png") )
<         self.img= ImageTk.PhotoImage(image_map)
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
>         self.img = ImageTk.PhotoImage(image_map)
1795c1895
<         self.canvas.create_image(104,128,image=self.img)
---
>         self.canvas.create_image(104, 128, image=self.img)
1797,1799c1897,1898
<      
<         
<     def enter_command(self):       
---
> 
>     def enter_command(self):
1801,1802c1900,1902
<         print('command entered:',self.Command_string.get())         
<         t = DMD.send_command_string(self.Command_string.get()) #convert StringVar to string
---
>         print('command entered:', self.Command_string.get())
>         # convert StringVar to string
>         t = DMD.send_command_string(self.Command_string.get())
1805c1905
<         
---
> 
1808c1908
< #        self.destroy()         
---
> #        self.destroy()
1815,1817c1915,1919
<         self.Main = MainPage(None,None)  #MainPage class expects 2 arguments. They may be None.
<         
<         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED, activebackground="#80B9DC")
---
>         # MainPage class expects 2 arguments. They may be None.
>         self.Main = MainPage(None, None)
> 
>         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED,
>                           activebackground="#80B9DC")
1820c1922,1923
<         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED, activebackground="#026AA9")
---
>         filemenu = tk.Menu(menubar, tearoff=0,
>                            relief=tk.RAISED, activebackground="#026AA9")
1822,1828c1925,1940
<         filemenu.add_command(label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
<         filemenu.add_command(label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
<         filemenu.add_command(label="Recalibrate CCD2DMD", command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
<         filemenu.add_command(label="Motors", command=lambda: parent.show_frame(parent.Motors))
<         filemenu.add_command(label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
<         filemenu.add_command(label="MainPage", command=lambda: parent.show_frame(parent.MainPage))        
<         filemenu.add_command(label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
---
>         filemenu.add_command(
>             label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_command(
>             label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
>         filemenu.add_command(label="Recalibrate CCD2DMD",
>                              command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
>         filemenu.add_command(
>             label="Motors", command=lambda: parent.show_frame(parent.Motors))
>         filemenu.add_command(
>             label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
>         filemenu.add_command(
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
>             label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
>         filemenu.add_command(
>             label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
1830c1942
<         filemenu.add_command(label="Exit", command=parent.quit)  
---
>         filemenu.add_command(label="Exit", command=parent.quit)
1839c1951
<         
---
> 
1859a1972
> 
1869c1982
<         self.Echo_String = tk.StringVar()         
---
>         self.Echo_String = tk.StringVar()
1873,1874c1986,1987
< #         
< #         #Get echo from Server 
---
> #
> #         #Get echo from Server
1876c1989,1990
<         Button_Echo_From_Server = tk.Button(self, text="Echo from server",command=self.call_echo_PCM, relief=tk.RAISED)
---
>         Button_Echo_From_Server = tk.Button(
>             self, text="Echo from server", command=self.call_echo_PCM, relief=tk.RAISED)
1878,1882c1992,1997
<         Button_Echo_From_Server.place(x=10,y=10)
<         self.Echo_String = tk.StringVar()        
<         Label_Echo_Text = tk.Label(self,textvariable=self.Echo_String,width=15,bg='white')
<         Label_Echo_Text.place(x=160,y=13)
<         
---
>         Button_Echo_From_Server.place(x=10, y=10)
>         self.Echo_String = tk.StringVar()
>         Label_Echo_Text = tk.Label(
>             self, textvariable=self.Echo_String, width=15, bg='white')
>         Label_Echo_Text.place(x=160, y=13)
> 
1884,1885c1999,2000
< #         
< #        # Power on/odd 
---
> #
> #        # Power on/odd
1891c2006
<         else: 
---
>         else:
1894,1895c2009,2011
<         self.Button_Power_OnOff = tk.Button(self, text=text,command=self.power_switch, relief=tk.RAISED,fg = color)
<         self.Button_Power_OnOff.place(x=10,y=40)
---
>         self.Button_Power_OnOff = tk.Button(
>             self, text=text, command=self.power_switch, relief=tk.RAISED, fg=color)
>         self.Button_Power_OnOff.place(x=10, y=40)
1898c2014
< #         All port statusPower on/odd 
---
> #         All port statusPower on/odd
1900,1902c2016,2019
<         self.Button_All_Ports_Status = tk.Button(self, text="All ports status",command=self.all_ports_status, relief=tk.RAISED)
<         self.Button_All_Ports_Status.place(x=200,y=40)
<   
---
>         self.Button_All_Ports_Status = tk.Button(
>             self, text="All ports status", command=self.all_ports_status, relief=tk.RAISED)
>         self.Button_All_Ports_Status.place(x=200, y=40)
> 
1904c2021
< #         Select FW or GR    
---
> #         Select FW or GR
1907,1915d2023
<         
<         r1 = tk.Radiobutton(self, text='FW1', variable=self.r1_v, value=1, command=self.Choose_FWorGR)
<         r1.place(x=10,y=70) 
<         
<         r2 = tk.Radiobutton(self, text='FW2', variable=self.r1_v, value=2, command=self.Choose_FWorGR)
<         r2.place(x=70,y=70)  
<         
<         r3 = tk.Radiobutton(self, text='GR_A', variable=self.r1_v, value=3, command=self.Choose_FWorGR)
<         r3.place(x=130,y=70) 
1917,1920c2025,2041
<         r3 = tk.Radiobutton(self, text='GR_B', variable=self.r1_v, value=4, command=self.Choose_FWorGR)
<         r3.place(x=190,y=70) 
<    
<         # start with FW1 
---
>         r1 = tk.Radiobutton(self, text='FW1', variable=self.r1_v,
>                             value=1, command=self.Choose_FWorGR)
>         r1.place(x=10, y=70)
> 
>         r2 = tk.Radiobutton(self, text='FW2', variable=self.r1_v,
>                             value=2, command=self.Choose_FWorGR)
>         r2.place(x=70, y=70)
> 
>         r3 = tk.Radiobutton(self, text='GR_A', variable=self.r1_v,
>                             value=3, command=self.Choose_FWorGR)
>         r3.place(x=130, y=70)
> 
>         r3 = tk.Radiobutton(self, text='GR_B', variable=self.r1_v,
>                             value=4, command=self.Choose_FWorGR)
>         r3.place(x=190, y=70)
> 
>         # start with FW1
1926,1927c2047,2049
<         self.Button_home = tk.Button(self, text="send to home",command=self.home, relief=tk.RAISED)
<         self.Button_home.place(x=10,y=100)
---
>         self.Button_home = tk.Button(
>             self, text="send to home", command=self.home, relief=tk.RAISED)
>         self.Button_home.place(x=10, y=100)
1932,1934c2054,2057
<         self.Button_Initialize = tk.Button(self, text="Initialize Filter Wheels",command=self.FW_initialize, relief=tk.RAISED)
<         self.Button_Initialize.place(x=200,y=100)
<   
---
>         self.Button_Initialize = tk.Button(
>             self, text="Initialize Filter Wheels", command=self.FW_initialize, relief=tk.RAISED)
>         self.Button_Initialize.place(x=200, y=100)
> 
1938,1939c2061,2064
<         self.Button_Initialize = tk.Button(self, text="Current steps",command=self.query_current_step_counts, relief=tk.RAISED)
<         self.Button_Initialize.place(x=10,y=130)
---
>         self.Button_Initialize = tk.Button(
>             self, text="Current steps", command=self.query_current_step_counts, relief=tk.RAISED)
>         self.Button_Initialize.place(x=10, y=130)
> 
1941d2065
<     
1943,1944c2067,2068
< #         
< #         #Move to step.... 
---
> #
> #         #Move to step....
1946,1953c2070,2080
<         Button_Move_to_step = tk.Button(self, text="Move to step",command=self.move_to_step, relief=tk.RAISED)
<         Button_Move_to_step.place(x=10,y=160)
<         self.Target_step = tk.StringVar()        
<         Label_Target_step = tk.Entry(self,textvariable=self.Target_step,width=6,bg='white')
<         Label_Target_step.place(x=140,y=163)
<         Button_Stop = tk.Button(self, text="Stop",command=self.stop, relief=tk.RAISED)
<         Button_Stop.place(x=260,y=160)
<     
---
>         Button_Move_to_step = tk.Button(
>             self, text="Move to step", command=self.move_to_step, relief=tk.RAISED)
>         Button_Move_to_step.place(x=10, y=160)
>         self.Target_step = tk.StringVar()
>         Label_Target_step = tk.Entry(
>             self, textvariable=self.Target_step, width=6, bg='white')
>         Label_Target_step.place(x=140, y=163)
>         Button_Stop = tk.Button(
>             self, text="Stop", command=self.stop, relief=tk.RAISED)
>         Button_Stop.place(x=260, y=160)
> 
1955,1956c2082,2083
< #         
< #         #Move to FW_position.... 
---
> #
> #         #Move to FW_position....
1959,1971c2086,2098
<              "A1",
<              "A2",
<              "A3",
<              "A4",
<              "A5",
<              "A6",
<              "B1",
<              "B2",
<              "B3",
<              "B4",
<              "B5",
<              "B6",
<              ]
---
>             "A1",
>             "A2",
>             "A3",
>             "A4",
>             "A5",
>             "A6",
>             "B1",
>             "B2",
>             "B3",
>             "B4",
>             "B5",
>             "B6",
>         ]
1974c2101
<         
---
> 
1980c2107,2108
<         self.menu_FW_pos = tk.OptionMenu(self, self.selected_FW_pos,  *FW_pos_options)
---
>         self.menu_FW_pos = tk.OptionMenu(
>             self, self.selected_FW_pos,  *FW_pos_options)
1982,1983c2110,2112
<         Button_Move_to_FW_pos = tk.Button(self, text="FW Position",command=self.FW_move_to_position, relief=tk.RAISED)
<         Button_Move_to_FW_pos.place(x=10,y=190)
---
>         Button_Move_to_FW_pos = tk.Button(
>             self, text="FW Position", command=self.FW_move_to_position, relief=tk.RAISED)
>         Button_Move_to_FW_pos.place(x=10, y=190)
1986,1987c2115,2116
< #         
< #         #Move to Filter.... 
---
> #
> #         #Move to Filter....
1990,1998c2119,2127
<              "open",
<              "SLOAN-g",
<              "SLOAN-r",
<              "SLOAN-i",
<              "SLOAN-z",
<              "Ha",
<              "O[III]",
<              "S[II]",
<              ]
---
>             "open",
>             "SLOAN-g",
>             "SLOAN-r",
>             "SLOAN-i",
>             "SLOAN-z",
>             "Ha",
>             "O[III]",
>             "S[II]",
>         ]
2001c2130
<         
---
> 
2007c2136,2137
<         self.menu_filters = tk.OptionMenu(self, self.selected_filter,  *filter_options)
---
>         self.menu_filters = tk.OptionMenu(
>             self, self.selected_filter,  *filter_options)
2009,2010c2139,2141
<         Button_Move_to_filter = tk.Button(self, text="Filter",command=self.FW_move_to_filter, relief=tk.RAISED)
<         Button_Move_to_filter.place(x=230,y=190)
---
>         Button_Move_to_filter = tk.Button(
>             self, text="Filter", command=self.FW_move_to_filter, relief=tk.RAISED)
>         Button_Move_to_filter.place(x=230, y=190)
2013,2014c2144,2145
< #         
< #         #Move to GR_position.... 
---
> #
> #         #Move to GR_position....
2017,2021c2148,2152
<              "GR_A1",
<              "GR_A2",
<              "GR_B1",
<              "GR_B2",
<              ]
---
>             "GR_A1",
>             "GR_A2",
>             "GR_B1",
>             "GR_B2",
>         ]
2027c2158,2159
<         self.menu_GR_pos = tk.OptionMenu(self, self.selected_GR_pos,  *GR_pos_options)
---
>         self.menu_GR_pos = tk.OptionMenu(
>             self, self.selected_GR_pos,  *GR_pos_options)
2029,2030c2161,2163
<         Button_Move_to_GR_pos = tk.Button(self, text="GR Position",command=self.GR_move_to_position, relief=tk.RAISED)
<         Button_Move_to_GR_pos.place(x=10,y=220)
---
>         Button_Move_to_GR_pos = tk.Button(
>             self, text="GR Position", command=self.GR_move_to_position, relief=tk.RAISED)
>         Button_Move_to_GR_pos.place(x=10, y=220)
2033c2166
< #         
---
> #
2036,2044c2169,2180
<         Button_Enter_Command = tk.Button(self, text="Enter Command: ",command=self.enter_command, relief=tk.RAISED)
<         Button_Enter_Command.place(x=10,y=250)
<         self.Command_string = tk.StringVar()        
<         Text_Command_string = tk.Entry(self,textvariable=self.Command_string,width=15,bg='white')
<         Text_Command_string.place(x=180,y=252)
<         Label_Command_string_header = tk.Label(self,text=" ~@,9600_8N1T2000,+")
<         Label_Command_string_header.place(x=10,y=280)
<         Label_Command_string_Example = tk.Label(self,text=" (e.g. /1e1R\\n)")
<         Label_Command_string_Example.place(x=165,y=280)
---
>         Button_Enter_Command = tk.Button(
>             self, text="Enter Command: ", command=self.enter_command, relief=tk.RAISED)
>         Button_Enter_Command.place(x=10, y=250)
>         self.Command_string = tk.StringVar()
>         Text_Command_string = tk.Entry(
>             self, textvariable=self.Command_string, width=15, bg='white')
>         Text_Command_string.place(x=180, y=252)
>         Label_Command_string_header = tk.Label(
>             self, text=" ~@,9600_8N1T2000,+")
>         Label_Command_string_header.place(x=10, y=280)
>         Label_Command_string_Example = tk.Label(self, text=" (e.g. /1e1R\\n)")
>         Label_Command_string_Example.place(x=165, y=280)
2048c2184
< # 
---
> #
2051c2187
<         quitButton = tk.Button(self, text="Exit",command=self.client_exit)
---
>         quitButton = tk.Button(self, text="Exit", command=self.client_exit)
2053,2055c2189
<         
<         
<         
---
> 
2059,2060c2193
<         
<   
---
> 
2077,2078c2210,2211
<     
<     def call_echo_PCM(self):    
---
> 
>     def call_echo_PCM(self):
2085c2218
<     def power_switch(self):     
---
>     def power_switch(self):
2088,2089c2221,2222
<         if self.is_on:  #True, power is on => turning off, prepare for turn on agaim
<             t=PCM.power_off()
---
>         if self.is_on:  # True, power is on => turning off, prepare for turn on agaim
>             t = PCM.power_off()
2091,2093c2224,2226
<             self.Button_Power_OnOff.config(text="Turn power On",fg = "green")
<         else:            
<             t=PCM.power_on()
---
>             self.Button_Power_OnOff.config(text="Turn power On", fg="green")
>         else:
>             t = PCM.power_on()
2095c2228
<             self.Button_Power_OnOff.config(text="Turn power Off",fg = "red")
---
>             self.Button_Power_OnOff.config(text="Turn power Off", fg="red")
2098,2099c2231,2232
<     
<     def all_ports_status(self):       
---
> 
>     def all_ports_status(self):
2105c2238
<         
---
> 
2108c2241
<         if self.r1_v.get() == 1: 
---
>         if self.r1_v.get() == 1:
2110c2243
<         if self.r1_v.get() == 2: 
---
>         if self.r1_v.get() == 2:
2112,2114c2245,2247
<         if self.r1_v.get() == 3: 
<             unit= 'GR_A',
<         if self.r1_v.get() == 4: 
---
>         if self.r1_v.get() == 3:
>             unit = 'GR_A',
>         if self.r1_v.get() == 4:
2116,2117c2249,2250
<         self.FWorGR = unit[0]    #returns a list...
<         print(self.FWorGR)    
---
>         self.FWorGR = unit[0]  # returns a list...
>         print(self.FWorGR)
2119c2252
<     def FW_initialize(self):       
---
>     def FW_initialize(self):
2121c2254
<         
---
> 
2128c2261
<     def stop_the_motors(self):       
---
>     def stop_the_motors(self):
2134c2267
<     def query_current_step_counts(self):       
---
>     def query_current_step_counts(self):
2141c2274
<     def home(self):       
---
>     def home(self):
2148c2281
<     def move_to_step(self):       
---
>     def move_to_step(self):
2151,2152c2284,2285
<         
<         t = PCM.go_to_step(self.FWorGR,self.Target_step.get())
---
> 
>         t = PCM.go_to_step(self.FWorGR, self.Target_step.get())
2156c2289
<     def stop(self):       
---
>     def stop(self):
2163c2296
<     def FW_move_to_position(self):       
---
>     def FW_move_to_position(self):
2165c2298
<         print('moving to FW position:',self.selected_FW_pos.get()) 
---
>         print('moving to FW position:', self.selected_FW_pos.get())
2171,2172c2304,2305
<         
<     def FW_move_to_filter(self):       
---
> 
>     def FW_move_to_filter(self):
2174c2307
<         print('moving to filter:',self.selected_filter.get()) 
---
>         print('moving to filter:', self.selected_filter.get())
2181c2314
<     def GR_move_to_position(self):       
---
>     def GR_move_to_position(self):
2183c2316
<         print('moving to GR_position:') 
---
>         print('moving to GR_position:')
2187c2320
<         
---
> 
2190c2323
<     def enter_command(self):       
---
>     def enter_command(self):
2192,2193c2325,2327
<         print('command entered:',self.Command_string.get())         
<         t = PCM.send_command_string(self.Command_string.get()) #convert StringVar to string
---
>         print('command entered:', self.Command_string.get())
>         # convert StringVar to string
>         t = PCM.send_command_string(self.Command_string.get())
2196c2330
<         
---
> 
2200c2334
<         self.destroy() 
---
>         self.destroy()
2208c2342,2343
<         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED, activebackground="#80B9DC")
---
>         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED,
>                           activebackground="#80B9DC")
2211c2346,2347
<         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED, activebackground="#026AA9")
---
>         filemenu = tk.Menu(menubar, tearoff=0,
>                            relief=tk.RAISED, activebackground="#026AA9")
2213,2219c2349,2364
<         filemenu.add_command(label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
<         filemenu.add_command(label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
<         filemenu.add_command(label="Recalibrate CCD2DMD", command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))        
<         filemenu.add_command(label="Motors", command=lambda: parent.show_frame(parent.Motors))
<         filemenu.add_command(label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
<         filemenu.add_command(label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
<         filemenu.add_command(label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
---
>         filemenu.add_command(
>             label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_command(
>             label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
>         filemenu.add_command(label="Recalibrate CCD2DMD",
>                              command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
>         filemenu.add_command(
>             label="Motors", command=lambda: parent.show_frame(parent.Motors))
>         filemenu.add_command(
>             label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
>         filemenu.add_command(
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
>             label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
>         filemenu.add_command(
>             label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
2221c2366
<         filemenu.add_command(label="Exit", command=parent.quit)  
---
>         filemenu.add_command(label="Exit", command=parent.quit)
2250a2396
> 
2256c2402
<         label.pack(pady=0,padx=0)
---
>         label.pack(pady=0, padx=0)
2259c2405,2406
<         self.frame0l = tk.Frame(self,background="cyan")#, width=300, height=300)
---
>         # , width=300, height=300)
>         self.frame0l = tk.Frame(self, background="cyan")
2261a2409
>         """
2491c2639
< 
---
>         """
2496c2644
< # 
---
> #
2499,2501c2647,2652
<         self.frame2r = tk.Frame(self.frame0l,background="#4A7A8C")#, width=400, height=800)
<         self.frame2r.place(x=430, y=4, anchor="nw", width=360, height=400)
<         labelframe_Setup =  tk.LabelFrame(self.frame2r, text="Camera Setup", font=("Arial", 24))
---
>         # , width=400, height=800)
>         self.frame2r = tk.Frame(self.frame0l, background="#4A7A8C")
> #        self.frame2r.place(x=430, y=4, anchor="nw", width=360, height=400)
>         self.frame2r.place(x=4, y=4, anchor="nw", width=360, height=400)
>         labelframe_Setup = tk.LabelFrame(
>             self.frame2r, text="Camera Setup", font=("Arial", 24))
2503c2654
<         
---
> 
2506c2657
<                                                         # command = open_close_camera)
---
>         # command = open_close_camera)
2508c2659
<         
---
> 
2510c2661
<                                                         # command = open_close_camera)
---
>         # command = open_close_camera)
2512,2513c2663,2664
<         
<  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===       
---
> 
>  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===
2517,2521c2668,2672
<                          text = "The Camera is off",
<                          fg = "grey",
<                          font = ("Helvetica", 20))
<         self.label_camera_ON.place(x=4,y=8)
<         
---
>                                         text="The Camera is off",
>                                         fg="grey",
>                                         font=("Helvetica", 20))
>         self.label_camera_ON.place(x=4, y=8)
> 
2523,2526c2674,2680
<         self.on_png = tk.PhotoImage(file = os.path.join(local_dir, "tk_utilities","on.png") )
<         self.off_png = tk.PhotoImage(file = os.path.join(local_dir, "tk_utilities","off.png") )
<         self.button_open_camera= tk.Button(labelframe_Setup, image=self.off_png, bd=0, command=self.turn_camera_ON)
<                                                         # command = open_close_camera)
---
>         self.on_png = tk.PhotoImage(file=os.path.join(
>             local_dir, "tk_utilities", "on.png"))
>         self.off_png = tk.PhotoImage(file=os.path.join(
>             local_dir, "tk_utilities", "off.png"))
>         self.button_open_camera = tk.Button(
>             labelframe_Setup, image=self.off_png, bd=0, command=self.turn_camera_ON)
>         # command = open_close_camera)
2529c2683
<  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===       
---
>  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===
2533,2537c2687,2691
<                          text = "The Cooler is off",
<                          fg = "grey",
<                          font = ("Helvetica", 20))
<         self.label_cooler_ON.place(x=4,y=58)
<         
---
>                                         text="The Cooler is off",
>                                         fg="grey",
>                                         font=("Helvetica", 20))
>         self.label_cooler_ON.place(x=4, y=58)
> 
2539,2540c2693,2695
<         self.button_open_cooler= tk.Button(labelframe_Setup, image=self.off_png, bd=0, command=self.turn_cooler_ON)
<                                                         # command = open_close_camera)
---
>         self.button_open_cooler = tk.Button(
>             labelframe_Setup, image=self.off_png, bd=0, command=self.turn_cooler_ON)
>         # command = open_close_camera)
2542c2697
<  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===       
---
>  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===
2544,2545c2699,2701
<         label_Tset =  tk.Label(labelframe_Setup, text="CCD Temperature Sepoint (C)")
<         label_Tset.place(x=4,y=98)
---
>         label_Tset = tk.Label(
>             labelframe_Setup, text="CCD Temperature Sepoint (C)")
>         label_Tset.place(x=4, y=98)
2548c2704
<         entry_Tset = tk.Entry(labelframe_Setup, 
---
>         entry_Tset = tk.Entry(labelframe_Setup,
2551c2707
<                               bd =3)
---
>                               bd=3)
2554,2555c2710,2712
<         label_Tdet = tk.Label(labelframe_Setup, text="Current CCD Temperature (K)")
<         label_Tdet.place(x=4,y=128)
---
>         label_Tdet = tk.Label(
>             labelframe_Setup, text="Current CCD Temperature (K)")
>         label_Tdet.place(x=4, y=128)
2557c2714
<         label_show_Tdet = tk.Label(labelframe_Setup, 
---
>         label_show_Tdet = tk.Label(labelframe_Setup,
2559c2716
<                                    font=('Arial',16),
---
>                                    font=('Arial', 16),
2562c2719
<                                    bg="green",fg="white",
---
>                                    bg="green", fg="white",
2564c2721
<         label_show_Tdet.place(x=200,y=126)
---
>         label_show_Tdet.place(x=200, y=126)
2566,2567c2723,2724
<             
<  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===       
---
> 
>  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===
2571c2728
<          
---
> 
2574,2575c2731,2732
<             self.button_open_camera.config(image = self.off_png)
<             self.label_camera_ON.config(text = "The Camera is Off",fg = "grey")
---
>             self.button_open_camera.config(image=self.off_png)
>             self.label_camera_ON.config(text="The Camera is Off", fg="grey")
2578,2579c2735,2736
<             self.button_open_camera.config(image = self.on_png)
<             self.label_camera_ON.config(text = "The Camera is On", fg = "green")
---
>             self.button_open_camera.config(image=self.on_png)
>             self.label_camera_ON.config(text="The Camera is On", fg="green")
2582c2739
<  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===       
---
>  # ===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===##===#===#===
2586c2743
<          
---
> 
2589,2590c2746,2747
<             self.button_open_cooler.config(image = self.off_png)
<             self.label_cooler_ON.config(text = "The Cooler is Off",fg = "grey")
---
>             self.button_open_cooler.config(image=self.off_png)
>             self.label_cooler_ON.config(text="The Cooler is Off", fg="grey")
2593,2594c2750,2751
<             self.button_open_cooler.config(image = self.on_png)
<             self.label_cooler_ON.config(text = "The Cooler is On", fg = "green")
---
>             self.button_open_cooler.config(image=self.on_png)
>             self.label_cooler_ON.config(text="The Cooler is On", fg="green")
2618d2774
<  
2620c2776
<    
---
> 
2623c2779
< # 
---
> #
3087a3244
> 
3094c3251,3252
<         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED, activebackground="#80B9DC")
---
>         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED,
>                           activebackground="#80B9DC")
3097c3255,3256
<         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED, activebackground="#026AA9")
---
>         filemenu = tk.Menu(menubar, tearoff=0,
>                            relief=tk.RAISED, activebackground="#026AA9")
3099,3105c3258,3273
<         filemenu.add_command(label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
<         filemenu.add_command(label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
<         filemenu.add_command(label="Recalibrate CCD2DMD", command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))        
<         filemenu.add_command(label="Motors", command=lambda: parent.show_frame(parent.Motors))
<         filemenu.add_command(label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
<         filemenu.add_command(label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
<         filemenu.add_command(label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
---
>         filemenu.add_command(
>             label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_command(
>             label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
>         filemenu.add_command(label="Recalibrate CCD2DMD",
>                              command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
>         filemenu.add_command(
>             label="Motors", command=lambda: parent.show_frame(parent.Motors))
>         filemenu.add_command(
>             label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
>         filemenu.add_command(
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
>             label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
>         filemenu.add_command(
>             label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
3107c3275
<         filemenu.add_command(label="Exit", command=parent.quit)  
---
>         filemenu.add_command(label="Exit", command=parent.quit)
3124a3293
> 
3136,3137c3305,3307
< from SAMOS_DMD_dev.DMD_get_pixel_mapping_GUI_dana import Coord_Transform_Helpers as CTH
< #will rename/relocate the CTH class once this works
---
> # will rename/relocate the CTH class once this works
> 
> 
3139a3310
> 
3145c3316
<     #         
---
>     #
3147c3318
<     #         
---
>     #
3155c3326
<  
---
> 
3158c3329
<         vbox_l = tk.Frame(self,relief=tk.RAISED)
---
>         vbox_l = tk.Frame(self, relief=tk.RAISED)
3160c3331
<         vbox_l.place(x=5,y=0,anchor="nw",width=220,height=550)
---
>         vbox_l.place(x=5, y=0, anchor="nw", width=220, height=550)
3162,3163c3333,3336
<         
<         self.frame0l = tk.Frame(self.vb_l,background="#9D76A4",relief=tk.RAISED)#, width=400, height=800)
---
> 
>         # , width=400, height=800)
>         self.frame0l = tk.Frame(
>             self.vb_l, background="#9D76A4", relief=tk.RAISED)
3165,3166c3338
<         
<         
---
> 
3169,3172c3341,3344
<         
<         self.file_browse_button = tk.Button(self.frame0l,text="Open Grid FITS File",
<                                             bg="#9D76A4",command=self.browse_grid_fits_files)
<         #browse_files.pack(side=tk.TOP)
---
> 
>         self.file_browse_button = tk.Button(self.frame0l, text="Open Grid FITS File",
>                                             bg="#9D76A4", command=self.browse_grid_fits_files)
>         # browse_files.pack(side=tk.TOP)
3174d3345
<         
3176d3346
<         
3180c3350
<         vbox.place(x=250, y=0, anchor="nw")#, width=500, height=800)
---
>         vbox.place(x=250, y=0, anchor="nw")  # , width=500, height=800)
3186,3189c3356,3362
< 
<         fi = CanvasView(logger) #=> ImageViewTk -- a backend for Ginga using a Tk canvas widget
<         fi.set_widget(canvas)  #=> Call this method with the Tkinter canvas that will be used for the display.
<         #fi.set_redraw_lag(0.0)
---
>         
>         # => ImageViewTk -- a backend for Ginga using a Tk canvas widget
>         fi = CanvasView(logger)
>         
>         # => Call this method with the Tkinter canvas that will be used for the display.
>         fi.set_widget(canvas)
>         # fi.set_redraw_lag(0.0)
3193c3366
<         #fi.enable_draw(False)
---
>         # fi.enable_draw(False)
3201c3374
<         fi.show_mode_indicator(True, corner = 'ur')
---
>         fi.show_mode_indicator(True, corner='ur')
3206,3207c3379
<         
<         
---
> 
3209c3381
<         self.dmd_pattern_label = tk.Label(self,text=self.dmd_pattern_text)
---
>         self.dmd_pattern_label = tk.Label(self, text=self.dmd_pattern_text)
3211,3212c3383,3384
<         self.dmd_pattern_label.place(x=520,y=545,anchor="s")
<         
---
>         self.dmd_pattern_label.place(x=520, y=545, anchor="s")
> 
3216c3388
<         vbox_c.place(x=60, y=545, anchor="nw")#, width=500, height=800)
---
>         vbox_c.place(x=60, y=545, anchor="nw")  # , width=500, height=800)
3218,3220c3390,3392
<         
<         tk_grid_sources_table = tksheet.Sheet(vbox_c, width=900, height=300, 
<                                                column_width=60)        #tk_sources_table.headers()
---
> 
>         tk_grid_sources_table = tksheet.Sheet(vbox_c, width=900, height=300,
>                                               column_width=60)  # tk_sources_table.headers()
3222c3394
<         
---
> 
3225c3397
<  #         
---
>  #
3231,3232c3403,3404
<  #         
<  # =============================================================================       
---
>  #
>  # =============================================================================
3234,3239c3406,3410
<         
<         self.source_find_button = tk.Button(self.frame0l,text="Run IRAFStarFinder",
<                                             bg="#9D76A4",state="disabled", command=self.irafstarfind)
<         #self.source_find_button.place(x=4)
<         #self.frame1l.create_window(102,120,window=self.source_find_button)
<         self.source_find_button.pack(anchor="n",padx=4,pady=15)
---
>         self.source_find_button = tk.Button(self.frame0l, text="Run IRAFStarFinder",
>                                             bg="#9D76A4", state="disabled", command=self.irafstarfind)
>         # self.source_find_button.place(x=4)
>         # self.frame1l.create_window(102,120,window=self.source_find_button)
>         self.source_find_button.pack(anchor="n", padx=4, pady=15)
3241,3242c3412,3413
<         
<         self.run_coord_transf_button = tk.Button(self.frame0l,text="Initialize Coord Transform",bg="#9D76A4",state="disabled",
---
> 
>         self.run_coord_transf_button = tk.Button(self.frame0l, text="Initialize Coord Transform", bg="#9D76A4", state="disabled",
3244c3415
<         self.run_coord_transf_button.pack(padx=15,pady=5)
---
>         self.run_coord_transf_button.pack(padx=15, pady=5)
3246c3417
<         
---
> 
3251c3422
<         
---
> 
3253,3254c3424,3425
<         
<         self.coord_text = '({},{})'.format(x,y)
---
> 
>         self.coord_text = '({},{})'.format(x, y)
3256d3426
<         
3258d3427
<     
3261,3269c3430,3437
<         
<         filename = tk.filedialog.askopenfilename(initialdir = os.path.join(local_dir,"fits_image"),filetypes=[("FITS files","*fits")], 
<                             title = "Select a FITS File",parent=self.frame0l)
<         
<         
<         if filename=='':
<              print('no grid file selected')
<              return        
<          
---
> 
>         filename = tk.filedialog.askopenfilename(initialdir=os.path.join(local_dir, "SAMOS_QL_images"), filetypes=[("FITS files", "*fits")],
>                                                  title="Select a FITS File", parent=self.frame0l)
> 
>         if filename == '':
>             print('no grid file selected')
>             return
> 
3271c3439
<        
---
> 
3273,3274c3441
<        
<         
---
> 
3278c3445
<         
---
> 
3283,3284c3450,3452
<         
<         self.grid_pattern_fullPath = os.path.join("SAMOS_DMD_dev","DMD_csv","slits","{}".format(self.grid_pattern_name))
---
> 
>         self.grid_pattern_fullPath = os.path.join(
>             "SAMOS_DMD_dev", "DMD_csv", "slits", "{}".format(self.grid_pattern_name))
3286,3288c3454,3457
<         self.dmd_table = dmd_table#.sort_values(by="y", ascending=False).reset_index(drop=True)
<         
<         #self.rotate_dmd_table_180()
---
>         # .sort_values(by="y", ascending=False).reset_index(drop=True)
>         self.dmd_table = dmd_table
> 
>         # self.rotate_dmd_table_180()
3291c3460
<         
---
> 
3293c3462
<         
---
> 
3295,3297c3464,3467
<         rot_dmd_tab = self.dmd_table.sort_values(by="y", ascending=False).reset_index(drop=True)
<         j=-1
<         
---
>         rot_dmd_tab = self.dmd_table.sort_values(
>             by="y", ascending=False).reset_index(drop=True)
>         j = -1
> 
3299c3469
<         
---
> 
3302c3472
<             
---
> 
3305,3307c3475,3478
<             #print(sorted_row)
<             if i==inds[-1]:
<                 sorted_row = rot_dmd_tab.iloc[i:].copy().sort_values(by="x", ascending=False)
---
>             # print(sorted_row)
>             if i == inds[-1]:
>                 sorted_row = rot_dmd_tab.iloc[i:].copy(
>                 ).sort_values(by="x", ascending=False)
3311,3313c3482,3485
<             next_ind = inds[ind+1]        
<             sorted_row = rot_dmd_tab.iloc[i:i+numcols].copy().sort_values(by="x", ascending=False)
<             
---
>             next_ind = inds[ind+1]
>             sorted_row = rot_dmd_tab.iloc[i:i +
>                                           numcols].copy().sort_values(by="x", ascending=False)
> 
3315c3487
<             
---
> 
3320,3321c3492
<            
<     def irafstarfind(self):#expected_sources=53**2,fwhm=5):
---
>     def irafstarfind(self):  # expected_sources=53**2,fwhm=5):
3323,3325c3494,3496
<         
<         fwhm = 2 #float(self.source_fwhm_entry.get())
<         
---
> 
>         fwhm = 5  # float(self.source_fwhm_entry.get())
> 
3327,3330c3498,3509
<         
<         ccd[:,1000:] = 0
<         ccd[:,:40] = 0
<         
---
>         # bright columns on left and right side of CCD that we don't want to be included in the starfinder.
>         # set them to be the average of surrounding columns
>         colcorr_ccd = ccd.copy()
>         for col in range(1010, 1025):
>             colcorr_ccd[:, col] = np.average(
>                 (np.average(ccd[:, 1000:1009], axis=1), np.average(ccd[:, 1020:], axis=1)), axis=0)
> 
>         for col in range(20, 40):
>             colcorr_ccd[:, col] = np.average(
>                 (np.average(ccd[:, 0:20], axis=1), np.average(ccd[:, 40:50], axis=1)), axis=0)
> 
>         ccd = colcorr_ccd.copy()
3332c3511
<         #print(ccd.header)
---
>         # print(ccd.header)
3334c3513
<         
---
> 
3336,3337c3515,3516
<         #print(std_ccd)
<         xpixels , ypixels = [], []
---
>         # print(std_ccd)
>         xpixels, ypixels = [], []
3339c3518
<             
---
> 
3344c3523
<         
---
> 
3346,3348c3525,3527
<         xypixels = np.vstack((np.array(ypixels),np.array(xpixels))).T
<         
<         #sources_table, unsorted_sources = CTH.iraf_gridsource_find(ccd,expected_sources=expected_sources,fwhm=fwhm,
---
>         xypixels = np.vstack((np.array(ypixels), np.array(xpixels))).T
> 
>         # sources_table, unsorted_sources = CTH.iraf_gridsource_find(ccd,expected_sources=expected_sources,fwhm=fwhm,
3350,3352d3528
<         
<         sources_table, unsorted_sources = CTH.iraf_gridsource_find(ccd,expected_sources=expected_sources,fwhm=fwhm,
<                                                                    threshold=3*std_ccd)# exclude_border=True)
3354,3355c3530,3535
<         iraf_positions = np.transpose((sources_table['xcentroid'], sources_table['ycentroid']))
<         
---
>         sources_table, unsorted_sources = CTH.iraf_gridsource_find(ccd, expected_sources=expected_sources, fwhm=fwhm,
>                                                                    threshold=3*std_ccd)  # exclude_border=True)
> 
>         iraf_positions = np.transpose(
>             (sources_table['xcentroid'], sources_table['ycentroid']))
> 
3357,3361c3537,3539
<         
<         
<         
<         DMD_PIX_df = pd.concat((self.dmd_table,self.sources_table),axis=1)
<         
---
> 
>         DMD_PIX_df = pd.concat((self.dmd_table, self.sources_table), axis=1)
> 
3366c3544
<        
---
> 
3368,3370c3546,3548
<         self.tk_grid_sources_table.headers(newheaders = DMD_PIX_df.columns.values,
<                                             show_headers_if_not_sheet = True, 
<                                             redraw = True)
---
>         self.tk_grid_sources_table.headers(newheaders=DMD_PIX_df.columns.values,
>                                            show_headers_if_not_sheet=True,
>                                            redraw=True)
3376c3554
<             
---
> 
3379,3381c3557,3559
<                                             width=40, height=40,
<                                             angle = 0*u.deg)
<             
---
>                                        width=40, height=40,
>                                        angle=0*u.deg)
> 
3384,3385d3561
<     
< 
3389,3390d3564
<         
< 
3393,3394d3566
<         
<         
3411c3583,3584
<         new_hdu.writeto(os.path.join( "SAMOS_DMD_dev","CONVERT","DMD_Mapping_WCS.fits"), overwrite=True)
---
>         new_hdu.writeto(os.path.join("SAMOS_DMD_dev", "CONVERT",
>                         "DMD_Mapping_WCS.fits"), overwrite=True)
3415d3587
<     
3421,3422d3592
<         
<         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED, activebackground="#80B9DC")
3424,3425c3594,3599
<         ## Filemenu
<         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED, activebackground="#026AA9")
---
>         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED,
>                           activebackground="#80B9DC")
> 
>         # Filemenu
>         filemenu = tk.Menu(menubar, tearoff=0,
>                            relief=tk.RAISED, activebackground="#026AA9")
3427,3433c3601,3616
<         filemenu.add_command(label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
<         filemenu.add_command(label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
<         filemenu.add_command(label="Recalibrate CCD2DMD", command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
<         filemenu.add_command(label="Motors", command=lambda: parent.show_frame(parent.Motors))
<         filemenu.add_command(label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
<         filemenu.add_command(label="MainPage", command=lambda: parent.show_frame(parent.MainPage))        
<         filemenu.add_command(label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
---
>         filemenu.add_command(
>             label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_command(
>             label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
>         filemenu.add_command(label="Recalibrate CCD2DMD",
>                              command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
>         filemenu.add_command(
>             label="Motors", command=lambda: parent.show_frame(parent.Motors))
>         filemenu.add_command(
>             label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
>         filemenu.add_command(
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
>             label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
>         filemenu.add_command(
>             label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
3435c3618
<         filemenu.add_command(label="Exit", command=parent.quit)  
---
>         filemenu.add_command(label="Exit", command=parent.quit)
3444,3445c3627,3628
<         
<         ## help menu
---
> 
>         # help menu
3457c3640
< # ---------------------------------------- MAIN PAGE FRAME / CONTAINER ------------------------------------------------------------------------
---
> # ---------------------------------------- CCD PAGE FRAME / CONTAINER ------------------------------------------------------------------------
3462c3645,3646
< class MainPage(tk.Frame):
---
> 
> class SOAR_Page(tk.Frame):
3468,3471d3651
<         
<         self.container = container
<         logger = log.get_logger("example2", options=None)
<         self.logger = logger
3473,3474c3653,3654
<         label = tk.Label(self, text="Main Page", font=('Times', '20'))
<         label.pack(pady=0,padx=0)
---
>         #label = tk.Label(self, text="SOAR TCS 1", font=('Times', '20'))
>         # label.pack(pady=0,padx=0)
3476a3657,3678
>         # , width=300, height=300)
>         self.frame0l = tk.Frame(self, background="light gray")
>         self.frame0l.place(x=0, y=0, anchor="nw", width=1280, height=650)
> 
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
> #      TCS Controls
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
> 
>        # label_Send_to_TCS =  tk.Button(self.frame0l, text="Send to TCS", command=self.Send_to_TCS)
>        # label_Send_to_TCS.place(x=4,y=10)
>        # self.Send_to_TCS_msg=tk.StringVar()
>        # self.Send_to_TCS_msg.set("")
>        # entry_Send_to_TCS = tk.Entry(self.frame0l, textvariable=self.Send_to_TCS_msg, width=40,  bd =3)
>        # entry_Send_to_TCS.place(x=200, y=8)
> 
>         button_WAY = tk.Button(
>             self.frame0l, text="Who are you?", command=self.WAY)
>         button_WAY.place(x=4, y=40)
>         # self.WAY_msg=tk.StringVar()
>         # self.WAY_msg.set("")
>         #entry_WAY = tk.Entry(self.frame0l, textvariable=self.WAY_msg, width=20,  bd =3)
>         #entry_WAY.place(x=200, y=38)
3478,3524c3680,3846
<         # keep track of the entry number for header keys that need to be added
<         # will be used to write "OtherParameters.txt"
<         self.extra_header_params = 0
<         self.header_entry_string = '' #keep string of entries to write to a file after acquisition.
<         main_fits_header.create_main_params_dict()
<         self.wcs = None
<         self.canvas_types = get_canvas_types()
<         self.drawcolors = colors.get_colors()
<         self.SlitTabView = None
<         self.loaded_regfile = None
<         today = datetime.now()
<         self.fits_dir = os.path.join(local_dir, "SISI_images/SAMOS_" + today.strftime('%Y%m%d'))
<         
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
< #         
< #  #    OBSERVER/NIGHT INFO Label Frame
< #         
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
<         self.frame_ObsInf = tk.Frame(self, background="cyan")
<         self.frame_ObsInf.place(x=14, y=0, anchor="nw", width=400, height=150)
<         
<         labelframe_ObsInf = tk.LabelFrame(self.frame_ObsInf, text="Observer Info", 
<                                           font=("Ariel", 24))
<         labelframe_ObsInf.pack(fill="both", expand="yes")
<         
<         #name_scroll = tk.Scrollbar(labelframe_ObsInf)
<         #name_scroll.pack(side=tk.BOTTOM, fill=tk.Y)
<         self.names_var = tk.StringVar()
<         name_label = tk.Label(labelframe_ObsInf, text="Observer Name(s): ")
<         name_label.place(x=30, y=4)
<         name_entry = tk.Entry(labelframe_ObsInf, width=25, bd=3, 
<                               textvariable=self.names_var)
<                               #xscrollcommand=name_scroll)
<         name_entry.place(x=150, y=4)
<         
<         self.program_var = tk.StringVar()
<         program_label = tk.Label(labelframe_ObsInf, text="Program ID: ")
<         program_label.place(x=71, y=35)
<         program_entry = tk.Entry(labelframe_ObsInf, width=25, bd=3, 
<                                  textvariable=self.program_var)
<         program_entry.place(x=150, y=35)
<         
<         self.TO_var = tk.StringVar()
<         TO_label = tk.Label(labelframe_ObsInf, text="Telescope Operator(s): ")
<         TO_label.place(x=4, y=66)
<         TO_entry = tk.Entry(labelframe_ObsInf, width=25, bd=3, textvariable=self.TO_var)
<         TO_entry.place(x=150, y=66)
---
> #       Offset_options = ["Offset MOVE", "Offset STATUS"]
> #        # datatype of menu text
> #        self.Offset_option_selected = tk.StringVar()
> #        # initial Offset options text
> #        self.Offset_option_selected.set( "Offset MOVE" )
> #        # Create Dropdown menu
> #        Offset_options_drop = tk.OptionMenu( self.frame0l , self.Offset_option_selected , *Offset_options, command = self.Offset_option_TCS )
> #        Offset_options_drop.place(x=4, y=70)
> #        self.Offset_option_msg=tk.StringVar()
> #        self.Offset_option_msg.set("E 34.3 N 56.7")
> #        entry_Offset_option = tk.Entry(self.frame0l, textvariable=self.Offset_option_msg, width=20,  bd =3)
> #        entry_Offset_option.place(x=200, y=68)
>         from functools import partial
>         button_OFFSET_MOVE = tk.Button(
>             self.frame0l, text="OFFSET MOVE", command=partial(self.Offset_option_TCS, "MOVE"))
>         button_OFFSET_MOVE.place(x=4, y=70)
>         self.OFFSET_MOVE_msg = tk.StringVar()
>         self.OFFSET_MOVE_msg.set("E 0.00 N 0.00")
>         entry_OFFSET_MOVE = tk.Entry(
>             self.frame0l, textvariable=self.OFFSET_MOVE_msg, width=20,  bd=3)
>         entry_OFFSET_MOVE.place(x=200, y=68)
>         button_OFFSET_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.Offset_option_TCS, "STATUS"))
>         button_OFFSET_STATUS.place(x=400, y=70)
> 
>         Focus_options = ["Focus MOVEABS", "Focus MOVEREL"]
>         # datatype of menu text
>         self.Focus_option_selected = tk.StringVar()
>         # initial Focus options text
>         self.Focus_option_selected.set("Focus MOVEREL")
>         # Create Dropdown menu
>         Focus_options_drop = tk.OptionMenu(
>             self.frame0l, self.Focus_option_selected, *Focus_options, command=self.Focus_option_TCS)
>         Focus_options_drop.place(x=4, y=100)
>         self.Focus_option_msg = tk.StringVar()
>         self.Focus_option_msg.set("0")
>         entry_Focus_option = tk.Entry(
>             self.frame0l, textvariable=self.Focus_option_msg, width=20,  bd=3)
>         entry_Focus_option.place(x=200, y=98)
> 
>         CLM_options = ["CLM IN", "CLM OUT"]
>         # datatype of menu text
>         self.CLM_option_selected = tk.StringVar()
>         # initial CLM options text
>         self.CLM_option_selected.set("CLM IN")
>         # Create Dropdown menu
>         CLM_options_drop = tk.OptionMenu(
>             self.frame0l, self.CLM_option_selected, *CLM_options, command=self.CLM_option_TCS)
>         CLM_options_drop.place(x=4, y=130)
> #        self.CLM_option_msg=tk.StringVar()
> #        self.CLM_option_msg.set("")
> #        entry_CLM_option = tk.Entry(self.frame0l, textvariable=self.CLM_option_msg, width=20,  bd =3)
> #        entry_CLM_option.place(x=200, y=128)
>         button_CLM_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.CLM_option_TCS, "STATUS"))
>         button_CLM_STATUS.place(x=400, y=130)
> 
>         Guider_options = ["Guider DISABLE", "Guider ENABLE"]
>         # datatype of menu text
>         self.Guider_option_selected = tk.StringVar()
>         # initial Guider options text
>         self.Guider_option_selected.set("Guider STATUS")
>         # Create Dropdown menu
>         Guider_options_drop = tk.OptionMenu(
>             self.frame0l, self.Guider_option_selected, *Guider_options, command=self.Guider_option_TCS)
>         Guider_options_drop.place(x=4, y=160)
> #        self.Guider_option_msg=tk.StringVar()
> #        self.Guider_option_msg.set("")
> #        entry_Guider_option = tk.Entry(self.frame0l, textvariable=self.Guider_option_msg, width=20,  bd =3)
> #        entry_Guider_option.place(x=200, y=158)
>         button_Guider_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.Guider_option_TCS, "STATUS"))
>         button_Guider_STATUS.place(x=400, y=160)
> 
>         Whitespot_options = ["Whitespot ON", "Whitespot OFF"]
>         # datatype of menu text
>         self.Whitespot_option_selected = tk.StringVar()
>         # initial Whitespot options text
>         self.Whitespot_option_selected.set("Whitespot OFF")
>         # Create Dropdown menu
>         Whitespot_options_drop = tk.OptionMenu(
>             self.frame0l, self. Whitespot_option_selected, *Whitespot_options, command=self.Whitespot_option_TCS)
>         Whitespot_options_drop.place(x=4, y=190)
>         self.Whitespot_option_msg = tk.StringVar()
>         self.Whitespot_option_msg.set("50")
>         entry_Whitespot_option = tk.Entry(
>             self.frame0l, textvariable=self.Whitespot_option_msg, width=20,  bd=3)
>         entry_Whitespot_option.place(x=200, y=188)
>         button_Whitespot_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.Whitespot_option_TCS, "STATUS"))
>         button_Whitespot_STATUS.place(x=400, y=190)
> 
>         Lamp_LN_options = ["Lamp LN ON", "Lamp LN OFF"]
>         # datatype of menu text
>         self.Lamp_LN_option_selected = tk.StringVar()
>         # initial LAMP LN options text
>         self.Lamp_LN_option_selected.set("LAMP LN OFF")
>         # Create Dropdown menu
>         Lamp_LN_options_drop = tk.OptionMenu(
>             self.frame0l, self.Lamp_LN_option_selected, *Lamp_LN_options, command=self.LAMP_LN_option_TCS)
>         Lamp_LN_options_drop.place(x=4, y=220)
>         self.Lamp_LN_option_msg = tk.StringVar()
>         self.Lamp_LN_option_msg.set("L2")
>         entry_Lamp_LN_option = tk.Entry(
>             self.frame0l, textvariable=self.Lamp_LN_option_msg, width=20,  bd=3)
>         entry_Lamp_LN_option.place(x=200, y=218)
>         button_Lamp_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.LAMP_LN_option_TCS, "STATUS"))
>         button_Lamp_STATUS.place(x=400, y=220)
> 
>         """
>         self.v = tk.StringVar()
>         self.v.set("OFF")  # initializing the choice, i.e. Python
> 
>         languages = ["ON", "OFF"]
> 
>         tk.Label(self.frame0l, 
>         text=""" """"LAMP LN:""" """,
>                  justify = tk.LEFT,
>                  padx = 20).place(x=4, y=250)
> 
>         
>         tk.Radiobutton(self.frame0l, 
>                    text=languages[0],
>                    padx = 20, 
>                    variable=self.v, 
>                    command=self.LAMP_LN_option_TCS,
>                    value="ON").place(x=200, y=250)
>         tk.Radiobutton(self.frame0l, 
>                    text=languages[1],
>                    padx = 20, 
>                    variable=self.v, 
>                    command=self.LAMP_LN_option_TCS,
>                    value="OFF").place(x=300, y=250)
>         """
> 
>         ADC_options = ["ADC MOVE", "ADC IN",
>                        "ADC PARK", "ADC STATUS", "ADC TRACK"]
>         # datatype of menu text
>         self.ADC_option_selected = tk.StringVar()
>         # initial ADC options text
>         self.ADC_option_selected.set("ADC STATUS")
>         # Create Dropdown menu
>         ADC_options_drop = tk.OptionMenu(
>             self.frame0l, self.ADC_option_selected, *ADC_options, command=self.ADC_option_TCS)
>         ADC_options_drop.place(x=4, y=250)
>         self.ADC_option_msg = tk.StringVar()
>         self.ADC_option_msg.set("")
>         entry_ADC_option = tk.Entry(
>             self.frame0l, textvariable=self.ADC_option_msg, width=20,  bd=3)
>         entry_ADC_option.place(x=200, y=248)
> 
>         Target_options = ["TARGET MOVE", "TARGET MOUNT",
>                           "TARGET STATUS", "TARGET STOP"]
>         # datatype of menu text
>         self.Target_option_selected = tk.StringVar()
>         # initial ADC options text
>         self.Target_option_selected.set("TARGET STATUS")
>         # Create Dropdown menu
>         Targets_drop = tk.OptionMenu(
>             self.frame0l, self.Target_option_selected, *Target_options, command=self.Target_option_TCS)
>         Targets_drop.place(x=4, y=280)
>         self.Target_option_msg = tk.StringVar()
>         self.Target_option_msg.set("")
>         entry_Target = tk.Entry(
>             self.frame0l, textvariable=self.Target_option_msg, width=20,  bd=3)
>         entry_Target.place(x=200, y=278)
3526,3537c3848,3871
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
< #         
< #  #    FILTER STATUS Label Frame
< #         
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
<         self.frame0l = tk.Frame(self,background="cyan")#, width=400, height=800)
<         self.frame0l.place(x=4, y=155, anchor="nw", width=220, height=110)
<  
<         labelframe_Filters =  tk.LabelFrame(self.frame0l, text="Filter Status", 
<                                             font=("Arial", 24))
<         labelframe_Filters.pack(fill="both", expand="yes")
<           
---
> #        IPA_options = ["IPA MOVE", "IPA STATUS"]
> #        # datatype of menu text
> #        self.IPA_option_selected = tk.StringVar()
> #        # initial ADC options text
> #        self.IPA_option_selected.set( "IPA STATUS" )
> #        # Create Dropdown menu
> #        IPAs_drop = tk.OptionMenu( self.frame0l , self.IPA_option_selected , *IPA_options , command = self.IPA_option_TCS)
> #        IPAs_drop.place(x=4, y=310)
> #        self.IPA_option_msg = tk.StringVar()
> #        self.IPA_option_msg.set("")
> #        entry_IPA = tk.Entry(self.frame0l, textvariable=self.IPA_option_msg, width=20,  bd =3)
> #        entry_IPA.place(x=200, y=308)
> 
>         button_IPA_MOVE = tk.Button(
>             self.frame0l, text="IPA MOVE", command=partial(self.IPA_option_TCS, "MOVE"))
>         button_IPA_MOVE.place(x=4, y=310)
>         self.IPA_MOVE_msg = tk.StringVar()
>         self.IPA_MOVE_msg.set("0.0")
>         entry_IPA_MOVE = tk.Entry(
>             self.frame0l, textvariable=self.IPA_MOVE_msg, width=20,  bd=3)
>         entry_IPA_MOVE.place(x=200, y=308)
>         button_IPA_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.IPA_option_TCS, "STATUS"))
>         button_IPA_STATUS.place(x=400, y=310)
3539,3540c3873,3955
< #        label_FW1 =  tk.Label(labelframe_Filters, text="Filters")
< #        label_FW1.place(x=4,y=10)
---
> #        Instrument_options = ["INSTRUMENT MOVE", "INSTRUMENT STATUS"]
> #        # datatype of menu text
> #        self.Instrument_option_selected = tk.StringVar()
> #        # initial ADC options text
> #        self.Instrument_option_selected.set( "INSTRUMENT STATUS" )
> #        # Create Dropdown menu
> #       Instruments_drop = tk.OptionMenu( self.frame0l , self.Instrument_option_selected , *Instrument_options, command = self.Instrument_option_TCS )
> #        Instruments_drop.place(x=4, y=340)
> #        self.Instrument_option_msg = tk.StringVar()
> #        self.Instrument_option_msg.set("")
> #        entry_Instrument = tk.Entry(self.frame0l, textvariable=self.Instrument_option_msg, width=20,  bd =3)
> #        entry_Instrument.place(x=200, y=338)
> 
>         button_Instrument_MOVE = tk.Button(
>             self.frame0l, text="instrument MOVE", command=partial(self.Instrument_option_TCS, "MOVE"))
>         button_Instrument_MOVE.place(x=4, y=340)
>         self.Instrument_MOVE_msg = tk.StringVar()
>         self.Instrument_MOVE_msg.set("SAM")
>         entry_Instrument_MOVE = tk.Entry(
>             self.frame0l, textvariable=self.Instrument_MOVE_msg, width=20,  bd=3)
>         entry_Instrument_MOVE.place(x=200, y=338)
>         button_Instrument_STATUS = tk.Button(
>             self.frame0l, text="STATUS", command=partial(self.Instrument_option_TCS, "STATUS"))
>         button_Instrument_STATUS.place(x=400, y=340)
> 
>         label_INFO = tk.Button(self.frame0l, text="INFO",
>                                command=self.Handle_Infox)
>         label_INFO.place(x=600, y=4)
>         label_INFOx = tk.Button(
>             self.frame0l, text="INFOX", command=self.Handle_Infox)
>         label_INFOx.place(x=675, y=4)
>         label_GINFO = tk.Button(
>             self.frame0l, text="GINFO", command=self.Handle_Infox)
>         label_GINFO.place(x=750, y=4)
>         label_SINFO = tk.Button(
>             self.frame0l, text="SINFO", command=self.Handle_Infox)
>         label_SINFO.place(x=825, y=4)
>         label_ROTPOS = tk.Button(
>             self.frame0l, text="ROTPOS", command=self.Handle_Infox)
>         label_ROTPOS.place(x=900, y=4)
>         label_INFOA = tk.Button(
>             self.frame0l, text="INFOA", command=self.Handle_Infox)
>         label_INFOA.place(x=975, y=4)
> 
>         '''
>         self.INFOxxx_msg=tk.StringVar()
>         self.INFOxxx_msg.set("")
>         entry_INFOxxx = tk.Text(self.frame0l,  height=20, width=50,  bd =3)
>         scroll = tk.Scrollbar(self.frame0l)
>         entry_INFOxxx.configure(yscrollcommand=scroll.set)
>         entry_INFOxxx.place(x=600, y=40)
>         scroll.config(command=entry_INFOxxx.yview)
>         scroll.place(side=tk.RIGHT, fill=tk.Y)
>         entry_INFOxxx.insert(tk.END, "lorem ipsum")
>         '''
>         from tkinter import scrolledtext
>         self.text_area = tk.scrolledtext.ScrolledText(self.frame0l, wrap=tk.WORD,
>                                                       width=53, height=19,
>                                                       font=("Times New Roman", 15))
>         self.text_area.grid(column=0, row=2, pady=40, padx=600)
> ######################################
> 
>     def Send_to_TCS(self):
>         """ to be written """
>         self.Send_to_TCS_msg.set("you should write something here")
>         message = self.Send_to_TCS_msg.get()
>         msg_back = SOAR.send_to_TCS(message)
>         self.text_area.insert(tk.END, 'sent: \n>'+message +
>                               '\nreceived: \n>'+str(msg_back))
> 
>     def WAY(self):
>         """ (Who are you?) This command returns an identification string
> 
>         For example
>             WAY
>             DONE SOAR 4.2m
>         """
>         message = "WAY"
>         # self.WAY_msg.set(message)
>         msg_back = SOAR.send_to_TCS(message)
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
>         pass
3542,3546c3957,3971
<         all_dirs = SF.read_dir_user()
<         filter_data= ascii.read(os.path.join(local_dir,all_dirs['dir_system'],'SAMOS_Filter_positions.txt'))
<         filter_names = list(filter_data[0:12]['Filter'])
<         self.filter_data = filter_data
<         # print(filter_names)
---
>     def Offset_option_TCS(self, event):
>         """ 
>         This command send an offset motion request to the TCS. 
>         The offset is given in units of arcseconds, and must be preceded by one of the direction characters N, S, E and W.
>         """
>         if event == "MOVE":
>             offset = self.OFFSET_MOVE_msg.get()
>         else:
>             offset = ""
>         msg_back = SOAR.offset(event, offset)
>         message = "OFFSET " + event + " " + offset
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> #        self.Offset_option_msg.set("you selected "+self.Offset_option_selected.get())
>         pass
3548c3973,4230
<         self.FW_filter = tk.StringVar() 
---
>     def Focus_option_TCS(self, event):
>         """
>         This command requests actions to the focus mechanism associated with the secondary mirror (M2).
> 
>         Parameters
>         ----------
>         event : TYPE
>             DESCRIPTION.
> 
>         Returns
>         -------
>         None.
> 
>         """
>         event = event.replace("Focus ", "")
>         if event != "STATUS":
>             offset = self.Focus_option_msg.get()
>         else:
>             offset = ""
>         message = "FOCUS " + event + " " + offset
>         msg_back = SOAR.focus(event, offset)
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>     def CLM_option_TCS(self, event):
>         """ This command requests actions to the comparison lamps mirror mechanism. """
>         event = event.replace("CLM ", "")
>         message = "CLM " + event
>         msg_back = SOAR.clm(event)
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>     def Guider_option_TCS(self, event):
>         """ This command enable or disable the guider device. """
>         event = event.replace("Guider ", "")
>         message = "GUIDER " + event
>         msg_back = SOAR.guider(event)
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>     def Whitespot_option_TCS(self, event):
>         """ This command requests actions to the lamps associated with the white spot. """
>         event = event.replace("Whitespot ", "")
>         percentage = self.Whitespot_option_msg.get()
>         message = "WHITESPOT " + event
>         msg_back = SOAR.whitespot(event, percentage)
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>     def LAMP_LN_option_TCS(self, event):
>         """ to be written """
>         event = event.replace("Lamp LN ", "")
>         location = self.Lamp_LN_option_msg.get()
>         message = "LAMP " + event
>         if event != "STATUS":
>             message += " " + location
>         msg_back = SOAR.lamp_id(event, location)
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>         """
>         if self.v.get() != "STATUS":
>             message = "LAMP LN" + self.v.get()
>         else:
>             message = "LAMP LN STATUS"
>         msg_back = SOAR.whitespot(message)    
>         self.text_area.insert(tk.END,'\nsent: \n>'+message+'\nreceived: \n>'+str(msg_back))
> #        self.LAMP_LN_option_msg.set("you selected "+self.LAMP_LN_option_selected.get())
>         pass
>         """
> 
>     def ADC_option_TCS(self, event):
>         """ to be written """
>         self.ADC_option_msg.set("you selected "+self.ADC_option_selected.get())
>         pass
> 
>     def Target_option_TCS(self, event):
>         """ to be written """
>         self.Target_option_msg.set(
>             "you selected "+self.Target_option_selected.get())
>         pass
> 
>     def IPA_option_TCS(self, event):
>         """ 
>         This command set a new instrument position angle to the TCS. 
>         The IPA is given in units of degrees. 
>         """
>         if event == "MOVE":
>             offset = self.IPA_MOVE_msg.get()
>         else:
>             offset = ""
>         msg_back = SOAR.ipa(event, offset)
>         message = "IPA " + event + " " + offset
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>     def Instrument_option_TCS(self, event):
>         """ 
>         This command selects the instrument to move
>         """
>         if event == "MOVE":
>             offset = self.Instrument_MOVE_msg.get()
>         else:
>             offset = ""
>         msg_back = SOAR.ipa(event, offset)
>         message = "IPA " + event + " " + offset
>         self.text_area.insert(tk.END, '\nsent: \n>' +
>                               message+'\nreceived: \n>'+str(msg_back))
> 
>     def Handle_Infox(self, event):
>         """ to be written """
>         #self.Instrument_option_msg.set("you selected "+self.Instrument_option_selected.get())
>         pass
> 
>     def create_menubar(self, parent):
>         """ to be written """
>         parent.geometry("1280x650")
>         parent.title("SOAR TCS")
>         self.PAR = SAMOS_Parameters()
> 
>         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED,
>                           activebackground="#80B9DC")
> 
>         # Filemenu
>         filemenu = tk.Menu(menubar, tearoff=0,
>                            relief=tk.RAISED, activebackground="#026AA9")
>         menubar.add_cascade(label="File", menu=filemenu)
>         filemenu.add_command(
>             label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_command(
>             label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
>         filemenu.add_command(label="Recalibrate CCD2DMD",
>                              command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
>         filemenu.add_command(
>             label="Motors", command=lambda: parent.show_frame(parent.Motors))
>         filemenu.add_command(
>             label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
>         filemenu.add_command(
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
>             label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
>         filemenu.add_command(
>             label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_separator()
>         filemenu.add_command(label="Exit", command=parent.quit)
> 
>         # help menu
>         help_menu = tk.Menu(menubar, tearoff=0)
>         menubar.add_cascade(label="Help", menu=help_menu)
>         help_menu.add_command(label="About", command=U.about)
>         help_menu.add_separator()
> 
>         return menubar
> 
> 
> """
> #############################################################################################################################################
> #
> # ---------------------------------------- MAIN PAGE FRAME / CONTAINER ------------------------------------------------------------------------
> #
> #############################################################################################################################################
> """
> 
> 
> class MainPage(tk.Frame):
>     """ to be written """
> 
>     def __init__(self, parent, container):
>         """ to be written """
>         super().__init__(container)
> 
>         self.DMDPage = DMDPage
> 
>         self.container = container
>         logger = log.get_logger("example2", options=None)
>         self.logger = logger
> 
>         label = tk.Label(self, text="Main Page", font=('Times', '20'))
>         label.pack(pady=0, padx=0)
> 
>         # ADD CODE HERE TO DESIGN THIS PAGE
> 
>         # keep track of the entry number for header keys that need to be added
>         # will be used to write "OtherParameters.txt"
>         self.extra_header_params = 0
>         # keep string of entries to write to a file after acquisition.
>         self.header_entry_string = ''
>         main_fits_header.create_main_params_dict()
>         self.wcs = None
>         self.canvas_types = get_canvas_types()
>         self.drawcolors = colors.get_colors()
>         self.SlitTabView = None
>         self.loaded_regfile = None
>         today = datetime.now()
>         self.fits_dir = os.path.join(
>             local_dir, "SISI_images/SAMOS_" + today.strftime('%Y%m%d'))
> 
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
> #
> #  #    OBSERVER/NIGHT INFO Label Frame
> #
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>         self.frame_ObsInf = tk.Frame(self, background="cyan")
>         self.frame_ObsInf.place(x=10, y=0, anchor="nw", width=420, height=150)
> 
>         labelframe_ObsInf = tk.LabelFrame(self.frame_ObsInf, text="Observer Information",
>                                           font=("Ariel", 24))
>         labelframe_ObsInf.pack(fill="both", expand="yes")
> 
>         #name_scroll = tk.Scrollbar(labelframe_ObsInf)
>         #name_scroll.pack(side=tk.BOTTOM, fill=tk.Y)
>         self.names_var = tk.StringVar()
>         name_label = tk.Label(labelframe_ObsInf, text="Observer Name(s): ")
>         name_label.place(x=30, y=4)
>         name_entry = tk.Entry(labelframe_ObsInf, width=25, bd=3,
>                               textvariable=self.names_var)
>         # xscrollcommand=name_scroll)
>         name_entry.place(x=150, y=4)
> 
>         self.program_var = tk.StringVar()
>         program_label = tk.Label(labelframe_ObsInf, text="Program ID: ")
>         program_label.place(x=71, y=35)
>         program_entry = tk.Entry(labelframe_ObsInf, width=25, bd=3,
>                                  textvariable=self.program_var)
>         program_entry.place(x=150, y=35)
> 
>         self.TO_var = tk.StringVar()
>         TO_label = tk.Label(labelframe_ObsInf, text="Telescope Operator(s): ")
>         TO_label.place(x=4, y=66)
>         TO_entry = tk.Entry(labelframe_ObsInf, width=25,
>                             bd=3, textvariable=self.TO_var)
>         TO_entry.place(x=150, y=66)
> 
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
> #
> #  #    FILTER STATUS Label Frame
> #
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>         # , width=400, height=800)
>         self.frame0l = tk.Frame(self, background="cyan")
>         self.frame0l.place(x=10, y=155, anchor="nw", width=220, height=110)
> 
>         labelframe_Filters = tk.LabelFrame(self.frame0l, text="Filter Status",
>                                            font=("Arial", 24))
>         labelframe_Filters.pack(fill="both", expand="yes")
> 
> 
> #        label_FW1 =  tk.Label(labelframe_Filters, text="Filters")
> #        label_FW1.place(x=4,y=10)
> 
>         all_dirs = SF.read_dir_user()
>         filter_data = ascii.read(os.path.join(
>             local_dir, all_dirs['dir_system'], 'SAMOS_Filter_positions.txt'))
>         filter_names = list(filter_data[0:12]['Filter'])
>         self.filter_data = filter_data
>         # print(filter_names)
> 
>         self.FW_filter = tk.StringVar()
3551,3552c4233
<         
<         
---
> 
3554c4235,4236
<         self.optionmenu_FW = tk.OptionMenu(labelframe_Filters, self.FW_filter, *filter_names)
---
>         self.optionmenu_FW = tk.OptionMenu(
>             labelframe_Filters, self.FW_filter, *filter_names)
3557,3559c4239,4242
<         button_SetFW =  tk.Button(labelframe_Filters, text="Set Filter", bd=3, command=self.set_filter)
<         button_SetFW.place(x=110,y=4)
<         
---
>         button_SetFW = tk.Button(
>             labelframe_Filters, text="Set Filter", bd=3, command=self.set_filter)
>         button_SetFW.place(x=110, y=4)
> 
3562c4245,4246
<         self.Label_Current_Filter = tk.Text(labelframe_Filters,font=('Georgia 20'),width=8,height=1,bg='white', fg='green')
---
>         self.Label_Current_Filter = tk.Text(labelframe_Filters, font=(
>             'Georgia 20'), width=8, height=1, bg='white', fg='green')
3564,3566c4248,4249
<         self.Label_Current_Filter.insert(tk.END,self.FW_filter.get())
<         self.Label_Current_Filter.place(x=30,y=45)
< 
---
>         self.Label_Current_Filter.insert(tk.END, self.FW_filter.get())
>         self.Label_Current_Filter.place(x=30, y=45)
3576c4259
< #         
---
> #
3598c4281
< # 
---
> #
3608c4291
< #         
---
> #
3616c4299
< #         
---
> #
3618c4301
< #         
---
> #
3620c4303,4304
<         self.frame1l = tk.Frame(self,background="cyan")#, width=400, height=800)
---
>         # , width=400, height=800)
>         self.frame1l = tk.Frame(self, background="cyan")
3623c4307,4308
<         labelframe_Grating =  tk.LabelFrame(self.frame1l, text="Grism Status", font=("Arial", 24))
---
>         labelframe_Grating = tk.LabelFrame(
>             self.frame1l, text="Grism Status", font=("Arial", 24))
3626c4311
<          
---
> 
3628c4313,4314
<         Grating_data= ascii.read(os.path.join( local_dir,all_dirs['dir_system'],'SAMOS_Filter_positions.txt'))
---
>         Grating_data = ascii.read(os.path.join(
>             local_dir, all_dirs['dir_system'], 'SAMOS_Filter_positions.txt'))
3633c4319
<         self.Grating_Optioned = tk.StringVar() 
---
>         self.Grating_Optioned = tk.StringVar()
3635c4321
<         index=2
---
>         index = 2
3638c4324,4325
<         self.optionmenu_GR = tk.OptionMenu(labelframe_Grating, self.Grating_Optioned, *self.Grating_names)
---
>         self.optionmenu_GR = tk.OptionMenu(
>             labelframe_Grating, self.Grating_Optioned, *self.Grating_names)
3641,3642c4328,4330
<         button_SetGR =  tk.Button(labelframe_Grating, text="Set Grism", bd=3, width=7, command=self.set_grating)
<         button_SetGR.place(x=110,y=4)
---
>         button_SetGR = tk.Button(
>             labelframe_Grating, text="Set Grism", bd=3, width=7, command=self.set_grating)
>         button_SetGR.place(x=110, y=4)
3646,3647c4334,4335
< #         self.Grating_int = tk.IntVar() 
< #         self.Grating_int.set(2)  
---
> #         self.Grating_int = tk.IntVar()
> #         self.Grating_int.set(2)
3652c4340
< # 
---
> #
3654c4342,4343
<         self.Label_Current_Grating = tk.Text(labelframe_Grating,font=('Georgia 20'),width=8,height=1,bg='white', fg='green')
---
>         self.Label_Current_Grating = tk.Text(labelframe_Grating, font=(
>             'Georgia 20'), width=8, height=1, bg='white', fg='green')
3656,3657c4345,4347
<         self.Label_Current_Grating.insert(tk.END,self.Grating_names[index])
<         self.Label_Current_Grating.place(x=30,y=45)
---
>         self.Label_Current_Grating.insert(tk.END, self.Grating_names[index])
>         self.Label_Current_Grating.place(x=30, y=45)
> 
3659d4348
<         
3675c4364
< # 
---
> #
3678c4367
< # 
---
> #
3691c4380
< #         
---
> #
3696c4385
< # 
---
> #
3700,3701c4389,4390
< #         
< #         
---
> #
> #
3705a4395,4401
>         self.frame_CCDInf = tk.Frame(self, background="cyan")
>         self.frame_CCDInf.place(
>             x=10, y=265, anchor="nw", width=430, height=350)
>         labelframe_CCDInf = tk.LabelFrame(
>             self.frame_CCDInf, text="CCD Setup", font=("Ariel", 24))
>         labelframe_CCDInf.pack(fill="both", expand="yes")
> 
3708c4404
< #         
---
> #
3710c4406
< #         
---
> #
3712,3713c4408,4410
<         self.frame2l = tk.Frame(self,background="cyan")#, width=400, height=800)
<         self.frame2l.place(x=14, y=275, anchor="nw", width=420, height=160)
---
>         # , width=400, height=800)
>         self.frame2l = tk.Frame(self.frame_CCDInf, background="cyan")
>         self.frame2l.place(x=4, y=30, anchor="nw", width=420, height=150)
3719c4416
<         
---
> 
3722c4419
<         
---
> 
3724c4421
<         
---
> 
3730,3737c4427,4434
<   
<         tabControl.add(tab1, text ='Science')
<         tabControl.add(tab2, text ='Bias')
<         tabControl.add(tab3, text ='Dark')
<         tabControl.add(tab4, text ='Flat')
<         tabControl.add(tab5, text ='Buffer')
<         tabControl.pack(expand = 1, fill ="both")
<         
---
> 
>         tabControl.add(tab1, text='Science')
>         tabControl.add(tab2, text='Bias')
>         tabControl.add(tab3, text='Dark')
>         tabControl.add(tab4, text='Flat')
>         tabControl.add(tab5, text='Buffer')
>         tabControl.pack(expand=1, fill="both")
> 
3744c4441,4443
<         labelframe_Acquire =  tk.LabelFrame(tab1, text="Science", font=("Arial", 24))
---
>         labelframe_Acquire = tk.LabelFrame(
>             tab1, text="Science", font=("Arial", 24))
>         #labelframe_Acquire.place(x=2, y=0, anchor="nw", width=410, height=115)
3746,3751c4445,4447
< #        labelframe_Grating.place(x=4, y=10)
<         
<     
<         
<         label_ObjectName =  tk.Label(labelframe_Acquire, text="Object Name:")
<         label_ObjectName.place(x=4,y=10)
---
> 
>         label_ObjectName = tk.Label(labelframe_Acquire, text="Object Name:")
>         label_ObjectName.place(x=4, y=10)
3754c4450
<         entry_ObjectName = tk.Entry(labelframe_Acquire, width=8,  bd =3, 
---
>         entry_ObjectName = tk.Entry(labelframe_Acquire, width=8,  bd=3,
3758,3759c4454,4455
<         label_Comment =  tk.Label(labelframe_Acquire, text="Comments:")
<         label_Comment.place(x=4,y=55)
---
>         label_Comment = tk.Label(labelframe_Acquire, text="Comments:")
>         label_Comment.place(x=4, y=50)
3761,3764c4457,4460
<         self.entry_Comment = tk.Entry(labelframe_Acquire, width=20,  bd =3, )# , xscrollcommand=scrollbar.set)
<         self.entry_Comment.place(x=100, y=53)
<         
<         
---
>         # , xscrollcommand=scrollbar.set)
>         self.entry_Comment = tk.Entry(labelframe_Acquire, width=20,  bd=3, )
>         self.entry_Comment.place(x=100, y=48)
> 
3767c4463,4464
<         label_Light_NofFrames = tk.Label(labelframe_Acquire, text="Nr. Exposures:")
---
>         label_Light_NofFrames = tk.Label(
>             labelframe_Acquire, text="Nr. Exposures:")
3772c4469
<         
---
> 
3774c4471
<         r1_Light_saveall = tk.Radiobutton(labelframe_Acquire, text = "Save single frames", 
---
>         r1_Light_saveall = tk.Radiobutton(labelframe_Acquire, text="Save single frames",
3776,3784c4473
<         r1_Light_saveall.place(x=218, y=30)
<         
<         
<         label_ExpTime =  tk.Label(labelframe_Acquire, text="Exp. Time (s):")
<         #label_ExpTime.place(x=4,y=40)
<         self.Light_ExpT=tk.StringVar()
<         self.Light_ExpT.set("0.01")
<         entry_ExpTime = tk.Entry(labelframe_Acquire, textvariable=self.Light_ExpT, width=5,  bd =3)
<         #entry_ExpTime.place(x=100, y=38)
---
>         r1_Light_saveall.place(x=218, y=27)
3786d4474
<         
3787a4476,4481
> #        label_ExpTime =  tk.Label(labelframe_Acquire, text="Exp. Time (s):")
> #        #label_ExpTime.place(x=4,y=40)
> #        self.Light_ExpT=tk.StringVar()
> #        self.Light_ExpT.set("0.01")
> #        entry_ExpTime = tk.Entry(labelframe_Acquire, textvariable=self.Light_ExpT, width=5,  bd =3)
> #        #entry_ExpTime.place(x=100, y=38)
3793,3795c4487,4489
<         labelframe_Bias =  tk.LabelFrame(tab2, text="Bias", 
<                                                      width=300, height=170,
<                                                      font=("Arial", 24))
---
>         labelframe_Bias = tk.LabelFrame(tab2, text="Bias",
>                                         width=300, height=150,
>                                         font=("Arial", 24))
3799a4494,4496
> #        labelframe_Bias =  tk.LabelFrame(self.frame_CCDInf, text="Bias", font=("Arial", 24))
> #        labelframe_Bias.place(x=5, y=53, anchor="nw", width=410, height=115)
> #                        # .pack(fill="both", expand="yes")
3801,3805c4498,4499
< 
< 
<         
<         label_Bias_MasterFile =  tk.Label(labelframe_Bias, text="Master Bias:")
<         label_Bias_MasterFile.place(x=4,y=10)
---
>         label_Bias_MasterFile = tk.Label(labelframe_Bias, text="Master Bias:")
>         label_Bias_MasterFile.place(x=4, y=10)
3807c4501,4502
<         entry_Bias_MasterFile = tk.Entry(labelframe_Bias, width=8,  bd =3, textvariable=self.Bias_MasterFile)
---
>         entry_Bias_MasterFile = tk.Entry(
>             labelframe_Bias, width=8,  bd=3, textvariable=self.Bias_MasterFile)
3809,3811c4504,4506
<         
<         label_Comment =  tk.Label(labelframe_Bias, text="Comments:")
<         label_Comment.place(x=4,y=55)
---
> 
>         label_Comment = tk.Label(labelframe_Bias, text="Comments:")
>         label_Comment.place(x=4, y=50)
3813,3820c4508,4516
<         self.entry_BiasComment = tk.Entry(labelframe_Bias, width=20,  bd =3, )# , xscrollcommand=scrollbar.set)
<         self.entry_BiasComment.place(x=100, y=53)
<         
<         
<         label_Bias_NofFrames =  tk.Label(labelframe_Bias, text="Nr. of Frames:")
<         label_Bias_NofFrames.place(x=220,y=2)
<         self.Bias_NofFrames = tk.StringVar(value="10")
<         entry_Bias_NofFrames = tk.Entry(labelframe_Bias, width=3,  bd =3, textvariable=self.Bias_NofFrames)
---
>         # , xscrollcommand=scrollbar.set)
>         self.entry_BiasComment = tk.Entry(labelframe_Bias, width=20,  bd=3, )
>         self.entry_BiasComment.place(x=100, y=48)
> 
>         label_Bias_NofFrames = tk.Label(labelframe_Bias, text="Nr. of Frames:")
>         label_Bias_NofFrames.place(x=220, y=2)
>         self.Bias_NofFrames = tk.StringVar(value="1")
>         entry_Bias_NofFrames = tk.Entry(
>             labelframe_Bias, width=3,  bd=3, textvariable=self.Bias_NofFrames)
3822,3843d4517
<         
<         
<         self.var_Bias_saveall = tk.IntVar()
<         r1_Bias_saveall = tk.Radiobutton(labelframe_Bias, text = "Save single frames", variable=self.var_Bias_saveall, value=1)
<         r1_Bias_saveall.place(x=218, y=30)
<         
< 
<         label_Bias_ExpT =  tk.Label(labelframe_Bias, text="Exposure time (s):")
<         #label_Bias_ExpT.place(x=4,y=10)
<         self.Bias_ExpT = tk.StringVar(value="0.00")
<         entry_Bias_ExpT = tk.Entry(labelframe_Bias, width=6,  bd =3, textvariable=self.Bias_ExpT)
<         #entry_Bias_ExpT.place(x=120, y=6)
<         
<         
< 
<         
< 
<         button_ExpStart=  tk.Button(labelframe_Bias, text="START", bd=3, bg='#0052cc',font=("Arial", 24),
<                                           command=self.expose_bias)
<         #button_ExpStart.place(x=75,y=95)
<   
< #        root.mainloop()  
3844a4519,4533
>         self.var_Bias_saveall = tk.IntVar()
>         r1_Bias_saveall = tk.Radiobutton(
>             labelframe_Bias, text="Save single frames", variable=self.var_Bias_saveall, value=1)
>         r1_Bias_saveall.place(x=218, y=27)
> 
> 
> #        label_Bias_ExpT =  tk.Label(labelframe_Bias, text="Exposure time (s):")
> #        #label_Bias_ExpT.place(x=4,y=10)
> #        self.Bias_ExpT = tk.StringVar(value="0.00")
> #        entry_Bias_ExpT = tk.Entry(labelframe_Bias, width=6,  bd =3, textvariable=self.Bias_ExpT)
> #        #entry_Bias_ExpT.place(x=120, y=6)
> 
>         button_ExpStart = tk.Button(labelframe_Bias, text="START", bd=3, bg='#0052cc', font=("Arial", 24),
>                                     command=self.expose_bias)
>         # button_ExpStart.place(x=75,y=95)
3845a4535
> #        root.mainloop()
3848d4537
<         
3852,3854c4541,4543
<         labelframe_Dark =  tk.LabelFrame(tab3, text="Dark", 
<                                                      width=300, height=170,
<                                                      font=("Arial", 24))
---
>         labelframe_Dark = tk.LabelFrame(tab3, text="Dark",
>                                         width=300, height=170,
>                                         font=("Arial", 24))
3857,3859c4546,4547
<         
<         label_Dark_MasterFile =  tk.Label(labelframe_Dark, text="Master Dark:")
<         label_Dark_MasterFile.place(x=4,y=10)
---
>         label_Dark_MasterFile = tk.Label(labelframe_Dark, text="Master Dark:")
>         label_Dark_MasterFile.place(x=4, y=10)
3861c4549,4550
<         entry_Dark_MasterFile = tk.Entry(labelframe_Dark, width=8,  bd =3, textvariable=self.Dark_MasterFile)
---
>         entry_Dark_MasterFile = tk.Entry(
>             labelframe_Dark, width=8,  bd=3, textvariable=self.Dark_MasterFile)
3863,3865c4552,4554
<         
<         label_Comment =  tk.Label(labelframe_Dark, text="Comments:")
<         label_Comment.place(x=4,y=55)
---
> 
>         label_Comment = tk.Label(labelframe_Dark, text="Comments:")
>         label_Comment.place(x=4, y=50)
3867,3873c4556,4564
<         self.entry_DarkComment = tk.Entry(labelframe_Dark, width=20,  bd =3, )# , xscrollcommand=scrollbar.set)
<         self.entry_DarkComment.place(x=100, y=53)
<         
<         label_Dark_NofFrames =  tk.Label(labelframe_Dark, text="Nr. of Frames:")
<         label_Dark_NofFrames.place(x=220,y=2)
<         self.Dark_NofFrames = tk.StringVar(value="10")
<         entry_Dark_NofFrames = tk.Entry(labelframe_Dark, width=3,  bd =3, textvariable=self.Dark_NofFrames)
---
>         # , xscrollcommand=scrollbar.set)
>         self.entry_DarkComment = tk.Entry(labelframe_Dark, width=20,  bd=3, )
>         self.entry_DarkComment.place(x=100, y=48)
> 
>         label_Dark_NofFrames = tk.Label(labelframe_Dark, text="Nr. of Frames:")
>         label_Dark_NofFrames.place(x=220, y=2)
>         self.Dark_NofFrames = tk.StringVar(value="1")
>         entry_Dark_NofFrames = tk.Entry(
>             labelframe_Dark, width=3,  bd=3, textvariable=self.Dark_NofFrames)
3875c4566
<         
---
> 
3877,3880c4568,4570
<         r1_Dark_saveall = tk.Radiobutton(labelframe_Dark, text = "Save single frames", variable=self.var_Dark_saveall, value=1)
<         r1_Dark_saveall.place(x=218, y=30)
<         
<         
---
>         r1_Dark_saveall = tk.Radiobutton(
>             labelframe_Dark, text="Save single frames", variable=self.var_Dark_saveall, value=1)
>         r1_Dark_saveall.place(x=218, y=27)
3882,3887d4571
<         label_Dark_ExpT =  tk.Label(labelframe_Dark, text="Exposure time (s):")
<         #label_Dark_ExpT.place(x=4,y=10)
<         self.Dark_ExpT = tk.StringVar(value="0.00")
<         entry_Dark_ExpT = tk.Entry(labelframe_Dark, width=6,  bd =3, textvariable=self.Dark_ExpT)
<         #entry_Dark_ExpT.place(x=120, y=6)
<         
3889,3891c4573,4581
<         button_ExpStart=  tk.Button(labelframe_Dark, text="START", bd=3, bg='#0052cc',font=("Arial", 24),
<                                           command=self.expose_dark)
<         #button_ExpStart.place(x=75,y=95)
---
> #        label_Dark_ExpT =  tk.Label(labelframe_Dark, text="Exposure time (s):")
> #        #label_Dark_ExpT.place(x=4,y=10)
> #        self.Dark_ExpT = tk.StringVar(value="0.00")
> #        entry_Dark_ExpT = tk.Entry(labelframe_Dark, width=6,  bd =3, textvariable=self.Dark_ExpT)
> #        #entry_Dark_ExpT.place(x=120, y=6)
> 
>         button_ExpStart = tk.Button(labelframe_Dark, text="START", bd=3, bg='#0052cc', font=("Arial", 24),
>                                     command=self.expose_dark)
>         # button_ExpStart.place(x=75,y=95)
3896,3898c4586,4588
<         labelframe_Flat =  tk.LabelFrame(tab4, text="Flat", 
<                                                      width=300, height=170,
<                                                      font=("Arial", 24))
---
>         labelframe_Flat = tk.LabelFrame(tab4, text="Flat",
>                                         width=300, height=170,
>                                         font=("Arial", 24))
3900,3902c4590,4593
<         
<         label_Flat_MasterFile =  tk.Label(labelframe_Flat, text="Master Flat File:")
<         label_Flat_MasterFile.place(x=4,y=10)
---
> 
>         label_Flat_MasterFile = tk.Label(
>             labelframe_Flat, text="Master Flat File:")
>         label_Flat_MasterFile.place(x=4, y=10)
3904c4595,4596
<         entry_Flat_MasterFile = tk.Entry(labelframe_Flat, width=11,  bd =3, textvariable=self.Flat_MasterFile)
---
>         entry_Flat_MasterFile = tk.Entry(
>             labelframe_Flat, width=11,  bd=3, textvariable=self.Flat_MasterFile)
3906,3911d4597
<         
<         label_Comment =  tk.Label(labelframe_Flat, text="Comments:")
<         label_Comment.place(x=4,y=55)
< #        scrollbar = tk.Scrollbar(orient="horizontal")
<         self.entry_FlatComment = tk.Entry(labelframe_Flat, width=20,  bd =3, )# , xscrollcommand=scrollbar.set)
<         self.entry_FlatComment.place(x=100, y=53)
3913,3922c4599,4616
<         label_Flat_ExpT =  tk.Label(labelframe_Flat, text="Exposure time (s):")
<         #label_Flat_ExpT.place(x=4,y=10)
<         self.Flat_ExpT = tk.StringVar(value="0.00")
<         entry_Flat_ExpT = tk.Entry(labelframe_Flat, width=6,  bd =3, textvariable=self.Flat_ExpT)
<         #entry_Flat_ExpT.place(x=120, y=6)
<         
<         label_Flat_NofFrames =  tk.Label(labelframe_Flat, text="Nr. of Frames:")
<         label_Flat_NofFrames.place(x=220,y=2)
<         self.Flat_NofFrames = tk.StringVar(value="10")
<         entry_Flat_NofFrames = tk.Entry(labelframe_Flat, width=3,  bd =3, textvariable=self.Flat_NofFrames)
---
>         label_Comment = tk.Label(labelframe_Flat, text="Comments:")
>         label_Comment.place(x=4, y=50)
> #        scrollbar = tk.Scrollbar(orient="horizontal")
>         # , xscrollcommand=scrollbar.set)
>         self.entry_FlatComment = tk.Entry(labelframe_Flat, width=20,  bd=3, )
>         self.entry_FlatComment.place(x=100, y=48)
> 
> #        label_Flat_ExpT =  tk.Label(labelframe_Flat, text="Exposure time (s):")
> #        #label_Flat_ExpT.place(x=4,y=10)
> #        self.Flat_ExpT = tk.StringVar(value="0.00")
> #        entry_Flat_ExpT = tk.Entry(labelframe_Flat, width=6,  bd =3, textvariable=self.Flat_ExpT)
> #        #entry_Flat_ExpT.place(x=120, y=6)
> 
>         label_Flat_NofFrames = tk.Label(labelframe_Flat, text="Nr. of Frames:")
>         label_Flat_NofFrames.place(x=220, y=2)
>         self.Flat_NofFrames = tk.StringVar(value="1")
>         entry_Flat_NofFrames = tk.Entry(
>             labelframe_Flat, width=3,  bd=3, textvariable=self.Flat_NofFrames)
3924,3930d4617
<         
<         
<         self.var_Flat_saveall = tk.IntVar()
<         r1_Flat_saveall = tk.Radiobutton(labelframe_Flat, text = "Save single frames", variable=self.var_Flat_saveall, value=1)
<         r1_Flat_saveall.place(x=218, y=30)
< 
<         
3932,3934c4619,4626
<         button_ExpStart=  tk.Button(labelframe_Flat, text="START", bd=3, bg='#0052cc',font=("Arial", 24),
<                                           command=self.expose_flat)
<         button_ExpStart.place(x=75,y=95)
---
>         self.var_Flat_saveall = tk.IntVar()
>         r1_Flat_saveall = tk.Radiobutton(
>             labelframe_Flat, text="Save single frames", variable=self.var_Flat_saveall, value=1)
>         r1_Flat_saveall.place(x=218, y=27)
> 
>         button_ExpStart = tk.Button(labelframe_Flat, text="START", bd=3, bg='#0052cc', font=("Arial", 24),
>                                     command=self.expose_flat)
>         button_ExpStart.place(x=75, y=95)
3940,3942c4632,4634
<         labelframe_Buffer =  tk.LabelFrame(tab5, text="Buffer", 
<                                                      width=300, height=180,
<                                                      font=("Arial", 24))
---
>         labelframe_Buffer = tk.LabelFrame(tab5, text="Buffer",
>                                           width=300, height=180,
>                                           font=("Arial", 24))
3944,3946c4636,4638
<         
<         label_Comment =  tk.Label(labelframe_Buffer, text="Comments:")
<         label_Comment.place(x=4,y=55)
---
> 
>         label_Comment = tk.Label(labelframe_Buffer, text="Comments:")
>         label_Comment.place(x=4, y=50)
3948,3952c4640,4647
<         self.entry_BufferComment = tk.Entry(labelframe_Buffer, width=20,  bd =3, )# , xscrollcommand=scrollbar.set)
<         self.entry_BufferComment.place(x=100, y=53)
<         
<         label_Buffer_MasterFile =  tk.Label(labelframe_Buffer, text="Master Buffer File:")
<         label_Buffer_MasterFile.place(x=4,y=10)
---
>         # , xscrollcommand=scrollbar.set)
>         self.entry_BufferComment = tk.Entry(
>             labelframe_Buffer, width=20,  bd=3, )
>         self.entry_BufferComment.place(x=100, y=48)
> 
>         label_Buffer_MasterFile = tk.Label(
>             labelframe_Buffer, text="Master Buffer File:")
>         label_Buffer_MasterFile.place(x=4, y=10)
3954c4649,4650
<         entry_Buffer_MasterFile = tk.Entry(labelframe_Buffer, width=11,  bd =3, textvariable=self.Buffer_MasterFile)
---
>         entry_Buffer_MasterFile = tk.Entry(
>             labelframe_Buffer, width=11,  bd=3, textvariable=self.Buffer_MasterFile)
3957,3966c4653,4664
<         label_Buffer_ExpT =  tk.Label(labelframe_Buffer, text="Exposure time (s):")
<         #label_Buffer_ExpT.place(x=4,y=10)
<         self.Buffer_ExpT = tk.StringVar(value="0.00")
<         entry_Buffer_ExpT = tk.Entry(labelframe_Buffer, width=6,  bd =3, textvariable=self.Buffer_ExpT)
<         #entry_Buffer_ExpT.place(x=120, y=6)
<         
<         label_Buffer_NofFrames =  tk.Label(labelframe_Buffer, text="Nr. of Frames:")
<         label_Buffer_NofFrames.place(x=220,y=2)
<         self.Buffer_NofFrames = tk.StringVar(value="10")
<         entry_Buffer_NofFrames = tk.Entry(labelframe_Buffer, width=5,  bd =3, textvariable=self.Buffer_NofFrames)
---
> #        label_Buffer_ExpT =  tk.Label(labelframe_Buffer, text="Exposure time (s):")
> #        #label_Buffer_ExpT.place(x=4,y=10)
> #        self.Buffer_ExpT = tk.StringVar(value="0.00")
> #        entry_Buffer_ExpT = tk.Entry(labelframe_Buffer, width=6,  bd =3, textvariable=self.Buffer_ExpT)
> #        #entry_Buffer_ExpT.place(x=120, y=6)
> 
>         label_Buffer_NofFrames = tk.Label(
>             labelframe_Buffer, text="Nr. of Frames:")
>         label_Buffer_NofFrames.place(x=220, y=2)
>         self.Buffer_NofFrames = tk.StringVar(value="1")
>         entry_Buffer_NofFrames = tk.Entry(
>             labelframe_Buffer, width=5,  bd=3, textvariable=self.Buffer_NofFrames)
3968,3972d4665
<         
<         
<         self.var_Buffer_saveall = tk.IntVar()
<         r1_Buffer_saveall = tk.Radiobutton(labelframe_Buffer, text = "Save single frames", variable=self.var_Buffer_saveall, value=1)
<         r1_Buffer_saveall.place(x=218, y=30)
3974c4667,4670
<         
---
>         self.var_Buffer_saveall = tk.IntVar()
>         r1_Buffer_saveall = tk.Radiobutton(
>             labelframe_Buffer, text="Save single frames", variable=self.var_Buffer_saveall, value=1)
>         r1_Buffer_saveall.place(x=218, y=27)
3976c4672
<         button_ExpStart=  tk.Button(labelframe_Buffer, text="START", bd=3, bg='#0052cc',font=("Arial", 24),
---
>         button_ExpStart = tk.Button(labelframe_Buffer, text="START", bd=3, bg='#0052cc', font=("Arial", 24),
3978c4674
<         #button_ExpStart.place(x=75,y=95)
---
>         # button_ExpStart.place(x=75,y=95)
3981,3983c4677,4679
<     
< #       ACQUIRE IMAGE FRAME 
< ##      Begin exposure with progress bars
---
> 
> #       ACQUIRE IMAGE FRAME
> # Begin exposure with progress bars
3987,3990c4683,4687
<         self.ExposeBeginFrame = tk.Frame(self, background="dark gray")
<         self.ExposeBeginFrame.place(x=14, y=435, width=420, height=175)
<         
<         labelframe_ExposeBegin = tk.LabelFrame(self.ExposeBeginFrame, text="Acquire",
---
>         self.ExposeBeginFrame = tk.Frame(
>             self.frame_CCDInf, background="dark gray")
>         self.ExposeBeginFrame.place(x=5, y=175, width=420, height=172)
> 
>         labelframe_ExposeBegin = tk.LabelFrame(self.ExposeBeginFrame, text="Acquisition",
3993,3996c4690,4692
<         
<         
<         
<         label_out_fname = tk.Label(labelframe_ExposeBegin, text="Base Filename:")
---
> 
>         label_out_fname = tk.Label(
>             labelframe_ExposeBegin, text="Base Filename:")
4002,4005c4698,4701
<         
<         label_ExpTime =  tk.Label(labelframe_ExposeBegin, text="Exp. Time (s):")
<         label_ExpTime.place(x=4,y=55)
<         self.ExpTimeSet=tk.StringVar()
---
> 
>         label_ExpTime = tk.Label(labelframe_ExposeBegin, text="Exp. Time (s):")
>         label_ExpTime.place(x=4, y=55)
>         self.ExpTimeSet = tk.StringVar()
4007c4703,4704
<         entry_ExpTime = tk.Entry(labelframe_ExposeBegin, textvariable=self.ExpTimeSet, width=4,  bd =3)
---
>         entry_ExpTime = tk.Entry(
>             labelframe_ExposeBegin, textvariable=self.ExpTimeSet, width=4,  bd=3)
4009,4011c4706
<         
<         
<         
---
> 
4013,4014c4708,4709
<         label_Display =  tk.Label(labelframe_ExposeBegin, text="Image Type:")
<         label_Display.place(x=205,y=0)
---
>         label_Display = tk.Label(labelframe_ExposeBegin, text="Image Type:")
>         label_Display.place(x=205, y=0)
4017,4018c4712
<         
<         
---
> 
4021,4023c4715,4718
<                                            textvariable=self.var_acq_type,
<                                            style="TCombobox")
<         self.acq_type_select["values"] = ["Science", "Bias", "Dark", "Flat", "Buffer"]
---
>                                             textvariable=self.var_acq_type,
>                                             style="TCombobox")
>         self.acq_type_select["values"] = [
>             "Science", "Bias", "Dark", "Flat", "Buffer"]
4025,4026c4720,4721
<         self.acq_type_select.place(x=295,y=0)
<         
---
>         self.acq_type_select.place(x=295, y=0)
> 
4029c4724
<         
---
> 
4033c4728
<         
---
> 
4036,4037c4731,4733
<             current_files = glob.glob(os.path.join(self.fits_dir,"*_"+"[0-9]"*4+".fits"))
<             if len(current_files)==0:
---
>             current_files = glob.glob(os.path.join(
>                 self.fits_dir, "*_"+"[0-9]"*4+".fits"))
>             if len(current_files) == 0:
4042,4043c4738,4740
<                 ## set number of next exposure to be after the number of the most recently saved image
<                 next_file_number = int(last_file.strip(".fits").split("_")[-1])+1
---
>                 # set number of next exposure to be after the number of the most recently saved image
>                 next_file_number = int(
>                     last_file.strip(".fits").split("_")[-1])+1
4045c4742
<         
---
> 
4048,4049c4745,4746
<         label_out_fnumber.place(x=160,y=55)
<         entry_out_fnumber = tk.Spinbox(labelframe_ExposeBegin,  
---
>         label_out_fnumber.place(x=160, y=55)
>         entry_out_fnumber = tk.Spinbox(labelframe_ExposeBegin,
4051,4053c4748,4750
<                                        increment=1, from_=0,to=1000,format="%04.0f")
<                                        #command=self.change_out_fnumber)
<         entry_out_fnumber.place(x=205,y=53)
---
>                                        increment=1, from_=0, to=1000, format="%04.0f")
>         # command=self.change_out_fnumber)
>         entry_out_fnumber.place(x=205, y=53)
4055,4060c4752,4756
<         #### To begin the exposure
<         button_ExpStart=  tk.Button(labelframe_ExposeBegin, text="START", bd=3, 
<                                     bg='#0052cc',font=("Arial", 24),
<                                          command=self.start_an_exposure)
<         button_ExpStart.place(x=285,y=25)
<         
---
>         # To begin the exposure
>         button_ExpStart = tk.Button(labelframe_ExposeBegin, text="START", bd=3,
>                                     bg='#0052cc', font=("Arial", 24),
>                                     command=self.start_an_exposure)
>         button_ExpStart.place(x=285, y=25)
4063c4759
<         ### Most of this so we can update the label during an exposure.
---
>         # Most of this so we can update the label during an exposure.
4066,4072c4762,4767
<         s_expose.layout('text.Horizontal.TProgressbar', 
<              [('Horizontal.Progressbar.trough',
<                {'children': [('Horizontal.Progressbar.pbar',
<                               {'side': 'left', 'sticky': 'ns'})],
<                 'sticky': 'nswe'}), 
<               ('Horizontal.Progressbar.label', {'sticky': 'nswe'})])
<         
---
>         s_expose.layout('text.Horizontal.TProgressbar',
>                         [('Horizontal.Progressbar.trough',
>                           {'children': [('Horizontal.Progressbar.pbar',
>                                          {'side': 'left', 'sticky': 'ns'})],
>                            'sticky': 'nswe'}),
>                             ('Horizontal.Progressbar.label', {'sticky': 'nswe'})])
4074c4769
<         # change the text of the progressbar, 
---
>         # change the text of the progressbar,
4076,4077c4771,4772
<         s_expose.configure("text.Horizontal.TProgressbar", 
<                            text="Expose 0 %      ", anchor='center', 
---
>         s_expose.configure("text.Horizontal.TProgressbar",
>                            text="Expose 0 %      ", anchor='center',
4079c4774
<         
---
> 
4081c4776
<         self.exp_progbar = ttk.Progressbar(labelframe_ExposeBegin, orient='horizontal', 
---
>         self.exp_progbar = ttk.Progressbar(labelframe_ExposeBegin, orient='horizontal',
4083c4778
<                                       length=130, style="text.Horizontal.TProgressbar")
---
>                                            length=130, style="text.Horizontal.TProgressbar")
4088d4782
<         
4090,4097c4784,4791
<         s_readout.layout('text.Horizontal.RProgressbar', 
<              [('Horizontal.Progressbar.trough',
<                {'children': [('Horizontal.Progressbar.pbar',
<                               {'side': 'left', 'sticky': 'ns'})],
<                 'sticky': 'nswe'}), 
<               ('Horizontal.Progressbar.label', {'sticky': 'nswe'})])
<         
<         s_readout.configure("text.Horizontal.RProgressbar", 
---
>         s_readout.layout('text.Horizontal.RProgressbar',
>                          [('Horizontal.Progressbar.trough',
>                            {'children': [('Horizontal.Progressbar.pbar',
>                                           {'side': 'left', 'sticky': 'ns'})],
>                             'sticky': 'nswe'}),
>                              ('Horizontal.Progressbar.label', {'sticky': 'nswe'})])
> 
>         s_readout.configure("text.Horizontal.RProgressbar",
4100c4794
<         
---
> 
4102c4796
<         self.readout_progbar = ttk.Progressbar(labelframe_ExposeBegin, orient='horizontal', 
---
>         self.readout_progbar = ttk.Progressbar(labelframe_ExposeBegin, orient='horizontal',
4104c4798
<                                       length=130, style="text.Horizontal.RProgressbar")
---
>                                                length=130, style="text.Horizontal.RProgressbar")
4109,4112c4803,4805
< 
<  
<         label_Display =  tk.Label(labelframe_ExposeBegin, text="Subtract for Display:")
<         label_Display.place(x=4,y=95)
---
>         label_Display = tk.Label(
>             labelframe_ExposeBegin, text="Correct for Quick Look:")
>         label_Display.place(x=4, y=95)
4114c4807,4808
<         check_Bias = tk.Checkbutton(labelframe_ExposeBegin, text='Bias',variable=self.subtract_Bias, onvalue=1, offvalue=0)
---
>         check_Bias = tk.Checkbutton(
>             labelframe_ExposeBegin, text='Bias', variable=self.subtract_Bias, onvalue=1, offvalue=0)
4117,4118c4811,4813
<         check_Dark = tk.Checkbutton(labelframe_ExposeBegin, text='Dark',variable=self.subtract_Dark, onvalue=1, offvalue=0)
<         check_Dark.place(x=60,y=115)
---
>         check_Dark = tk.Checkbutton(
>             labelframe_ExposeBegin, text='Dark', variable=self.subtract_Dark, onvalue=1, offvalue=0)
>         check_Dark.place(x=60, y=115)
4120,4121c4815,4817
<         check_Flat = tk.Checkbutton(labelframe_ExposeBegin, text='Flat',variable=self.divide_Flat, onvalue=1, offvalue=0)
<         check_Flat.place(x=120,y=115)
---
>         check_Flat = tk.Checkbutton(
>             labelframe_ExposeBegin, text='Flat', variable=self.divide_Flat, onvalue=1, offvalue=0)
>         check_Flat.place(x=120, y=115)
4123,4124c4819,4822
<         check_Buffer = tk.Checkbutton(labelframe_ExposeBegin, text='Buffer',variable=self.subtract_Buffer, onvalue=1, offvalue=0)
<         check_Buffer.place(x=180,y=115)
---
>         check_Buffer = tk.Checkbutton(
>             labelframe_ExposeBegin, text='Buffer', variable=self.subtract_Buffer, onvalue=1, offvalue=0)
>         check_Buffer.place(x=180, y=115)
> 
4126,4127d4823
<        
<         
4129c4825
< #         
---
> #
4131c4827
< #         
---
> #
4133,4134c4829,4832
<         self.frame_FITSmanager = tk.Frame(self,background="pink")#, width=400, height=800)
<         self.frame_FITSmanager.place(x=14, y=610, anchor="nw", width=420, height=200)
---
>         # , width=400, height=800)
>         self.frame_FITSmanager = tk.Frame(self, background="pink")
>         self.frame_FITSmanager.place(
>             x=10, y=620, anchor="nw", width=420, height=190)
4136c4834,4835
<         labelframe_FITSmanager =  tk.LabelFrame(self.frame_FITSmanager, text="FITS manager", font=("Arial", 24))
---
>         labelframe_FITSmanager = tk.LabelFrame(
>             self.frame_FITSmanager, text="FITS manager", font=("Arial", 24))
4140,4142c4839,4841
< # 
< #          
< # 
---
> #
> #
> #
4151c4850
< #         
---
> #
4153,4158c4852,4857
<  
<         button_FITS_Load =  tk.Button(labelframe_FITSmanager, text="Load last file", bd=3, 
<                                            command=self.load_last_file)
<         button_FITS_Load.place(x=0,y=0)
<         
<  
---
> 
>         button_FITS_Load = tk.Button(labelframe_FITSmanager, text="Load last file", bd=3,
>                                      command=self.load_last_file)
>         button_FITS_Load.place(x=0, y=0)
> 
> 
4161c4860
< # 
---
> #
4163,4166c4862,4865
<         labelframe_Query_Simbad =  tk.LabelFrame(labelframe_FITSmanager, text="Query Simbad", 
<                                                      width=180,height=110,
<                                                      font=("Arial", 24))
<         labelframe_Query_Simbad.place(x=0, y=45)
---
>         labelframe_Query_Simbad = tk.LabelFrame(labelframe_FITSmanager, text="Query Simbad",
>                                                 width=180, height=110,
>                                                 font=("Arial", 24))
>         labelframe_Query_Simbad.place(x=5, y=45)
4168c4867,4868
<         button_Query_Simbad =  tk.Button(labelframe_Query_Simbad, text="Query Simbad", bd=3, command=self.Query_Simbad)
---
>         button_Query_Simbad = tk.Button(
>             labelframe_Query_Simbad, text="Query Simbad", bd=3, command=self.Query_Simbad)
4171,4174c4871,4872
< 
< 
< 
<         self.label_SelectSurvey = tk.Label(labelframe_Query_Simbad, text="Survey")
---
>         self.label_SelectSurvey = tk.Label(
>             labelframe_Query_Simbad, text="Survey")
4178,4184c4876,4882
<              "DSS",
<              "DSS2/red",
<              "CDS/P/AKARI/FIS/N160",
<              "PanSTARRS/DR1/z",
<              "2MASS/J",
<              "GALEX",
<              "AllWISE/W3"]
---
>             "DSS",
>             "DSS2/red",
>             "CDS/P/AKARI/FIS/N160",
>             "PanSTARRS/DR1/z",
>             "2MASS/J",
>             "GALEX",
>             "AllWISE/W3"]
4190c4888,4889
<         self.menu_Survey = tk.OptionMenu(labelframe_Query_Simbad, self.Survey_selected ,  *Survey_options)
---
>         self.menu_Survey = tk.OptionMenu(
>             labelframe_Query_Simbad, self.Survey_selected,  *Survey_options)
4192,4200c4891,4894
<         
<         self.readout_Simbad = tk.Label(self.frame0l, text='')        
<  
<     
<  
<     
<  
<     
<         """ RA Entry box""" 
---
> 
>         self.readout_Simbad = tk.Label(self.frame0l, text='')
> 
>         """ RA Entry box"""
4203,4209c4897,4904
<         self.string_RA.set("150.17110")  #NGC 3105
<         label_RA = tk.Label(labelframe_FITSmanager, text='RA:',  bd =3)
<         self.entry_RA = tk.Entry(labelframe_FITSmanager, width=11,  bd =3, textvariable = self.string_RA)
<         label_RA.place(x=190,y=5)
<         self.entry_RA.place(x=230,y=5)
<         
<         """ DEC Entry box""" 
---
>         self.string_RA.set("150.17110")  # NGC 3105
>         label_RA = tk.Label(labelframe_FITSmanager, text='RA:',  bd=3)
>         self.entry_RA = tk.Entry(
>             labelframe_FITSmanager, width=11,  bd=3, textvariable=self.string_RA)
>         label_RA.place(x=190, y=5)
>         self.entry_RA.place(x=230, y=5)
> 
>         """ DEC Entry box"""
4212,4218c4907,4914
<         self.string_DEC.set("-54.79004") #NGC 3105
<         label_DEC = tk.Label(labelframe_FITSmanager, text='Dec:',  bd =3)
<         self.entry_DEC = tk.Entry(labelframe_FITSmanager, width=11,  bd =3, textvariable = self.string_DEC)
<         label_DEC.place(x=290,y=30)
<         self.entry_DEC.place(x=230,y=30)
<         
<         """ Filter Entry box""" 
---
>         self.string_DEC.set("-54.79004")  # NGC 3105
>         label_DEC = tk.Label(labelframe_FITSmanager, text='Dec:',  bd=3)
>         self.entry_DEC = tk.Entry(
>             labelframe_FITSmanager, width=11,  bd=3, textvariable=self.string_DEC)
>         label_DEC.place(x=190, y=30)
>         self.entry_DEC.place(x=230, y=30)
> 
>         """ Filter Entry box"""
4221,4230c4917,4928
<         label_Filter = tk.Label(labelframe_FITSmanager, text='Filter:',  bd =3)
<         entry_Filter = tk.Entry(labelframe_FITSmanager, width=3,  bd =3,textvariable = self.string_Filter)
<         label_Filter.place(x=190,y=55)
<         entry_Filter.place(x=230,y=55)
< 
<         """ Nr. of Stars Entry box""" 
<         label_nrofstars =  tk.Label(labelframe_FITSmanager, text="Nr. of stars")
<         label_nrofstars.place(x=280,y=55)
<         self.nrofstars=tk.IntVar()
<         entry_nrofstars = tk.Entry(labelframe_FITSmanager, width=3,  bd =3, textvariable=self.nrofstars)
---
>         label_Filter = tk.Label(labelframe_FITSmanager, text='Filter:',  bd=3)
>         entry_Filter = tk.Entry(labelframe_FITSmanager,
>                                 width=3,  bd=3, textvariable=self.string_Filter)
>         label_Filter.place(x=190, y=55)
>         entry_Filter.place(x=230, y=55)
> 
>         """ Nr. of Stars Entry box"""
>         label_nrofstars = tk.Label(labelframe_FITSmanager, text="Nr. of stars")
>         label_nrofstars.place(x=280, y=55)
>         self.nrofstars = tk.IntVar()
>         entry_nrofstars = tk.Entry(
>             labelframe_FITSmanager, width=3,  bd=3, textvariable=self.nrofstars)
4234,4235c4932,4933
<         """ SkyMapper Query """ 
<         button_skymapper_query =  tk.Button(labelframe_FITSmanager, text="SkyMapper Query", bd=3, 
---
>         """ SkyMapper Query """
>         button_skymapper_query = tk.Button(labelframe_FITSmanager, text="SkyMapper Query", bd=3,
4237,4239c4935,4937
<         button_skymapper_query.place(x=190,y=80)
<                
<         button_twirl_Astrometry =  tk.Button(labelframe_FITSmanager, text="twirl_Astrometry", bd=3, 
---
>         button_skymapper_query.place(x=190, y=80)
> 
>         button_twirl_Astrometry = tk.Button(labelframe_FITSmanager, text="twirl_Astrometry", bd=3,
4241,4242c4939,4940
<         button_twirl_Astrometry.place(x=190,y=105)
<         
---
>         button_twirl_Astrometry.place(x=190, y=105)
> 
4244c4942
<         
---
> 
4247c4945
< #        button_Astrometry =  tk.Button(labelframe_FITSmanager, text="Astrometry", bd=3, 
---
> #        button_Astrometry =  tk.Button(labelframe_FITSmanager, text="Astrometry", bd=3,
4252c4950
< # 
---
> #
4265c4963
<         vbox.place(x=450, y=0, anchor="nw")#, width=500, height=800)
---
>         vbox.place(x=450, y=0, anchor="nw")  # , width=500, height=800)
4272,4273c4970,4973
<         fi = CanvasView(logger) #=> ImageViewTk -- a backend for Ginga using a Tk canvas widget
<         fi.set_widget(canvas)  #=> Call this method with the Tkinter canvas that will be used for the display.
---
>         # => ImageViewTk -- a backend for Ginga using a Tk canvas widget
>         fi = CanvasView(logger)
>         # => Call this method with the Tkinter canvas that will be used for the display.
>         fi.set_widget(canvas)
4286c4986
<         fi.show_mode_indicator(True, corner = 'ur')
---
>         fi.show_mode_indicator(True, corner='ur')
4301d5000
< 
4306d5004
<         canvas.set_surface(fi)
4318,4319c5016,5017
<         fi.set_window_size(514,522)
<         
---
>         fi.set_window_size(514, 522)
> 
4322,4323c5020,5021
<         #self.readout.place()
<         
---
>         # self.readout.place()
> 
4331,4332d5028
<         
<         
4343c5039,5040
<         wdrawcolor = ttk.Combobox(hbox, values=self.drawcolors, style="TCombobox")#,
---
>         wdrawcolor = ttk.Combobox(
>             hbox, values=self.drawcolors, style="TCombobox")  # ,
4363c5060
<                                 command=self.slits_only)
---
>                          command=self.slits_only)
4365c5062
<                                 command=self.clear_canvas)
---
>                            command=self.clear_canvas)
4367c5064
<                                 command=self.save_canvas)
---
>                           command=self.save_canvas)
4369,4370c5066,5067
<                                command=self.open_file)
<                 # pressing quit button freezes application and forces kernel restart.
---
>                           command=self.open_file)
>         # pressing quit button freezes application and forces kernel restart.
4372c5069
<                                command=lambda: self.quit(self))
---
>                           command=lambda: self.quit(self))
4375c5072
< #                  wfill, wdrawcolor, wslit, wdrawtype, wopen):
---
>                   #                  wfill, wdrawcolor, wslit, wdrawtype, wopen):
4378d5074
<  
4384c5080
< #         
---
> #
4386c5082
< #         Circles that light green or 
---
> #         Circles that light green or magenta
4388c5084
<         
---
> 
4390,4392c5086,5088
<         self.canvas_Indicator.place(x=60,y=810,width=310, height=85)
<         
<         self.canvas_Indicator.create_oval(20,20,60,60, fill=indicator_light_on_color, 
---
>         self.canvas_Indicator.place(x=60, y=810, width=310, height=85)
> 
>         self.canvas_Indicator.create_oval(20, 20, 60, 60, fill=indicator_light_on_color,
4394,4395c5090,5091
<         self.canvas_Indicator.create_text(40,70, text="Filters")
<         self.canvas_Indicator.create_oval(100,20,140,60, fill=indicator_light_on_color, 
---
>         self.canvas_Indicator.create_text(40, 70, text="Filters")
>         self.canvas_Indicator.create_oval(100, 20, 140, 60, fill=indicator_light_on_color,
4397,4400c5093,5096
<         self.canvas_Indicator.create_text(120,70, text="Grisms")
<         
<         #indicator for mirror and SOAR TCS applicable at telescope
<         self.canvas_Indicator.create_oval(170,20,210,60, fill=indicator_light_off_color, tags=["mirror_ind"],
---
>         self.canvas_Indicator.create_text(120, 70, text="Grisms")
> 
>         # indicator for mirror and SOAR TCS applicable at telescope
>         self.canvas_Indicator.create_oval(170, 20, 210, 60, fill=indicator_light_off_color, tags=["mirror_ind"],
4402,4403c5098,5099
<         self.canvas_Indicator.create_text(190,70, text="Mirror")
<         self.canvas_Indicator.create_oval(240,20,280,60, fill=indicator_light_off_color, tags=["tcs_ind"],
---
>         self.canvas_Indicator.create_text(190, 70, text="Mirror")
>         self.canvas_Indicator.create_oval(240, 20, 280, 60, fill=indicator_light_off_color, tags=["tcs_ind"],
4405,4406c5101,5102
<         self.canvas_Indicator.create_text(260,70, text="TCS")
<         
---
>         self.canvas_Indicator.create_text(260, 70, text="TCS")
> 
4411c5107
<  
---
> 
4413c5109
< #         
---
> #
4415c5111
< #         
---
> #
4417,4420c5113,5118
<         self.frame_SlitConf = tk.Frame(self,background="gray")#, width=400, height=800)
<         self.frame_SlitConf.place(x=460, y=610, anchor="nw", width=500, height=250)
<         labelframe_SlitConf =  tk.LabelFrame(self.frame_SlitConf, text="Slit Configuration", 
<                                              font=("Arial", 24))
---
>         # , width=400, height=800)
>         self.frame_SlitConf = tk.Frame(self, background="gray")
>         self.frame_SlitConf.place(
>             x=460, y=610, anchor="nw", width=500, height=250)
>         labelframe_SlitConf = tk.LabelFrame(self.frame_SlitConf, text="Slit Configuration",
>                                             font=("Arial", 24))
4422d5119
<         
4424,4427c5121,5124
< 
<         self.setChecked = tk.StringVar(None,"draw")
<         btn1 = tk.Radiobutton(labelframe_SlitConf,text="Draw",padx=6,pady=1,variable=self.setChecked,value="draw", command=self.set_mode_cb)
<         #btn1.pack(anchor='ne')
---
>         self.setChecked = tk.StringVar(None, "draw")
>         btn1 = tk.Radiobutton(labelframe_SlitConf, text="Draw", padx=6, pady=1,
>                               variable=self.setChecked, value="draw", command=self.set_mode_cb)
>         # btn1.pack(anchor='ne')
4429,4432c5126,5131
<         btn2 = tk.Radiobutton(labelframe_SlitConf,text="Edit",padx=10,pady=1,variable=self.setChecked,value="edit", command=self.set_mode_cb)
<         btn2.place(x=220, y=50)#pack(anchor='ne')
<         btn3 = tk.Radiobutton(labelframe_SlitConf,text="Pick",padx=9,pady=1,variable=self.setChecked,value="pick", command=self.set_mode_cb)
<         btn3.place(x=220, y=75)#pack(anchor='ne')
---
>         btn2 = tk.Radiobutton(labelframe_SlitConf, text="Edit", padx=10, pady=1,
>                               variable=self.setChecked, value="edit", command=self.set_mode_cb)
>         btn2.place(x=220, y=50)  # pack(anchor='ne')
>         btn3 = tk.Radiobutton(labelframe_SlitConf, text="Pick", padx=9, pady=1,
>                               variable=self.setChecked, value="pick", command=self.set_mode_cb)
>         btn3.place(x=220, y=75)  # pack(anchor='ne')
4436,4440c5135,5141
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====        
<         label_slit_w = tk.Label(labelframe_SlitConf, text="Slit width (mirrors)")
<         label_slit_w.place(x=4,y=4)
<         self.slit_w = tk.IntVar(value=3) 
<         self.textbox_slit_w = tk.Entry(labelframe_SlitConf, textvariable=self.slit_w, width = 4)      
---
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>         label_slit_w = tk.Label(labelframe_SlitConf,
>                                 text="Slit width (mirrors)")
>         label_slit_w.place(x=4, y=4)
>         self.slit_w = tk.IntVar(value=3)
>         self.textbox_slit_w = tk.Entry(
>             labelframe_SlitConf, textvariable=self.slit_w, width=4)
4442,4447c5143,5148
<         
<         width_adjust_btn = tk.Spinbox(labelframe_SlitConf, 
<                                        command=self.slit_width_length_adjust,increment=1,
<                                        textvariable=self.slit_w, width=5,
<                                        from_=0,to=1080)
<         width_adjust_btn.place(x=130,y=4)
---
> 
>         width_adjust_btn = tk.Spinbox(labelframe_SlitConf,
>                                       command=self.slit_width_length_adjust, increment=1,
>                                       textvariable=self.slit_w, width=5,
>                                       from_=0, to=1080)
>         width_adjust_btn.place(x=130, y=4)
4450,4451c5151
<         
<         
---
> 
4454,4458c5154,5159
< #  #    SLIT LENGTH in mirror, cross-dispersion (affets sky subtraction) 
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====        
<         label_slit_l = tk.Label(labelframe_SlitConf, text="Slit length (mirrors)")
<         label_slit_l.place(x=4,y=29)
<         self.slit_l = tk.IntVar() 
---
> #  #    SLIT LENGTH in mirror, cross-dispersion (affets sky subtraction)
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>         label_slit_l = tk.Label(labelframe_SlitConf,
>                                 text="Slit length (mirrors)")
>         label_slit_l.place(x=4, y=29)
>         self.slit_l = tk.IntVar()
4460c5161,5162
<         self.textbox_slit_l = tk.Entry(labelframe_SlitConf, textvariable=self.slit_l, width = 4)      
---
>         self.textbox_slit_l = tk.Entry(
>             labelframe_SlitConf, textvariable=self.slit_l, width=4)
4462,4464c5164,5166
<         
<         length_adjust_btn = tk.Spinbox(labelframe_SlitConf, 
<                                        command=self.slit_width_length_adjust,increment=1,
---
> 
>         length_adjust_btn = tk.Spinbox(labelframe_SlitConf,
>                                        command=self.slit_width_length_adjust, increment=1,
4467c5169
<         length_adjust_btn.place(x=130,y=30)
---
>         length_adjust_btn.place(x=130, y=30)
4473c5175
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====        
---
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
4475c5177,5178
<         wslit = tk.Checkbutton(labelframe_SlitConf, text="Slit Pointer", variable=self.vslit, command=self.set_slit_drawtype)
---
>         wslit = tk.Checkbutton(labelframe_SlitConf, text="Slit Pointer",
>                                variable=self.vslit, command=self.set_slit_drawtype)
4477,4478c5180,5181
<     
<         
---
> 
> 
4481c5184
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====        
---
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
4483c5186,5187
<         traces_button= tk.Button(labelframe_SlitConf, text="Show Traces", command=self.show_traces)
---
>         traces_button = tk.Button(
>             labelframe_SlitConf, text="Show Traces", command=self.show_traces)
4485,4486c5189,5191
<         
<         remove_traces_button = tk.Button(labelframe_SlitConf, text="Remove Traces", command=self.remove_traces, padx=0, pady=0)
---
> 
>         remove_traces_button = tk.Button(
>             labelframe_SlitConf, text="Remove Traces", command=self.remove_traces, padx=0, pady=0)
4488c5193
<         
---
> 
4491,4492c5196,5197
<         labelframe_PatternSeries = tk.LabelFrame(labelframe_SlitConf, text="Create Pattern Series with No Overlapping Slits", 
<                                                  font=("Arial", 15),height=110, width=380)
---
>         labelframe_PatternSeries = tk.LabelFrame(labelframe_SlitConf, text="Create Pattern Series with No Overlapping Slits",
>                                                  font=("Arial", 15), height=110, width=380)
4495c5200
<         
---
> 
4499,4500c5204
<         
<         
---
> 
4503c5207
<         
---
> 
4507c5211,5212
<         base_pattern_name_entry.bind("<KeyPress>", self.set_pattern_entry_text_color)
---
>         base_pattern_name_entry.bind(
>             "<KeyPress>", self.set_pattern_entry_text_color)
4509c5214
<         
---
> 
4511c5216
<         self.pattern_group_dropdown = ttk.Combobox(labelframe_PatternSeries, width=25, 
---
>         self.pattern_group_dropdown = ttk.Combobox(labelframe_PatternSeries, width=25,
4513c5218,5219
<         self.pattern_group_dropdown.bind("<<ComboboxSelected>>", self.selected_dmd_group_pattern)
---
>         self.pattern_group_dropdown.bind(
>             "<<ComboboxSelected>>", self.selected_dmd_group_pattern)
4515,4516c5221
<         
<         
---
> 
4521,4526c5226,5233
<         save_all_sub_patterns_btn = tk.Button(labelframe_PatternSeries, 
<                                                    text="Save All Sub Patterns", 
<                                                    command=self.save_all_sub_patterns, padx=0, pady=0)
<         save_all_sub_patterns_btn.place(x=4, y=60)
<         
<         
---
>         save_all_sub_patterns_btn = tk.Button(labelframe_PatternSeries,
>                                               text="Save All Sub Patterns",
>                                               command=self.save_all_sub_patterns, padx=0, pady=0)
>         save_all_sub_patterns_btn.place(x=4, y=60)
> 
> 
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
> #  #    Apply to All
4528,4529d5234
< #  #    Apply to All 
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====        
4531c5236,5237
<         apply_to_all_button= tk.Button(labelframe_SlitConf, text="Apply to All", command=self.apply_to_all)
---
>         apply_to_all_button = tk.Button(
>             labelframe_SlitConf, text="Apply to All", command=self.apply_to_all)
4536,4537c5242,5244
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====        
<         view_slit_tab_button = tk.Button(labelframe_SlitConf, text="View Slit Table", command=self.show_slit_table,padx=0, pady=0)        
---
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>         view_slit_tab_button = tk.Button(
>             labelframe_SlitConf, text="View Slit Table", command=self.show_slit_table, padx=0, pady=0)
4575,4576c5282,5283
<         button_load_regfile_xyAP =  tk.Button(labelframe_DMD, text="LOAD: .reg file -> Slits", bd=3, command=self.load_regfile_xyAP)
<         button_load_regfile_xyAP.place(x=155,y=50)
---
>         button_load_ds9regfile_xyAP =  tk.Button(labelframe_DMD, text="LOAD: .reg file -> Slits", bd=3, command=self.load_ds9regfile_xyAP)
>         button_load_ds9regfile_xyAP.place(x=155,y=50)
4583c5290
<          # 4)# LOAD BUTTONS
---
>         # 4)# LOAD BUTTONS
4597c5304
<         
---
> 
4624,4625d5330
< 
<         
4632,4636c5337,5341
<         """        
<         self.frame1r = tk.Frame(self)#, width=400, height=800)
<         self.frame1r.place(x=1000, y=5, anchor="nw", width=380, height=800)
<  
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====         
---
>         """
>         self.frame1r = tk.Frame(self)  # , width=400, height=800)
>         self.frame1r.place(x=1000, y=5, anchor="nw", width=380, height=860)
> 
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
4639,4643c5344,5349
<         labelframe_Sky =  tk.LabelFrame(self.frame1r, 
<                                         text="Sky (RA,Dec) regions", 
<                                         font=("Arial", 20), bg="#8AA7A9")
<         labelframe_Sky.pack(fill="both", expand="yes")
<         
---
>         labelframe_Sky = tk.LabelFrame(self.frame1r,
>                                        text="Sky (RA,Dec) regions",
>                                        font=("Arial", 20), bg="#8AA7A9")
> #        labelframe_Sky.pack(fill="both", expand="yes")
>         labelframe_Sky.place(x=0, y=0, width=380, height=250)
> 
4645,4655c5351,5362
<                                          text = "load (RA,Dec) regions from astropy .reg file", 
<                                          command = self.load_regfile_RADEC)
<         button_load_regfile_RADEC.place(x=4,y=4)
<         
<         label_filename_regfile_RADEC = tk.Label(labelframe_Sky, 
<                                          text="Loaded Region File in RADEC units:", 
<                                          bg="#8AA7A9")
<         label_filename_regfile_RADEC.place(x=4,y=34)
<         self.str_filename_regfile_RADEC = tk.StringVar() 
<         self.textbox_filename_regfile_RADEC= tk.Text(labelframe_Sky, height = 1, width = 48)      
<         self.textbox_filename_regfile_RADEC.place(x=4,y=55)
---
>                                               text="load (RA,Dec) regions from ds9/radec .reg file",
>                                               command=self.load_regfile_RADEC)
>         button_load_regfile_RADEC.place(x=4, y=4)
> 
>         label_filename_regfile_RADEC = tk.Label(labelframe_Sky,
>                                                 text="Loaded Region File in RADEC units:",
>                                                 bg="#8AA7A9")
>         label_filename_regfile_RADEC.place(x=4, y=34)
>         self.str_filename_regfile_RADEC = tk.StringVar()
>         self.textbox_filename_regfile_RADEC = tk.Text(
>             labelframe_Sky, height=1, width=48)
>         self.textbox_filename_regfile_RADEC.place(x=4, y=55)
4658,4663c5365,5371
<                                           text = "get center/point (RA,Dec) from filename",
<                                           command = self.push_RADEC)
<         button_push_RADEC.place(x=54,y=90)
< 
<         label_workflow = tk.Label(labelframe_Sky, text="Point, take an image and twirl WCS from GAIA...", bg="#8AA7A9")
<         label_workflow.place(x=4,y=130)
---
>                                       text="get center/point (RA,Dec) from filename ",
>                                       command=self.push_RADEC)
>         button_push_RADEC.place(x=54, y=90)
> 
>         label_workflow = tk.Label(
>             labelframe_Sky, text="Point, take an image and twirl WCS from GAIA...", bg="#8AA7A9")
>         label_workflow.place(x=4, y=120)
4666,4673c5374,5381
<                                            text = "convert (RA,Dec) regions -> (x,y) regions",
<                                            command = self.convert_regions_RADEC2xy)
<         button_regions_RADEC2pixel.place(x=4,y=151)
< 
<         button_regions_RADEC_save= tk.Button(labelframe_Sky,
<                                             text = "save (RA,Dec) regions -> astropy RADEC.reg file",
<                                             command = self.save_RADECregions_AstropyRADECRegFile)
<         button_regions_RADEC_save.place(x=4,y=181)
---
>                                                text="display ds9/radec regions -> Ginga",
>                                                command=self.display_ds9ad_Ginga)
>         button_regions_RADEC2pixel.place(x=4, y=145)
> 
>         button_regions_RADEC_save = tk.Button(labelframe_Sky,
>                                               text="write Ginga regions -> ds9/radec .reg file",
>                                               command=self.write_GingaRegions_ds9adFile)
>         button_regions_RADEC_save.place(x=4, y=175)
4681c5389
<  # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====         
---
>  # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
4684,4699c5392,5409
<         labelframe_CCD =  tk.LabelFrame(self.frame1r, 
<                                         text="CCD (x,y) regions", font=("Arial", 20), bg="#00CED1")
<         labelframe_CCD.pack(fill="both", expand="yes")
<          
<         button_load_regfile_xyAP = tk.Button(labelframe_CCD,
<                                         text = "load (x,y) regions from .reg file", 
<                                         command = self.load_regfile_xyAP)
<         button_load_regfile_xyAP.place(x=4,y=4)
<          
<         label_filename_regfile_xyAP = tk.Label(labelframe_CCD, 
<                                         text="Loaded Region File in CCD units:", 
<                                         bg="#00CED1")
<         label_filename_regfile_xyAP.place(x=4,y=34)
<         self.str_filename_regfile_xyAP = tk.StringVar() 
<         self.textbox_filename_regfile_xyAP= tk.Text(labelframe_CCD, height = 1, width = 48)      
<         self.textbox_filename_regfile_xyAP.place(x=4,y=55)
---
>         labelframe_CCD = tk.LabelFrame(self.frame1r,
>                                        text="CCD (x,y) regions", font=("Arial", 20), bg="#00CED1")
> #        labelframe_CCD.pack(fill="both", expand="yes")
>         labelframe_CCD.place(x=0, y=251, width=380, height=159)
> 
>         button_load_ds9regfile_xyAP = tk.Button(labelframe_CCD,
>                                                 text="load (x,y) regions from ds9/xy .reg file",
>                                                 command=self.load_ds9regfile_xyAP)
>         button_load_ds9regfile_xyAP.place(x=4, y=4)
> 
>         label_filename_regfile_xyAP = tk.Label(labelframe_CCD,
>                                                text="Loaded Region File in CCD units:",
>                                                bg="#00CED1")
>         label_filename_regfile_xyAP.place(x=4, y=34)
>         self.str_filename_regfile_xyAP = tk.StringVar()
>         self.textbox_filename_regfile_xyAP = tk.Text(
>             labelframe_CCD, height=1, width=48)
>         self.textbox_filename_regfile_xyAP.place(x=4, y=55)
4707c5417
<         
---
> 
4712,4716d5421
<         
<         button_regions_CCD2RADEC = tk.Button(labelframe_CCD,
<                                         text = "convert (x,y) regions -> (RA,Dec) regions",
<                                         command = self.convert_regions_xy2RADEC)
<         button_regions_CCD2RADEC.place(x=4,y=121)
4718c5423,5427
<         
---
>         # button_regions_CCD2RADEC = tk.Button(labelframe_CCD,
>         #                                text = "convert Ginga x,y regions -> ds9/radec regions",
>         #                                command = self.convert_GAxy_APad)
>         # button_regions_CCD2RADEC.place(x=4,y=121)
> 
4725,4736c5434,5445
<         
<         button_regions_draw = tk.Button(labelframe_CCD,
<                                         text = "DRAW",
<                                         command = self.draw_slits)
<         button_regions_draw.place(x=250,y=151)
< 
<         button_regions_CCD_save= tk.Button(labelframe_CCD,
<                                         text = "save (x,y) regions -> astropy .reg file",
<                                         command = self.save_regions_xy2xyfile)
<         button_regions_CCD_save.place(x=4,y=181)
<        
<  # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====         
---
> 
>         # button_regions_draw = tk.Button(labelframe_CCD,
>         #                                text = "DRAW",
>         #                                command = self.draw_slits)
>         # button_regions_draw.place(x=250,y=151)
> 
>         button_regions_CCD_save = tk.Button(labelframe_CCD,
>                                             text="save (x,y) regions -> ds9/xy .reg file",
>                                             command=self.save_regions_xy2xyfile)
>         button_regions_CCD_save.place(x=4, y=90)
> 
>  # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
4739,4741c5448,5452
<         labelframe_DMD =  tk.LabelFrame(self.frame1r, text="DMD slits", font=("Arial", 20), bg="#20B2AA")
<         labelframe_DMD.pack(fill="both", expand="yes")
<          
---
>         labelframe_DMD = tk.LabelFrame(
>             self.frame1r, text="DMD slits", font=("Arial", 20), bg="#20B2AA")
> #        labelframe_DMD.pack(fill="both", expand="yes")
>         labelframe_DMD.place(x=0, y=410, width=380, height=260)
> 
4761a5473,5496
> 
>         button_push_slits = tk.Button(labelframe_DMD, text="Current Slit Regions -> DMD", bd=3, font=("Arial", 24),  relief=tk.RAISED,
>                                       command=self.push_slit_shape)
>         button_push_slits.place(x=20, y=4)
> #        button_push_slits.place(x=20,y=125)
> 
>         button_save_slittable = tk.Button(labelframe_DMD,
>                                           text="Save Slit List to .csv",
>                                           command=self.Save_slittable)
>         button_save_slittable.place(x=4, y=54)
> #        button_save_slittable.place(x=4,y=175)
> 
>         label_filename_slittable = tk.Label(labelframe_DMD,
>                                             text="Saved Slit List .csv file",
>                                             bg="#20B2AA")  # 00CED1")
> #        label_filename_slittable.place(x=4,y=205)
>         label_filename_slittable.place(x=4, y=84)
> 
>         self.str_filename_slittable = tk.StringVar()
>         self.textbox_filename_slittable = tk.Text(
>             labelframe_DMD, height=1, width=25)
> #        self.textbox_filename_slittable.place(x=147,y=206)
>         self.textbox_filename_slittable.place(x=147, y=85)
> 
4763,4771c5498,5511
<                        text = "Load Slit .csv table",
<                        command = self.load_regfile_csv)
<         button_load_slits.place(x=4,y=4)
< 
<         label_filename_slits = tk.Label(labelframe_DMD, text="Current Slit Grid", bg="#20B2AA")
<         label_filename_slits.place(x=4,y=34)
<         self.str_filename_slits = tk.StringVar() 
<         self.textbox_filename_slits = tk.Text(labelframe_DMD, height = 1, width = 22)      
<         self.textbox_filename_slits.place(x=120,y=34)
---
>                                       text="Load & Push Slit .csv List",
>                                       command=self.load_regfile_csv)
> #        button_load_slits.place(x=4,y=4)
>         button_load_slits.place(x=4, y=125)
> 
>         label_filename_slits = tk.Label(
>             labelframe_DMD, text="Current Slit List", bg="#20B2AA")
> #        label_filename_slits.place(x=4,y=34)
>         label_filename_slits.place(x=4, y=154)
>         self.str_filename_slits = tk.StringVar()
>         self.textbox_filename_slits = tk.Text(
>             labelframe_DMD, height=1, width=22)
> #        self.textbox_filename_slits.place(x=120,y=34)
>         self.textbox_filename_slits.place(x=120, y=155)
4773d5512
<         
4775,4777c5514,5517
<                                             text = "convert slits -> (x,y) pixels",
<                         command = self.convert_regions_slit2xyAP)
<         button_regions_DMD2pixel.place(x=4,y=84)
---
>                                              text="convert slit regions -> (x,y) pixels",
>                                              command=self.convert_regions_slit2xyAP)
> #        button_regions_DMD2pixel.place(x=4,y=84)
>         button_regions_DMD2pixel.place(x=4, y=185)
4785,4787d5524
<         button_push_slits =  tk.Button(labelframe_DMD, text="Slits -> DMD", bd=3, font=("Arial", 24),  relief=tk.RAISED, 
<                                        command=self.push_slits)
<         button_push_slits.place(x=80,y=125)
4789,4799c5526,5566
<         
<         button_save_slittable = tk.Button(labelframe_DMD,
<                        text = "Save Slit .csv table",
<                        command = self.Save_slittable)
<         button_save_slittable.place(x=4,y=181)
<         
<         label_filename_slittable = tk.Label(labelframe_DMD, text="Saved Slit .csv table")
<         label_filename_slittable.place(x=4,y=210)
<         self.str_filename_slittable = tk.StringVar() 
<         self.textbox_filename_slittable= tk.Text(labelframe_DMD, height = 1, width = 22)      
<         self.textbox_filename_slittable.place(x=135,y=210)
---
>  # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>  #  #    HTS module
>  # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
>         labelframe_HTS = tk.LabelFrame(
>             self.frame1r, text="HTS", font=("Arial", 20), bg="#98F5FF")
> #        labelframe_HTM.pack(fill="both", expand="yes")
>         labelframe_HTS.place(x=0, y=700, width=380, height=150)
> 
>         """ Load Mask"""
>         button_load_masks_HTS = tk.Button(labelframe_HTS,
>                                           text="Load mask:",
>                                           command=self.load_masks_file_HTS)
>         button_load_masks_HTS.place(x=4, y=5)
> 
>         label_filename_masks_HTS = tk.Label(
>             labelframe_HTS, text="Loaded Mask:")
>         label_filename_masks_HTS.place(x=4, y=30)
>         #self.str_filename_masks = tk.StringVar()
>         self.textbox_filename_masks_HTS = tk.Text(
>             labelframe_HTS, height=1, width=22)
>         self.textbox_filename_masks_HTS.place(x=120, y=31)
> 
>         """ Pust Mask"""
>         button_push_masks_HTS = tk.Button(labelframe_HTS,
>                                           text="Push mask:",
>                                           command=self.push_masks_file_HTS)
>         button_push_masks_HTS.place(x=4, y=60)
> 
>         label_filename_masks_HTS_pushed = tk.Label(
>             labelframe_HTS, text="Pushed Mask:")
>         label_filename_masks_HTS_pushed.place(x=4, y=85)
>         #self.str_filename_masks = tk.StringVar()
>         self.textbox_filename_masks_HTS_pushed = tk.Text(
>             labelframe_HTS, height=1, width=22)
>         self.textbox_filename_masks_HTS_pushed.place(x=120, y=86)
> 
>         """ NExt Mask"""
>         button_next_masks_HTS = tk.Button(labelframe_HTS,
>                                           text="NEXT",
>                                           command=self.next_masks_file_HTS)
>         button_next_masks_HTS.place(x=290, y=83)
4801,4803d5567
<         
<         
<        
4805d5568
<      
4811,4817c5574,5580
<     def save_regions_DMD_AstropyReg(self): 
<         """ to be written """
<         pass
<     
<     def push_DMD(self):
<         """ to be written """
<         pass
---
> #    def save_regions_DMD_AstropyReg(self):
> #        """ to be written """
> #        pass
> 
> #    def push_DMD(self):
> #        """ to be written """
> #        pass
4820a5584
>         self.LoadSlits()
4824c5588,5595
<         """ to be written """
---
>         """ Save (x,y) Astropy Regions to .reg file """
>         """ converting Ginga Regions to AP/radec Regions 
>             - collects/compound all Ginga Regions in RRR_xyGA
>             - convert to AP/xy   (aka RRR_xyAP)
>             - write to AP/xy .region file
>                 => requires WCS
>         """
> 
4826,4828c5597,5599
<         file = filedialog.asksaveasfile(filetypes = [("txt file", ".reg")], 
<                                         defaultextension = ".reg",
<                                         initialdir=os.path.join(local_dir,"SAMOS_regions","pixels"))
---
>         file = filedialog.asksaveasfile(filetypes=[("txt file", ".reg")],
>                                         defaultextension=".reg",
>                                         initialdir=os.path.join(local_dir, "SAMOS_regions", "pixels"))
4835c5606
<         print("(x,y) Astropy Regions to .reg file:\n",file.name)
---
>         print("(x,y) Astropy Regions to .reg file:\n", file.name)
4837,4845c5608,5610
<     def push_CCD(self):
<         """ to be written """
<         pass
<         
<     def change_out_fnumber(self):
<         """
<         Returns
<         -------
<         Incremental change in Exposure number to be appended to the end of filenames.
---
> #    def push_CCD(self):
> #        """ to be written """
> #        pass
4846a5612,5625
> #    def change_out_fnumber(self):
> #        """
> #        Returns
> #        -------
> #        Incremental change in Exposure number to be appended to the end of filenames.
> #
> #        """
> #        return
> 
>     def write_GingaRegions_ds9adFile(self):
>         """ collect all Ginga regions and save to a ds9/ad .reg file 
>             - collect all Ginga xy Regions in a AP/ad list 
>                 uses convert_GAxy_APad()
>             - wites the AP/ad on file list as set of ds9/ad region files
4848,4852d5626
<         return
<         
<     
<     def save_RADECregions_AstropyRADECRegFile(self): 
<         """ to be written """
4858,4860c5632,5634
<             file = filedialog.asksaveasfile(filetypes = [("txt file", ".reg")], 
<                                         defaultextension = ".reg",
<                                         initialdir=os.path.join(local_dir,"SAMOS_regions","RADEC"))
---
>             file = filedialog.asksaveasfile(filetypes=[("txt file", ".reg")],
>                                             defaultextension=".reg",
>                                             initialdir=os.path.join(local_dir, "SAMOS_regions", "RADEC"))
4863c5637,5638
<             self.RRR_RADec = self.convert_regions_xy2RADEC()
---
>             self.RRR_RADec = self.convert_GAxy_APad()
>             print("\ncollected all Ginga xy Regions in a AP/ad list (aka RRR_RADec")
4865,4866c5640,5642
<             print("saved  (RA,DEC) Astropy Regions to .reg file:\n",file.name)
< 
---
>             print("saved  AP/ad list to ds/ad region file file:\n", file.name)
>             print(
>                 "\ncollected all Ginga xy Regions to ads/ad region file file:\n", file.name)
4871c5647
<         self.convert_regions_RADEC2xyAP()
---
>         self.display_ds9ad_GingaAP()
4876,4877c5652
<     """    
< 
---
>     """
4879,4881c5654,5661
<     def convert_regions_RADEC2xy(self): 
<         """ to be written """
<         print("converting (RA,DEC) Astropy Regions to (x,y) Astropy Regions")
---
>     def display_ds9ad_Ginga(self):
>         """ converting ds9/radec Regions to AP/radec Regions 
>             - open ds9/radec region file and convert to AP/xy (aka RRR_xyAP)
>                 -> requires WCS
>             - convert AP/xy to Ginga/xy (aka RRR_xyGA)
>             - convert AP/xy to AP/ad (aka RRR_RADec)
>         """
>         print("displaying ds9/radec Regions on Ginga\n")
4883c5663
<         if 'wcs' not in dir(self): 
---
>         if 'wcs' not in dir(self):
4886c5666,5669
<         self.RRR_xyAP  = Astrometry.APRegion_RAD2pix(self.filename_regfile_RADEC,self.wcs)
---
>         self.RRR_xyAP = Astrometry.APRegion_RAD2pix(
>             self.filename_regfile_RADEC, self.wcs)
>         print("\nopened ds9/radec region file and converted to AP/xy (aka RRR_xyAP)\n => used current WCS")
> 
4888,4889c5671,5672
<         print("RADec regions converted to xy regions\nRRR_xyAP created")
<         
---
>         print("\nconverted AP/xy to Ginga/xy (aka RRR_xyGA)")
> 
4893,4894c5676,5678
<         
<         self.RRR_RADec = Astrometry.APRegion_pix2RAD(self.RRR_xyAP,self.wcs)
---
> 
>         self.RRR_RADec = Astrometry.APRegion_pix2RAD(self.RRR_xyAP, self.wcs)
>         print("converted AP/xy to APradec (aka RRR_RADec)")
4896,4897c5680,5682
<                                                         img_wcs=self.wcs)       
<         
---
>                                                        img_wcs=self.wcs)
>         print("displayed APradec regions on Ginga display")
> 
4899,4902c5684,5692
<   
<     def convert_regions_xy2RADEC(self):
<         """ to be written """
<         print("converting (x,y) Astropy Regions to (RA,DEC) Astropy Regions")
---
> 
>     def convert_GAxy_APad(self):
>         """ converting Ginga Regions to AP/radec Regions 
>             - collects/compound all Ginga Regions in RRR_xyGA
>             - convert tho AP/xy   (aka RRR_xyAP)
>             - convert to AP/radec (aka RRR_RADec)
>                 => requires WCS
>         """
>         print("converting Ginga Regions to AP/radec Regions")
4904c5694
<         if 'wcs' not in dir(self): 
---
>         if 'wcs' not in dir(self):
4907c5697
<         # 1. Collect all
---
>         # 1. Collect all objects in ginga canvas
4908a5699
>         print("\ncollected/compounded all Ginga Regions in RRR_GAxy")
4910a5702
>         print("converted GA/xy to AP/xy   (aka RRR_xyAP)")
4912,4913c5704,5706
<         self.RRR_RADec = Astrometry.APRegion_pix2RAD(self.RRR_xyAP,self.wcs)
<         print("(x,y) Astropy regions converted to (RA,DEC) Astropy regions")
---
>         self.RRR_RADec = Astrometry.APRegion_pix2RAD(self.RRR_xyAP, self.wcs)
>         print("converted AP/xy converted to AP/ad (aka RRR_RADec")
>         print("\nCompleted conversion Ginga Regions to AP/radec Regions ")
4917c5710
<          
---
> 
4920c5713
<         CM.CompoundMixin.set_attr_all(self.canvas,color="red")
---
>         CM.CompoundMixin.set_attr_all(self.canvas, color="red")
4922,4923c5715,5716
<         CM.CompoundMixin.draw(self.canvas,self.canvas.viewer)
<     
---
>         CM.CompoundMixin.draw(self.canvas, self.canvas.viewer)
> 
4939c5732
<     
---
> 
4941c5734
<         """ converting (x,y) Astropy Regions to (x,y) Ginga Regions """ 
---
>         """ converting (x,y) Astropy Regions to (x,y) Ginga Regions """
4943c5736
<         
---
> 
4946c5739
<        
---
> 
4950c5743
<             
---
> 
4953,4964c5746,5757
<              this_reg = self.RRR_xyAP[reg]
<              this_obj = r2g(this_reg)
<              this_obj.pickable = True
<              this_obj.add_callback('pick-down', self.pick_cb, 'down')
<              this_obj.add_callback('pick-up', self.pick_cb, 'up')
<         
<              this_obj.add_callback('pick-key', self.pick_cb, 'key')
<              self.canvas.add(this_obj)
<              # ap_region.add_region(self.canvas, this_reg)
<              if reg<10 or reg==len(self.RRR_xyAP)-1:
<                  print("reg number {} tag: {}".format(reg,this_obj.tag))
<              self.SlitTabView.slit_obj_tags.append(this_obj.tag)
---
>             this_reg = self.RRR_xyAP[reg]
>             this_obj = r2g(this_reg)
>             this_obj.pickable = True
>             this_obj.add_callback('pick-down', self.pick_cb, 'down')
>             this_obj.add_callback('pick-up', self.pick_cb, 'up')
> 
>             this_obj.add_callback('pick-key', self.pick_cb, 'key')
>             self.canvas.add(this_obj)
>             # ap_region.add_region(self.canvas, this_reg)
>             if reg < 10 or reg == len(self.RRR_xyAP)-1:
>                 print("reg number {} tag: {}".format(reg, this_obj.tag))
>             self.SlitTabView.slit_obj_tags.append(this_obj.tag)
4971,4972c5764
<        
<      
---
> 
4979,4980c5771,5772
<             self.RRR_xyAP=Regions([g2r(list_all_ginga_objects[0])])
<             for i in range(1,len(list_all_ginga_objects)):
---
>             self.RRR_xyAP = Regions([g2r(list_all_ginga_objects[0])])
>             for i in range(1, len(list_all_ginga_objects)):
4984d5775
<         
4988,4989c5779,5780
<         self.string_RA  = tk.StringVar(self,self.RA_regCNTR)
<         self.string_DEC  = tk.StringVar(self,self.DEC_regCNTR)
---
>         self.string_RA = tk.StringVar(self, self.RA_regCNTR)
>         self.string_DEC = tk.StringVar(self, self.DEC_regCNTR)
4997,4998c5788,5792
<         """ read (RA,DEC) Regions from .reg file """
<         print("read (RA,DEC) Regions from .reg file")        
---
>         """ read (RA,DEC) Regions from .reg file 
>         - open ds9/ad file and read the regions files creating a AP/ad list of regions (aka RRR_RADec)
>         - extract center RA, Dec
>         """
>         print("read ds9/ad .reg file to create AP/ad regions (aka RRR_RADec")
5001,5006c5795,5800
<         self.filename_regfile_RADEC = filedialog.askopenfilename(initialdir = os.path.join(local_dir, "SAMOS_regions","RADEC"),
<                                         title = "Select a File",
<                                         filetypes = (("Text files",
<                                                       "*.reg"),
<                                                      ("all files",
<                                                       "*.*")))
---
>         self.filename_regfile_RADEC = filedialog.askopenfilename(initialdir=os.path.join(local_dir, "SAMOS_regions", "RADEC"),
>                                                                  title="Select a File",
>                                                                  filetypes=(("Text files",
>                                                                              "*.reg"),
>                                                                             ("all files",
>                                                                              "*.*")))
5009c5803,5804
<         self.RRR_RADec = Regions.read(self.filename_regfile_RADEC, format='ds9')
---
>         self.RRR_RADec = Regions.read(
>             self.filename_regfile_RADEC, format='ds9')
5014c5809
<         
---
> 
5021c5816
<         s=re.search(r'RADEC=',tail)
---
>         s = re.search(r'RADEC=', tail)
5024,5025c5819,5820
<         RA_cut=(re.findall('.*-',RADEC))
<         # and RA, DEC as strings at disposal 
---
>         RA_cut = (re.findall('.*-', RADEC))
>         # and RA, DEC as strings at disposal
5027c5822
<         self.DEC_regCNTR = (re.findall('-.*',RADEC))[0]
---
>         self.DEC_regCNTR = (re.findall('-.*', RADEC))[0]
5029,5030c5824,5825
<         print("(RA,DEC) Regions loaded from .reg file")    
<         
---
>         print("(RA,DEC) Regions loaded from .reg file")
> 
5032,5035c5827,5837
<         
<     def load_regfile_xyAP(self):
<         """ read (x,y) Astropy Regions from .reg file """
<         print("reading (x,y) Astropy Regions from .reg file")                
---
> 
>     def load_ds9regfile_xyAP(self):
>         """ read (x,y) Astropy  Regions from ds9 .reg file 
>             - open ds9 .reg file in pixels units
>             - extract the clean filename to get RA and DEC of the central point
>             - create AP.xy regions (aka RRR_xyAP)
>             - visualize xyAP regions on GINGA display\n  
>                 => WCS solution needed
>             - convert xyAP regions to GINGA regions (aka RRR_xyGA)
>         """
>         print("\n Load ds9/xy reg. file")
5037c5839
<                                          initialdir=os.path.join(local_dir,'SAMOS_regions','pixels'))
---
>                                          initialdir=os.path.join(local_dir, 'SAMOS_regions', 'pixels'))
5044,5045c5846,5847
<         
<         # Then extract the clean filename to get RA and DEC of the central point
---
> 
>         # Then
5049c5851
<             
---
> 
5050a5853
>         print("created AP.xy regions (aka RRR_xyAP)")
5055c5858
<         
---
> 
5057c5860,5861
<         
---
>         print("eliminated duplicated regions")
> 
5061c5865
<             
---
> 
5063c5867
<                                                         img_wcs=self.wcs)
---
>                                                      img_wcs=self.wcs)
5065,5066c5869,5870
<         
<         
---
>         print("xyAP regions visualized on GINGA display\n   => WCS solution needed")
> 
5067a5872
>         print("convert xyAP regions to GINGA regions (aka RRR_xyGA)")
5069c5874
<         
---
> 
5071c5876
<         print("how many objects? ", len(self.canvas.get_objects()))
---
>         print("number of regions: ", len(self.canvas.get_objects()))
5073c5878
<         print("(x,y) Astropy Regions loaded from .reg file")        
---
>         print("ds9/xy regions loaded in Ginga")
5075,5079c5880
<         
<         
<         
<         
<         
---
> 
5085c5886
<     """    
---
>     """
5092c5893
<     def regfname_handle_focus_out(self,_):
---
>     def regfname_handle_focus_out(self, _):
5094c5895
<         
---
> 
5102,5103c5903
< 
<     def regfname_handle_focus_in(self,_):
---
>     def regfname_handle_focus_in(self, _):
5105c5905
<         
---
> 
5108c5908
<             
---
> 
5112d5911
< 
5122c5921
<             # if there is no pattern name provided, use a default based on 
---
>             # if there is no pattern name provided, use a default based on
5126c5925
<             
---
> 
5128c5927
<         
---
> 
5133,5135c5932,5933
<         slits = CM.CompoundMixin.get_objects_by_kind(self.canvas,'box')
<         
<         
---
>         slits = CM.CompoundMixin.get_objects_by_kind(self.canvas, 'box')
> 
5138,5139c5936,5937
<             RRR=Regions([g2r(list_slits[0])])
<             for i in range(1,len(list_slits)):
---
>             RRR = Regions([g2r(list_slits[0])])
>             for i in range(1, len(list_slits)):
5143a5942,5948
>     def collect_slit_shape(self):
>         """ 
>         collect selected slits to DMD pattern
>         Export all Ginga objects to Astropy region
>         """
>         # 1. list of ginga objects
>         objects = CM.CompoundMixin.get_objects(self.canvas)
5145,5147c5950,6054
<     
<     
<     def push_slits(self):
---
>         try:
>             pattern_list_index = self.pattern_group_dropdown.current()
>             print(self.pattern_series[pattern_list_index])
>             current_pattern = self.pattern_series[pattern_list_index]
>             current_pattern_tags = [
>                 "@{}".format(int(obj_num)) for obj_num in current_pattern.object.values]
> 
>             objects = [self.canvas.get_object_by_tag(
>                 tag) for tag in current_pattern_tags]
>         except:
>             pass
> 
>         # counter = 0
>         self.slit_shape = np.ones((1080, 2048))  # This is the size of the DC2K
>         for obj in objects:
>             print(obj)
>             ccd_x0, ccd_y0, ccd_x1, ccd_y1 = obj.get_llur()
> 
>             # first case: figures that have no extensions: do nothing
>             if ((ccd_x0 == ccd_x1) and (ccd_y0 == ccd_y1)):
>                 x1, y1 = convert.CCD2DMD(ccd_x0, ccd_y0)
>                 x1, y1 = int(np.round(x1)), int(np.round(y1))
>                 self.slit_shape[x1, y1] = 0
>             elif self.vslit.get() != 0 and obj.kind == 'point':
>                 x1, y1 = convert.CCD2DMD(ccd_x0, ccd_y0)
>                 x1, y1 = int(np.floor(x1)), int(np.floor(y1))
>                 x2, y2 = convert.CCD2DMD(ccd_x1, ccd_y1)
>                 x2, y2 = int(np.ceil(x2)), int(np.ceil(y2))
>             else:
>                 print("generic aperture")
>                 """
>                 x1,y1 = convert.CCD2DMD(ccd_x0,ccd_y0)
>                 x1,y1 = int(np.floor(x1)), int(np.floor(y1))
>                 x2,y2 = convert.CCD2DMD(ccd_x1,ccd_y1)
>                 x2,y2 = int(np.ceil(x2)), int(np.ceil(y2))
>                 
>                 # dmd_corners[:][1] = corners[:][1]+500
>                 ####   
>                 # x1 = round(dmd_corners[0][0])
>                 # y1 = round(dmd_corners[0][1])+400
>                 # x2 = round(dmd_corners[2][0])
>                 # y2 = round(dmd_corners[2][1])+400
>                 """
>                 # 3 load the slit pattern
>                 data_box = self.AstroImage.cutout_shape(obj)
>                 good_box = data_box.nonzero()
>                 good_box_x = good_box[1]
>                 good_box_y = good_box[0]
>                 print(len(good_box[0]), len(good_box[1]))
>                 """ paint black the vertical columns, avoids rounding error in the pixel->dmd sub-int conversion"""
>                 for i in np.unique(good_box_x):  # scanning multiple rows means each steps moves up along the y axis
>                     # the indices of the y values pertinent to that x
>                     iy = np.where(good_box_x == i)
>                     iymin = min(iy[0])  # the smallest y index
>                     iymax = max(iy[0])  # last largest y index
>                     cx0 = ccd_x0 + i  # so for this x position
>                     # we have these CCD columns limits, counted on the x axis
>                     cy0 = ccd_y0 + good_box_y[iymin]
>                     cy1 = ccd_y0 + good_box_y[iymax]
>                     # get the lower value of the column at the x position,
>                     x1, y1 = convert.CCD2DMD(cx0, cy0)
>                     x1, y1 = int(np.round(x1)), int(np.round(y1))
>                     x2, y2 = convert.CCD2DMD(cx0, cy1)    # and the higher
>                     x2, y2 = int(np.round(x2)), int(np.round(y2))
>                     print(x1, x2, y1, y2)
>                     self.slit_shape[x1-2:x2+1, y1-2:y2+1] = 0
>                     self.slit_shape[x1-2:x1, y1-2:y2+1] = 1
> #                    self.slit_shape[y1-2:y2+1,x1-2:x2+1] = 0
> #                    self.slit_shape[y1-2:y2+1,x1-2:x1] = 1
> #                    self.slit_shape[y1:y2+1,x1:x2+1] = 0
>                 """ paint black the horizontal columns, avoids rounding error in the pixel->dmd sub-int conversion"""
>                 for i in np.unique(good_box_y):  # scanning multiple rows means each steps moves up along the y axis
>                     # the indices of the y values pertinent to that x
>                     ix = np.where(good_box_y == i)
>                     ixmin = min(ix[0])  # the smallest y index
>                     ixmax = max(ix[0])  # last largest y index
>                     cy0 = ccd_y0 + i  # so for this x position
>                     # we have these CCD columns limits, counted on the x axis
>                     cx0 = ccd_x0 + good_box_x[ixmin]
>                     cx1 = ccd_x0 + good_box_x[ixmax]
>                     # get the lower value of the column at the x position,
>                     x1, y1 = convert.CCD2DMD(cx0, cy0)
>                     x1, y1 = int(np.round(x1)), int(np.round(y1))
>                     x2, y2 = convert.CCD2DMD(cx1, cy0)    # and the higher
>                     x2, y2 = int(np.round(x2)), int(np.round(y2))
>                     print(x1, x2, y1, y2)
>                     self.slit_shape[x1-2:x2+1, y1-2:y2+1] = 0
>                     self.slit_shape[x1-2:x1, y1-2:y1] = 1
> #                    self.slit_shape[y1-2:y2+1,x1-2:x2+1] = 0
> #                    self.slit_shape[y1-2:y1,x1-2:x1] = 1
>                 """
>                 for i in range(len(good_box[0])):
>                 x = ccd_x0 + good_box[i]
>                 y = ccd_y0 + good_box[i]
>                 x1,y1 = convert.CCD2DMD(x,y)
>                 self.slit_shape[x1,y1]=0
>                 """
>        #     self.slit_shape[x1:x2,y1:y2]=0
> #        IP = self.PAR.IP_dict['IP_DMD']
> #        [host,port] = IP.split(":")
> #        DMD.initialize(address=host, port=int(port))
> #        DMD._open()
> #        DMD.apply_shape(self.slit_shape)
> 
>     def push_slit_shape(self):
5152c6059,6061
<         # 1. list of ginga objects
---
>         self.collect_slit_shape()
> 
>         """# 1. list of ginga objects
5156d6064
<             pattern_list_index = self.pattern_group_dropdown.current()
5184c6092
<                 """
---
>                 """"""
5196c6104
<                 """      
---
>                 """"""
5203c6111
<                 """ paint black the vertical columns, avoids rounding error in the pixel->dmd sub-int conversion"""
---
>                 """""" paint black the vertical columns, avoids rounding error in the pixel->dmd sub-int conversion""""""
5221c6129
<                 """ paint black the horizontal columns, avoids rounding error in the pixel->dmd sub-int conversion"""
---
>                 """""" paint black the horizontal columns, avoids rounding error in the pixel->dmd sub-int conversion """"""
5238c6146
<                 """
---
>                 """"""
5244c6152
<                 """
---
>                 """"""
5245a6154,6165
> #        IP = self.PAR.IP_dict['IP_DMD']
> #        [host,port] = IP.split(":")
> #        DMD.initialize(address=host, port=int(port))
> #        DMD._open()
> #        DMD.apply_shape(self.slit_shape)  
>         # DMD.apply_invert()   
>         """
>         self.push_slits()
>         print("check")
> 
>     def push_slits(self):
>         """ Actual push of the slit_shape to the DMD """
5247c6167
<         [host,port] = IP.split(":")
---
>         [host, port] = IP.split(":")
5250,5254c6170,6172
<         DMD.apply_shape(self.slit_shape)  
<         # DMD.apply_invert()   
<        
<         print("check")
<             
---
>         DMD.apply_shape(self.slit_shape)
>         # DMD.apply_invert()
> 
5297c6215
<     """    
---
>     """
5305c6223
< # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===== 
---
> # #===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#===#=====
5310c6228
<         print('moving to filter:',self.FW_filter.get()) 
---
>         print('moving to filter:', self.FW_filter.get())
5318c6236,6237
<         self.canvas_Indicator.itemconfig("filter_ind",fill=indicator_light_pending_color)
---
>         self.canvas_Indicator.itemconfig(
>             "filter_ind", fill=indicator_light_pending_color)
5321c6240,6241
<         self.canvas_Indicator.itemconfig("filter_ind",fill=indicator_light_on_color)
---
>         self.canvas_Indicator.itemconfig(
>             "filter_ind", fill=indicator_light_on_color)
5326,5334c6246,6254
<  
<         self.Label_Current_Filter.delete("1.0","end")
<         self.Label_Current_Filter.insert(tk.END,self.FW_filter.get())
<         
<         self.extra_header_params+=1
<         entry_string = param_entry_format.format(self.extra_header_params,'String','FILTER',
<                                                  filter,'Selected filter')
<         self.header_entry_string+=entry_string
<         
---
> 
>         self.Label_Current_Filter.delete("1.0", "end")
>         self.Label_Current_Filter.insert(tk.END, self.FW_filter.get())
> 
>         self.extra_header_params += 1
>         entry_string = param_entry_format.format(self.extra_header_params, 'String', 'FILTER',
>                                                  filter, 'Selected filter')
>         self.header_entry_string += entry_string
> 
5336c6256
<         print(self.Grating_names,self.Grating_Optioned.get())
---
>         print(self.Grating_names, self.Grating_Optioned.get())
5338,5339c6258,6259
<         print(i_selected) 
< #        Grating_Position_Optioned 
---
>         print(i_selected)
> #        Grating_Position_Optioned
5343c6263
<  #       print('moving to grating',Grating_Position_Optioned) 
---
>  #       print('moving to grating',Grating_Position_Optioned)
5349,5350c6269,6271
< #        print(type(GR_pos),type(str(GR_pos)),type("GR_B1")) 
<         self.canvas_Indicator.itemconfig("grism_ind",fill=indicator_light_pending_color)
---
> #        print(type(GR_pos),type(str(GR_pos)),type("GR_B1"))
>         self.canvas_Indicator.itemconfig(
>             "grism_ind", fill=indicator_light_pending_color)
5353c6274,6275
<         self.canvas_Indicator.itemconfig("grism_ind",fill=indicator_light_on_color)
---
>         self.canvas_Indicator.itemconfig(
>             "grism_ind", fill=indicator_light_on_color)
5359,5367c6281,6288
<         self.Label_Current_Grating.delete("1.0","end")
<         self.Label_Current_Grating.insert(tk.END,self.Grating_Optioned.get())
<        
<         
<         self.extra_header_params+=1
<         entry_string = param_entry_format.format(self.extra_header_params,'String','GRISM',
<                                                   i_selected,'Grism position')
<         self.header_entry_string+=entry_string
<         
---
>         self.Label_Current_Grating.delete("1.0", "end")
>         self.Label_Current_Grating.insert(tk.END, self.Grating_Optioned.get())
> 
>         self.extra_header_params += 1
>         entry_string = param_entry_format.format(self.extra_header_params, 'String', 'GRISM',
>                                                  i_selected, 'Grism position')
>         self.header_entry_string += entry_string
> 
5369c6290
<         
---
> 
5406c6327
<                     #self.SlitTabView.stab.delete_row(int(tag.strip("@")))
---
>                     # self.SlitTabView.stab.delete_row(int(tag.strip("@")))
5409,5410c6330,6331
<                     
<                 #if not self.slit_window.winfo_exists():
---
> 
>                 # if not self.slit_window.winfo_exists():
5415c6336
<     def convertSIlly(self,fname, outname=None):
---
>     def convertSIlly(self, fname, outname=None):
5424c6345
<     
---
> 
5430,5433c6351,6357
<         buf = buf.replace(b'SIMPLE  =                    F', b'SIMPLE  =                    T')
<         buf = buf.replace(b'BITPIX  =                  -16', b'BITPIX  =                   16')
<         buf = buf.replace(b"INSTRUME= Spectral Instruments, Inc. 850-406 camera  ", b"INSTRUME= 'Spectral Instruments, Inc. 850-406 camera'")
<     
---
>         buf = buf.replace(b'SIMPLE  =                    F',
>                           b'SIMPLE  =                    T')
>         buf = buf.replace(b'BITPIX  =                  -16',
>                           b'BITPIX  =                   16')
>         buf = buf.replace(b"INSTRUME= Spectral Instruments, Inc. 850-406 camera  ",
>                           b"INSTRUME= 'Spectral Instruments, Inc. 850-406 camera'")
> 
5438c6362
<     
---
> 
5444c6368
< # 
---
> #
5450c6374,6375
<         params = {'Exposure Time':ExpTime_ms,'CCD Temperature':2300, 'Trigger Mode': 4, 'NofFrames': int(self.Light_NofFrames.get())}
---
>         params = {'Exposure Time': ExpTime_ms, 'CCD Temperature': 2300,
>                   'Trigger Mode': 4, 'NofFrames': int(self.Light_NofFrames.get())}
5452c6377
<  
---
>         # handle multiple files
5454c6379
<         if self.Light_NofFrames.get()>1:
---
>         if self.Light_NofFrames.get() > 1:
5461c6386
< # 
---
> #
5466,5467c6391,6393
<         ExpTime_ms = 0 #float(self.Bias_ExpT.get())*1000
<         params = {'Exposure Time':ExpTime_ms,'CCD Temperature':2300, 'Trigger Mode': 5, 'NofFrames': int(self.Bias_NofFrames.get())}
---
>         ExpTime_ms = 0  # float(self.Bias_ExpT.get())*1000
>         params = {'Exposure Time': ExpTime_ms, 'CCD Temperature': 2300,
>                   'Trigger Mode': 5, 'NofFrames': int(self.Bias_NofFrames.get())}
5473,5474c6399,6400
<         
<                        
---
> 
> 
5477c6403
< # 
---
> #
5478a6405,6406
> 
> 
5483c6411,6412
<         params = {'Exposure Time':ExpTime_ms,'CCD Temperature':2300, 'Trigger Mode': 5, 'NofFrames': int(self.Dark_NofFrames.get())}
---
>         params = {'Exposure Time': ExpTime_ms, 'CCD Temperature': 2300,
>                   'Trigger Mode': 5, 'NofFrames': int(self.Dark_NofFrames.get())}
5492c6421
< # 
---
> #
5493a6423,6424
> 
> 
5498c6429,6430
<         params = {'Exposure Time':ExpTime_ms,'CCD Temperature':2300, 'Trigger Mode': 4, 'NofFrames': int(self.Flat_NofFrames.get())}
---
>         params = {'Exposure Time': ExpTime_ms, 'CCD Temperature': 2300,
>                   'Trigger Mode': 4, 'NofFrames': int(self.Flat_NofFrames.get())}
5504c6436
<     
---
> 
5507c6439
< # 
---
> #
5513c6445,6446
<         params = {'Exposure Time':ExpTime_ms,'CCD Temperature':2300, 'Trigger Mode': 4, 'NofFrames': int(self.Buffer_NofFrames.get())}
---
>         params = {'Exposure Time': ExpTime_ms, 'CCD Temperature': 2300,
>                   'Trigger Mode': 4, 'NofFrames': int(self.Buffer_NofFrames.get())}
5519c6452
<         
---
> 
5521c6454
<         
---
> 
5526c6459
<         if obj_type=="Science":
---
>         if obj_type == "Science":
5528c6461
<         elif obj_type=="Bias":
---
>         elif obj_type == "Bias":
5530c6463
<         elif obj_type=="Flat":
---
>         elif obj_type == "Flat":
5532c6465
<         elif obj_type=="Dark":
---
>         elif obj_type == "Dark":
5534c6467
<         elif obj_type=="Buffer":
---
>         elif obj_type == "Buffer":
5539c6472
< # 
---
> #
5541,5546c6474,6478
<     
<     def change_saveall_selected(self):
<         
<         pass
<         
<     
---
> 
> #    def change_saveall_selected(self):
> #
> #        pass
> 
5552c6484,6485
<         file_names = os.path.join(local_dir,"fits_image","setimage_*.fit")
---
>         file_names = os.path.join(
>             local_dir, "SAMOS_QL_images", "setimage_*.fit")
5555c6488
<         superfile_cube = np.zeros((1032,1056,len(files)))   #note y,x,z
---
>         superfile_cube = np.zeros((1032, 1056, len(files)))  # note y,x,z
5559,5561c6492,6494
<             dmd_hdu = self.create_dmd_pattern_hdu(main_fits_header.output_header)
<             
<         
---
>             dmd_hdu = self.create_dmd_pattern_hdu(
>                 main_fits_header.output_header)
> 
5563c6496
<             img_number+=1
---
>             img_number += 1
5566c6499
<                 
---
> 
5568,5569c6501,6503
<                 night_dir_fname = files[i]#glob.glob(night_dir_fname_search)[0]
<                 
---
>                 # glob.glob(night_dir_fname_search)[0]
>                 night_dir_fname = files[i]
> 
5574,5575c6508,6509
<                 superfile_cube[:,:,i] = hdu[0].data
<                 if self.var_Light_saveall.get() ==1 or \
---
>                 superfile_cube[:, :, i] = hdu[0].data
>                 if self.var_Light_saveall.get() == 1 or \
5581,5583c6515,6518
<                     os.rename(files[i],os.path.join(local_dir,"fits_image"+self.image_type+"_"+self.FW_filter.get()+'_'+str(i)+".fits"))
<                     #os.rename(files[i],os.path.join(self.fits_dir,self.image_type+"_"+self.FW_filter.get()+'_'+str(i)+".fits"))
<                     #self.entry_out_fnumber.invoke("buttonup")
---
>                     os.rename(files[i], os.path.join(
>                         local_dir, "SAMOS_QL_images"+self.image_type+"_"+self.FW_filter.get()+'_'+str(i)+".fits"))
>                     # os.rename(files[i],os.path.join(self.fits_dir,self.image_type+"_"+self.FW_filter.get()+'_'+str(i)+".fits"))
>                     # self.entry_out_fnumber.invoke("buttonup")
5585c6520
<                 else: 
---
>                 else:
5587c6522
<                     #also remove the file that was put in the Night directory
---
>                     # also remove the file that was put in the Night directory
5589c6524
<                         os.remove(os.path.join(self.fits_dir,night_dir_fname))
---
>                         os.remove(os.path.join(self.fits_dir, night_dir_fname))
5592,5594c6527,6528
<                     
<                     
<         superfile = superfile_cube.mean(axis=2)        
---
> 
>         superfile = superfile_cube.mean(axis=2)
5596,5609c6530,6541
<         
<         if self.image_type=="sci":
<             obj_type="SCI"
<         elif self.image_type=="buff":
<             obj_type="BUFF"
<         elif self.image_type=="bias":
<             obj_type="BIAS"
<         elif self.image_type=="dark":
<             obj_type="DARK"
<         elif self.image_type=="flat":
<             obj_type="FLAT"
<         
<         
<         
---
> 
>         if self.image_type == "sci":
>             obj_type = "SCI"
>         elif self.image_type == "buff":
>             obj_type = "BUFF"
>         elif self.image_type == "bias":
>             obj_type = "BIAS"
>         elif self.image_type == "dark":
>             obj_type = "DARK"
>         elif self.image_type == "flat":
>             obj_type = "FLAT"
> 
5611,5612c6543,6545
<             super_filename = os.path.join(local_dir,"fits_image","super"+self.image_type+"_"+self.FW_filter.get()+".fits")
<             #fits.writeto(,superfile,supefrfile_header,overwrite=True)
---
>             super_filename = os.path.join(
>                 local_dir, "SAMOS_QL_images", "super"+self.image_type+"_"+self.FW_filter.get()+".fits")
>             # fits.writeto(,superfile,supefrfile_header,overwrite=True)
5614,5617c6547,6549
<             super_filename = os.path.join(local_dir,"fits_image","super"+self.image_type+".fits")
<             
<           
<         
---
>             super_filename = os.path.join(
>                 local_dir, "SAMOS_QL_images", "super"+self.image_type+".fits")
> 
5619c6551
<         #self.entry_out_fnumber.invoke("buttonup")
---
>         # self.entry_out_fnumber.invoke("buttonup")
5621,5623c6553,6564
<         if self.image_type=="dark":
<             second_super_filename0 = second_super_filename0+"_{}s".format(self.ExpTimeSet.get())
<             
---
>         if self.image_type == "dark":
>             second_super_filename0 = second_super_filename0 + \
>                 "_{}s".format(self.ExpTimeSet.get())
> 
>         """
>         we don't want to use here the current file counter int(self.entry_out_fnumber.get()) 
>         because it has been already pushed up by +1 count
>         Therefore, we read it and take down 1 count for the supersci file
>         """
>         current_counter = int(self.entry_out_fnumber.get())
>         previous_counter = current_counter - 1
> 
5625,5626c6566,6569
<                                                         int(self.entry_out_fnumber.get()))
<         second_super_filename = os.path.join(self.fits_dir,second_super_filename)
---
>                                                         #                                                        int(self.entry_out_fnumber.get()))
>                                                         previous_counter)
>         second_super_filename = os.path.join(
>             self.fits_dir, second_super_filename)
5634,5636c6577,6579
<         
<         super_hdu1 = fits.PrimaryHDU(superfile,superfile_header)
<         super_hdu2 = fits.PrimaryHDU(superfile,main_fits_header.output_header)
---
> 
>         super_hdu1 = fits.PrimaryHDU(superfile, superfile_header)
>         super_hdu2 = fits.PrimaryHDU(superfile, main_fits_header.output_header)
5639c6582
<         #second file with updated fits header
---
>         # second file with updated fits header
5642c6585
<         
---
> 
5645c6588
<             
---
> 
5648,5651c6591,6594
<         #fits.writeto(super_filename,superfile,superfile_header,overwrite=True)
<         #fits.writeto(os.path.join(self.fits_dir,second_super_filename),superfile,
<         #             main_fits_header.output_header,overwrite=True)  
<         #self.entry_out_fnumber.invoke("buttonup")
---
>         # fits.writeto(super_filename,superfile,superfile_header,overwrite=True)
>         # fits.writeto(os.path.join(self.fits_dir,second_super_filename),superfile,
>         #             main_fits_header.output_header,overwrite=True)
>         # self.entry_out_fnumber.invoke("buttonup")
5653c6596
<         
---
> 
5656c6599,6600
<         file_names = os.path.join(local_dir,"fits_image",self.image_type+"_*.fits")
---
>         file_names = os.path.join(
>             local_dir, "SAMOS_QL_images", self.image_type+"_*.fits")
5659,5660c6603,6604
<              os.remove(files[i])
<         
---
>             os.remove(files[i])
> 
5663,5666c6607,6612
<         #a superdark file has been taken...
<         dark_file = os.path.join(local_dir,"fits_image","superdark.fits")
<         
<         dark_file = glob.glob(self.fits_dir+"/superdark_{}s_*.fits".format(self.ExpTimeSet.get()))[0]
---
>         # a superdark file has been taken...
>         dark_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superdark.fits")
> 
>         dark_file = glob.glob(
>             self.fits_dir+"/superdark_{}s_*.fits".format(self.ExpTimeSet.get()))[0]
5670c6616
<         #... with a given exposure time
---
>         # ... with a given exposure time
5674c6620
<         #if a bias file has also been taken...
---
>         # if a bias file has also been taken...
5676c6622,6623
<         bias_file = os.path.join(local_dir,"fits_image","superbias.fits")
---
>         bias_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superbias.fits")
5684,5685c6631,6632
<         
<         #the bias is subtracted from the dark
---
> 
>         # the bias is subtracted from the dark
5688,5689c6635,6637
<             main_fits_header.output_header.set("MSTRBIAS", bias_file, "Master Bias file if corrected")
<         else:    
---
>             main_fits_header.output_header.set(
>                 "MSTRBIAS", bias_file, "Master Bias file if corrected")
>         else:
5691,5692c6639,6640
<         
<         #the dark/sec is then determined. This is a dark current RATE
---
> 
>         # the dark/sec is then determined. This is a dark current RATE
5696,5700c6644,6649
<         hdr_out['PARAM2']=1
<         
<         dir_hdul1 = os.path.join(local_dir,"fits_image","superdark_s.fits")
<         fits.writeto(dir_hdul1 ,dark_sec,hdr_out,overwrite=True)
<         
---
>         hdr_out['PARAM2'] = 1
> 
>         dir_hdul1 = os.path.join(
>             local_dir, "SAMOS_QL_images", "superdark_s.fits")
>         fits.writeto(dir_hdul1, dark_sec, hdr_out, overwrite=True)
> 
5704,5706c6653,6657
<         
<         out_fname = dark_file[:-10]#os.path.split(dir_hdul1)[1][:-5]#"superdark_s"
<         new_fname = "{}_{:04n}.fits".format(out_fname,int(self.entry_out_fnumber.get()))
---
> 
>         # os.path.split(dir_hdul1)[1][:-5]#"superdark_s"
>         out_fname = dark_file[:-10]
>         new_fname = "{}_{:04n}.fits".format(
>             out_fname, int(self.entry_out_fnumber.get()))
5709,5710c6660,6661
<         dir_hdul2 = os.path.join(self.fits_dir,new_fname)
<         #second file with updated fits header
---
>         dir_hdul2 = os.path.join(self.fits_dir, new_fname)
>         # second file with updated fits header
5713,5714c6664,6666
<             dmd_hdu = self.create_dmd_pattern_hdu(main_fits_header.output_header)
<         
---
>             dmd_hdu = self.create_dmd_pattern_hdu(
>                 main_fits_header.output_header)
> 
5717c6669
<             
---
> 
5720c6672
<         
---
> 
5723,5725c6675,6679
<         #a  flat field has been taken...
<         flat_file = os.path.join(local_dir,"fits_image","superflat_"+self.FW_filter.get()+".fits")
<         flat_file = glob.glob(self.fits_dir+"/superflat_{}*.fits".format(self.FW_filter.get()))[0]
---
>         # a  flat field has been taken...
>         flat_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superflat_"+self.FW_filter.get()+".fits")
>         flat_file = glob.glob(
>             self.fits_dir+"/superflat_{}*.fits".format(self.FW_filter.get()))[0]
5734,5735c6688,6689
<         #take the dark current rate....
< #        dark_s_file = os.path.join(local_dir,"fits_image","superdark_s.fits")
---
>         # take the dark current rate....
> #        dark_s_file = os.path.join(local_dir,"SAMOS_QL_images","superdark_s.fits")
5741,5742c6695,6697
<             dark_s_files = glob.glob(self.fits_dir+"/superdark_{}s*.fits".format(self.ExpTimeSet.get()))
<             if len(dark_s_files)==0:
---
>             dark_s_files = glob.glob(
>                 self.fits_dir+"/superdark_{}s*.fits".format(self.ExpTimeSet.get()))
>             if len(dark_s_files) == 0:
5753,5755c6708,6709
<         
<         #and the bias frame....
< #        bias_file = os.path.join(local_dir,"fits_image","superbias.fits")
---
>         # and the bias frame....
> #        bias_file = os.path.join(local_dir,"SAMOS_QL_images","superbias.fits")
5767,5768c6721,6722
<         
<         #the bias must be subtracted from the flat
---
> 
>         # the bias must be subtracted from the flat
5771c6725,6726
<             main_fits_header.output_header.set("MSTRBIAS", bias_file, "Master Bias file if corrected")
---
>             main_fits_header.output_header.set(
>                 "MSTRBIAS", bias_file, "Master Bias file if corrected")
5773c6728
<         else:    
---
>         else:
5775,5777c6730
<         
<         
<         
---
> 
5779,5780c6732,6733
<             #the dark current rate is multiplied by the exposure time of te flat
<             #and subtracted off if requested
---
>             # the dark current rate is multiplied by the exposure time of te flat
>             # and subtracted off if requested
5784c6737,6738
<             main_fits_header.output_header.set("MSTRDARK", dark_s_file, "Master Dark file if corrected")
---
>             main_fits_header.output_header.set(
>                 "MSTRDARK", dark_s_file, "Master Dark file if corrected")
5786c6740
<         else:    
---
>         else:
5788,5789c6742,6743
<         
<         #finally the flat is normalized to median=1  
---
> 
>         # finally the flat is normalized to median=1
5791,5795c6745,6750
<         
<         dir_hdul1 = os.path.join(local_dir,"fits_image","superflat_"+self.FW_filter.get()+"_norm.fits")
<         #hdulist.writeto(os.path.join(local_dir,"fits_image","superflat_"+self.FW_filter.get()+"_norm.fits"),overwrite=True)
<         #fits.writeto( os.path.join(local_dir,"fits_image","superflat_"+self.FW_filter.get()+"_norm.fits"),flat_norm,hdr,overwrite=True)
<         
---
> 
>         dir_hdul1 = os.path.join(
>             local_dir, "SAMOS_QL_images", "superflat_"+self.FW_filter.get()+"_norm.fits")
>         # hdulist.writeto(os.path.join(local_dir,"SAMOS_QL_images","superflat_"+self.FW_filter.get()+"_norm.fits"),overwrite=True)
>         #fits.writeto( os.path.join(local_dir,"SAMOS_QL_images","superflat_"+self.FW_filter.get()+"_norm.fits"),flat_norm,hdr,overwrite=True)
> 
5799c6754
<         
---
> 
5801c6756,6757
<         new_fname = "{}_{:04n}.fits".format(out_fname,int(self.entry_out_fnumber.get()))
---
>         new_fname = "{}_{:04n}.fits".format(
>             out_fname, int(self.entry_out_fnumber.get()))
5804,5805c6760,6761
<         dir_hdul2 = os.path.join(self.fits_dir,new_fname)
<         #second file with updated fits header
---
>         dir_hdul2 = os.path.join(self.fits_dir, new_fname)
>         # second file with updated fits header
5808,5809c6764,6766
<             dmd_hdu = self.create_dmd_pattern_hdu(main_fits_header.output_header)
<         
---
>             dmd_hdu = self.create_dmd_pattern_hdu(
>                 main_fits_header.output_header)
> 
5812c6769
<             
---
> 
5816d6772
<         
5818,5821c6774,6779
<         """ handle_light """
<         light_file = os.path.join(local_dir,"fits_image","newimage.fit")
<         flat_file = os.path.join(local_dir,"fits_image","superflat_"+self.FW_filter.get()+"_norm.fits")
<         buffer_file = os.path.join(local_dir,"fits_image","superbuffer.fits")
---
>         """ handle_light frame for display, applying bias, dark and flat if necessary """
>         light_file = os.path.join(local_dir, "SAMOS_QL_images", "newimage.fit")
>         flat_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superflat_"+self.FW_filter.get()+"_norm.fits")
>         buffer_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superbuffer.fits")
5826,5829c6784,6790
<             flat_file = os.path.join(local_dir,"fits_image","superflat_norm.fits")
<         dark_s_file = os.path.join(local_dir,"fits_image","superdark_s.fits")
<         bias_file = os.path.join(local_dir,"fits_image","superbias.fits")
<         
---
>             flat_file = os.path.join(
>                 local_dir, "SAMOS_QL_images", "superflat_norm.fits")
>         dark_s_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superdark_s.fits")
>         bias_file = os.path.join(
>             local_dir, "SAMOS_QL_images", "superbias.fits")
> 
5833c6794
<         
---
> 
5846c6807
<         
---
> 
5852,5853c6813,6815
<             dark_s_files = glob.glob(self.fits_dir+"/superdark_{}s*.fits".format(self.ExpTimeSet.get()))
<             if len(dark_s_files)>1:
---
>             dark_s_files = glob.glob(
>                 self.fits_dir+"/superdark_{}s*.fits".format(self.ExpTimeSet.get()))
>             if len(dark_s_files) > 1:
5855c6817
<             elif len(dark_s_files)==1:
---
>             elif len(dark_s_files) == 1:
5863c6825
<         
---
> 
5869c6831,6832
<             flat_file = glob.glob(self.fits_dir+"/superflat_{}*.fits".format(self.FW_filter.get()))[0]
---
>             flat_file = glob.glob(
>                 self.fits_dir+"/superflat_{}*.fits".format(self.FW_filter.get()))[0]
5874c6837
<             flat = np.zeros_like(light)  
---
>             flat = np.zeros_like(light)
5876c6839
<         
---
> 
5886c6849
<             buffer = np.zeros_like(light) 
---
>             buffer = np.zeros_like(light)
5895,5896c6858,6860
<             main_fits_header.output_header.set("MSTRBIAS", bias_file, "Master Bias file if corrected")
<         else:    
---
>             main_fits_header.output_header.set(
>                 "MSTRBIAS", bias_file, "Master Bias file if corrected")
>         else:
5898c6862
<             
---
> 
5901,5902c6865,6868
<             light_dark = light_bias - dark_s*(float(self.ExpTimeSet.get())/(exptime*1000))
<             main_fits_header.output_header.set("MSTRDARK", dark_s_file, "Master Dark file if corrected")
---
>             light_dark = light_bias - dark_s * \
>                 (float(self.ExpTimeSet.get())/(exptime*1000))
>             main_fits_header.output_header.set(
>                 "MSTRDARK", dark_s_file, "Master Dark file if corrected")
5904c6870
<         else:    
---
>         else:
5908,5909c6874,6876
<             light_dark_bias = np.divide(light_dark, flat) 
<             main_fits_header.output_header.set("MSTRFLAT", dark_s_file, "Master Flat file if corrected")
---
>             light_dark_bias = np.divide(light_dark, flat)
>             main_fits_header.output_header.set(
>                 "MSTRFLAT", dark_s_file, "Master Flat file if corrected")
5911c6878
<         else:    
---
>         else:
5913,5929c6880,6895
<             
<         
<         fits_image = os.path.join(local_dir,"fits_image","newimage_ff.fits")
<         
<         
<             
<         if self.image_type=="sci":
<             obj_type="SCI"
<             imtype="Sci_{}".format(self.FW_filter.get())
<         elif self.image_type=="bias":
<             obj_type="BIAS"
<             imtype="bias"
<         elif self.image_type=="buff":
<             obj_type="BUFF"
<             imtype="Buff"
<         elif self.image_type=="flat":
<             obj_type="FLAT"
---
> 
>         fits_image = os.path.join(
>             local_dir, "SAMOS_QL_images", "newimage_ff.fits")
> 
>         if self.image_type == "sci":
>             obj_type = "SCI"
>             # I am adding the QL suffix to indicate that this is an image processed for QL
>             imtype = "Sci_{}".format(self.FW_filter.get())
>         elif self.image_type == "bias":
>             obj_type = "BIAS"
>             imtype = "bias"
>         elif self.image_type == "buff":
>             obj_type = "BUFF"
>             imtype = "Buff"
>         elif self.image_type == "flat":
>             obj_type = "FLAT"
5931,5933c6897,6899
<         elif self.image_type=="dark":
< #            imtype = "dark_{}s".format(self.ExpTime.get())
<             obj_type="DARK"
---
>         elif self.image_type == "dark":
>             #            imtype = "dark_{}s".format(self.ExpTime.get())
>             obj_type = "DARK"
5935,5936c6901,6902
<         
<         if self.out_fname.get().strip(" ")=="":
---
> 
>         if self.out_fname.get().strip(" ") == "":
5938c6904
<         
---
> 
5941,5942c6907,6908
<         out_fname = os.path.join(self.fits_dir,imtype+basename)
<         
---
>         out_fname = os.path.join(self.fits_dir, imtype+basename)
> 
5945c6911
<         
---
> 
5947c6913
<         
---
> 
5953c6919
<         TCS_dict = Class_SOAR_TCS.SOAR_TCS.infoa()
---
>         TCS_dict = Class_SOAR_Page.SOAR_Page.infoa()
5956c6922,6923
<         pr_hdu = fits.PrimaryHDU(light_dark_bias, main_fits_header.output_header)
---
>         pr_hdu = fits.PrimaryHDU(
>             light_dark_bias, main_fits_header.output_header)
5960c6927,6928
<             dmd_hdu = self.create_dmd_pattern_hdu(main_fits_header.output_header)
---
>             dmd_hdu = self.create_dmd_pattern_hdu(
>                 main_fits_header.output_header)
5962,5965c6930,6932
<         
<         #hdulist.writeto(fits_image,overwrite=True)
<         
<         
---
> 
>         hdulist.writeto(fits_image, overwrite=True)
> 
5969,5980c6936,6948
<              light_buffer = light-buffer
<              hdulist = fits.HDUList([fits.PrimaryHDU(light_buffer,main_fits_header.output_header)])
<              if dmd_hdu is not None:
<                  hdulist.append(dmd_hdu)
<              #fits.writeto(fits_image,light_buffer,
<              #             main_fits_header.output_header,overwrite=True)
<              self.Display(fits_image)
<         
<         hdulist.writeto(fits_image,overwrite=True)
<         
<         ## Save a copy of the image to store in the Obs Night Directory under 
<         ## a more informative filename
---
>             light_buffer = light-buffer
>             hdulist = fits.HDUList(
>                 [fits.PrimaryHDU(light_buffer, main_fits_header.output_header)])
>             if dmd_hdu is not None:
>                 hdulist.append(dmd_hdu)
>             # fits.writeto(fits_image,light_buffer,
>             #             main_fits_header.output_header,overwrite=True)
>             self.Display(fits_image)
> 
>         hdulist.writeto(fits_image, overwrite=True)
> 
>         # Save a copy of the image to store in the Obs Night Directory under
>         # a more informative filename
5981a6950,6956
>         #
>         # ADD the QL Prefix to indicate that this file has been processed for Quick Look
>         path, file = os.path.split(fname)
>         file = file[:3] + '_QL' + file[3:]
>         fname = os.path.join(path, file)
>         # done
>         #
5985c6960
<         
---
> 
5991c6966
<         
---
> 
5996c6971
< # 
---
> #
5998c6973
<     
---
> 
6000d6974
<         
6004c6978
<         
---
> 
6007,6009c6981
<         
<         
<     
---
> 
6021,6022c6993,6996
<         superdark_list = glob.glob(os.path.join(self.fits_dir,"superdark_*.fits"))
<         superdark_times = np.array([os.path.split(darkf)[1].split("_")[1].strip("s") for darkf in superdark_list]).astype(float)
---
>         superdark_list = glob.glob(os.path.join(
>             self.fits_dir, "superdark_*.fits"))
>         superdark_times = np.array([os.path.split(darkf)[1].split(
>             "_")[1].strip("s") for darkf in superdark_list]).astype(float)
6024c6998
<         
---
> 
6026,6029c7000,7003
<         
<     def expose(self,params):
<         """ to be written """
<         
---
> 
>     def expose(self, params):
>         """ handle the file acquired by the SISI camera"""
> 
6033c7007
<         
---
> 
6034a7009,7010
>         #
>         # START WITH DEFINITIONS
6043,6047c7019,7023
<         
<         self.this_param_file = open(os.path.join(os.getcwd(),"Parameters.txt"),"w")
<         
<         self.this_param_file.write(self.header_entry_string)
<         self.this_param_file.close()
---
> 
>         #self.this_param_file = open(os.path.join(os.getcwd(),"SAMOS_system_dev","Parameters.txt"),"w")
>         # self.this_param_file.write(self.header_entry_string)
>         # self.this_param_file.close()
> 
6050c7026
<         [host,port] = IP.split(":")
---
>         [host, port] = IP.split(":")
6053,6062c7029,7038
<         if self.image_type=="sci":
<             imtype="sci_{}".format(self.FW_filter.get())
<             obj_type="SCI"
<         elif self.image_type=="bias":
<             imtype="bias"
<             obj_type="BIAS"
<         elif self.image_type=="buff":
<             imtype="Buff"
<             obj_type="BUFF"
<         elif self.image_type=="flat":
---
>         if self.image_type == "sci":
>             imtype = "sci_{}".format(self.FW_filter.get())
>             obj_type = "SCI"
>         elif self.image_type == "bias":
>             imtype = "bias"
>             obj_type = "BIAS"
>         elif self.image_type == "buff":
>             imtype = "Buff"
>             obj_type = "BUFF"
>         elif self.image_type == "flat":
6064,6066c7040,7042
<             obj_type="FLAT"
<         elif self.image_type=="dark":
<             obj_type="DARK"
---
>             obj_type = "FLAT"
>         elif self.image_type == "dark":
>             obj_type = "DARK"
6069,6070c7045,7046
<         
<         if self.out_fname.get().strip(" ")=="":
---
> 
>         if self.out_fname.get().strip(" ") == "":
6072c7048
<         
---
> 
6075c7051
<         out_fname = os.path.join(self.fits_dir,imtype+basename)
---
>         out_fname = os.path.join(self.fits_dir, imtype+basename)
6078c7054
<         # these extra 2 parameters in Camera.expose are to save copies of the 
---
>         # these extra 2 parameters in Camera.expose are to save copies of the
6080,6081c7056,7057
<         Camera.expose(night_dir_basename = out_fname, 
<                       start_fnumber = self.entry_out_fnumber)#host, port=int(port))
---
>         Camera.expose(night_dir_basename=out_fname,
>                       start_fnumber=self.entry_out_fnumber)  # host, port=int(port))
6088,6090c7064
<         
<         
<         
---
> 
6093c7067
<             print("DMDMAP", main_fits_header.dmdmap)
---
>             print("DMDMAP is ", main_fits_header.dmdmap)
6096c7070
<         
---
> 
6101,6105c7075,7080
<         # fits_image = "/Users/robberto/Box/@Massimo/_Python/SAMOS_GUI_dev/fits_image/newimage_fixed.fit"
<         # fits_image = "{}/fits_image/newimage_fixed.fit".format(work_dir)
<         self.fits_image = os.path.join(work_dir,"fits_image","newimage.fit")
<         fits_image_converted = os.path.join(local_dir,"fits_image","newimage_fixed.fit")   
<         
---
>         # THE CONVERSTLLY THING HAS BEEN DONE IN Class_CCD/dev/expose
>         self.fits_image = os.path.join(
>             os.getcwd(), "SAMOS_QL_images", "newimage.fit")
>         """ 
>         self.fits_image = os.path.join(work_dir,"SAMOS_QL_images","newimage.fit")
>         fits_image_converted = os.path.join(local_dir,"SAMOS_QL_images","newimage_fixed.fits")   
6108d7082
<         
6110,6112c7084,7087
<         shutil.copy(fits_image_converted,self.fits_image)
<         hdul  = fits.open(self.fits_image)
<         input_header = hdul[0].header        
---
>         #shutil.copy(fits_image_converted,self.fits_image)
>         """
>         hdul = fits.open(self.fits_image)
>         input_header = hdul[0].header
6114,6116c7089,7092
<         
<         main_fits_header.set_param("filename", os.path.split(fits_image_converted)[1]) 
<         main_fits_header.set_param("filedir", os.path.split(fits_image_converted)[0])                 
---
>         main_fits_header.set_param(
>             "filename", os.path.split(self.fits_image)[1])
>         main_fits_header.set_param(
>             "filedir", os.path.split(self.fits_image)[0])
6125c7101
<         
---
> 
6128,6130c7104,7106
<         self.Display(fits_image_converted)
<         
<         
---
>         # self.Display(fits_image_converted)
>         self.Display(self.fits_image)
> 
6135c7111
<         
---
> 
6137c7113
<         #new_fname = "{}_{:04n}.fits".format(out_fname,
---
>         # new_fname = "{}_{:04n}.fits".format(out_fname,
6143,6144c7119,7120
<         #update header for new filename/filepath
<         
---
>         # update header for new filename/filepath
> 
6147a7124,7127
>        # try:
>        #     DMD.current_dmd_shape
>        # except NameError:
>        #     DMD.current_dmd_shape = None
6149,6150c7129,7130
<             dmd_hdu = self.create_dmd_pattern_hdu(main_fits_header.output_header)
<         
---
>             dmd_hdu = self.create_dmd_pattern_hdu(
>                 main_fits_header.output_header)
6152,6153c7132,7133
<         
<         # update the file(s) in the ObsNight directory with 
---
> 
>         # UPDATE the file(s) in the ObsNight directory with
6157c7137
<         
---
> 
6159c7139,7140
<             main_fits_header.set_param("filename", os.path.split(night_file)[1])
---
>             main_fits_header.set_param(
>                 "filename", os.path.split(night_file)[1])
6163c7144
<             
---
> 
6165c7146
<             
---
> 
6169c7150
<         #self.entry_out_fnumber.invoke("buttonup")
---
>         # self.entry_out_fnumber.invoke("buttonup")
6172,6175c7153,7156
<         
<         
<         
<         
---
> 
>         print("Cleanup: deleting original fits file")
>         CCD.delete_fitsfile()
> 
6177d7157
<         
6186,6187c7166,7167
<         dmd_hdu.header["FILEDIR"] = primary_header["FILEDIR"]  
<         
---
>         dmd_hdu.header["FILEDIR"] = primary_header["FILEDIR"]
> 
6190c7170
<         
---
> 
6193c7173
<         
---
> 
6196,6197c7176,7177
<         
<     def Display(self,imagefile): 
---
> 
>     def Display(self, imagefile):
6203c7183
<       
---
> 
6208c7188
<         
---
> 
6212c7192
<                                     text='Expose {:g} %'.format(self.var_perc_exp_done.get()))
---
>                                          text='Expose {:g} %'.format(self.var_perc_exp_done.get()))
6216,6217c7196
<                                     text='Readout {:g} %'.format(self.var_perc_read_done.get()))
<      
---
>                                              text='Readout {:g} %'.format(self.var_perc_read_done.get()))
6221,6224c7200,7205
<         FITSfiledir = os.path.join(local_dir,"fits_image")
<         self.fullpath_FITSfilename = os.path.join(FITSfiledir,(os.listdir(FITSfiledir))[0])
<             # './fits_image/newimage_ff.fits'
<         self.AstroImage = load_data(self.fullpath_FITSfilename, logger=self.logger)
---
>         FITSfiledir = os.path.join(local_dir, "SAMOS_QL_images")
>         self.fullpath_FITSfilename = os.path.join(
>             FITSfiledir, (os.listdir(FITSfiledir))[0])
>         # './fits_image/newimage_ff.fits'
>         self.AstroImage = load_data(
>             self.fullpath_FITSfilename, logger=self.logger)
6226c7207
<         
---
> 
6235,6237c7216,7219
<         coord = SkyCoord(self.string_RA.get()+'  '+self.string_DEC.get(),unit=(u.deg, u.deg), frame='fk5') 
< #        coord = SkyCoord('16 14 20.30000000 -19 06 48.1000000', unit=(u.hourangle, u.deg), frame='fk5') 
<         query_results = Simbad.query_region(coord)                                                      
---
>         coord = SkyCoord(self.string_RA.get()+'  ' +
>                          self.string_DEC.get(), unit=(u.deg, u.deg), frame='fk5')
> #        coord = SkyCoord('16 14 20.30000000 -19 06 48.1000000', unit=(u.hourangle, u.deg), frame='fk5')
>         query_results = Simbad.query_region(coord)
6239c7221
<     
---
> 
6242c7224
<     # 
---
>     #
6244,6248c7226,7231
<         #object_main_id = query_results[0]['MAIN_ID']#.decode('ascii')
<         object_coords = SkyCoord(ra=query_results['RA'], dec=query_results['DEC'], 
< #                                 unit=(u.deg, u.deg), frame='icrs')
<                                 unit=(u.hourangle, u.deg), frame='icrs')
<         c = SkyCoord(self.string_RA.get(),self.string_DEC.get(), unit=(u.deg, u.deg))
---
>         # object_main_id = query_results[0]['MAIN_ID']#.decode('ascii')
>         object_coords = SkyCoord(ra=query_results['RA'], dec=query_results['DEC'],
>                                  #                                 unit=(u.deg, u.deg), frame='icrs')
>                                  unit=(u.hourangle, u.deg), frame='icrs')
>         c = SkyCoord(self.string_RA.get(),
>                      self.string_DEC.get(), unit=(u.deg, u.deg))
6281c7264
<         hdul = hips2fits.query_with_wcs(hips = hips,
---
>         hdul = hips2fits.query_with_wcs(hips=hips,
6285c7268
<                                                                            
---
> 
6287c7270
<         #|==============================================================| 504k/504k (100.00%)         0s
---
>         # |==============================================================| 504k/504k (100.00%)         0s
6289,6296c7272,7279
<         #Filename: /path/to/.astropy/cache/download/py3/ef660443b43c65e573ab96af03510e19
<         #No.    Name      Ver    Type      Cards   Dimensions   Format
<         #  0  PRIMARY       1 PrimaryHDU      22   (500, 500)   int16   
<         print(hdul[0].header)                                                                                  
<         self.image = hdul                                    
<         hdul.writeto(os.path.join('.','newtable.fits'),overwrite=True)
<         
<     
---
>         # Filename: /path/to/.astropy/cache/download/py3/ef660443b43c65e573ab96af03510e19
>         # No.    Name      Ver    Type      Cards   Dimensions   Format
>         #  0  PRIMARY       1 PrimaryHDU      22   (500, 500)   int16
>         print(hdul[0].header)
>         self.image = hdul
>         hdul.writeto(os.path.join(dir_Astrometry,
>                      'newtable.fits'), overwrite=True)
> 
6300,6301c7283,7284
<         filt= self.string_Filter.get()
<         data = hdul[0].data[:,::-1]
---
>         filt = self.string_Filter.get()
>         data = hdul[0].data[:, ::-1]
6306c7289
<             # ra, dec in degrees
---
>         # ra, dec in degrees
6315,6316c7298,7299
<         img.load_hdu(self.hdu_res)       
<         print('\n',self.hdu_res.header)     
---
>         img.load_hdu(self.hdu_res)
>         print('\n', self.hdu_res.header)
6322,6328c7305,7308
<         self.fits_image_ff = os.path.join(work_dir,'fits_image',"newimage_ff.fits")
<         fits.writeto(self.fits_image_ff,self.hdu_res.data,header=self.hdu_res.header,overwrite=True) 
<  
<         
<         # self.root.title(filepath)
<     
< 
---
>         self.fits_image_ff = os.path.join(
>             work_dir, 'fits_image', "newimage_ff.fits")
>         fits.writeto(self.fits_image_ff, self.hdu_res.data,
>                      header=self.hdu_res.header, overwrite=True)
6329a7310
>         # self.root.title(filepath)
6333a7315
> 
6336c7318
<                
---
> 
6340,6342c7322,7324
<         filt= self.string_Filter.get()
<         filepath = skymapper_interrogate(Posx, Posy, filt)       
<         #filepath = skymapper_interrogate_VOTABLE(Posx, Posy, filt)       
---
>         filt = self.string_Filter.get()
>         filepath = skymapper_interrogate(Posx, Posy, filt)
>         #filepath = skymapper_interrogate_VOTABLE(Posx, Posy, filt)
6344c7326
< #            img.load_hdu(hdu_in[0])
---
>             #            img.load_hdu(hdu_in[0])
6347c7329
<             img_res = image_data.resize(size=(1032,1056))
---
>             img_res = image_data.resize(size=(1032, 1056))
6358c7340
<             img.load_hdu(self.hdu_res)       
---
>             img.load_hdu(self.hdu_res)
6365,6368c7347,7350
<         self.fits_image_ff = os.path.join(work_dir,"fits_image","newimage_ff.fits")
<         fits.writeto(self.fits_image_ff,self.hdu_res.data,header=self.hdu_res.header,overwrite=True) 
<  
<         
---
>         self.fits_image_ff = os.path.join(
>             work_dir, "SAMOS_QL_images", "newimage_ff.fits")
>         fits.writeto(self.fits_image_ff, self.hdu_res.data,
>                      header=self.hdu_res.header, overwrite=True)
6370,6372d7351
<  
<     
<     
6375c7354
<       
---
> 
6378,6381c7357,7360
<         
<         hdu=fits.open(self.fits_image_ff)[0]  #for this function to work
<         
<         header = hdu.header 
---
> 
>         hdu = fits.open(self.fits_image_ff)[0]  # for this function to work
> 
>         header = hdu.header
6383c7362
<         
---
> 
6387c7366
<         
---
> 
6392c7371
<         
---
> 
6394c7373
<         
---
> 
6396c7375
<         
---
> 
6398c7377
<         
---
> 
6408a7388
> 
6410c7390
<         
---
> 
6412c7392
<                 for x, y in stars]  #[(1, 2), (3, 4)]]
---
>                    for x, y in stars]  # [(1, 2), (3, 4)]]
6418c7398
<         
---
> 
6420a7401
> 
6422,6425c7403,7408
<         
<         
<         # Lets check the WCS solution 
<         
---
> 
>         global WCS_global
>         WCS_global = self.wcs
> 
>         # Lets check the WCS solution
> 
6430c7413
<                 for x, y in gaia_pixel]  #[(1, 2), (3, 4)]]
---
>                         for x, y in gaia_pixel]  # [(1, 2), (3, 4)]]
6434c7417
<             obj.color="red"
---
>             obj.color = "red"
6437c7420
<         
---
> 
6440c7423
<         
---
> 
6442,6447c7425,7432
<             hdu_wcs[0].header.set("dmdmap", os.path.split(self.loaded_regfile)[1])
<             
<         hdu_wcs[0].data = data # add data to fits file
<         self.wcs_filename = os.path.join(".","SAMOS_Astrometry_dev","WCS_"+ra+"_"+dec+".fits")
<         hdu_wcs[0].writeto(self.wcs_filename,overwrite=True)
<         
---
>             hdu_wcs[0].header.set(
>                 "dmdmap", os.path.split(self.loaded_regfile)[1])
> 
>         hdu_wcs[0].data = data  # add data to fits file
>         self.wcs_filename = os.path.join(
>             ".", "SAMOS_Astrometry_dev", "WCS_"+ra+"_"+dec+".fits")
>         hdu_wcs[0].writeto(self.wcs_filename, overwrite=True)
> 
6456,6459d7440
<         
<  
<         
<         
6461c7442
<         
---
> 
6465,6466c7446,7447
< #             threading.Timer(1.0, self.load_manager_last_file).start() 
< # 
---
> #             threading.Timer(1.0, self.load_manager_last_file).start()
> #
6470,6471c7451,7452
< #         print(self.fullpath_FITSfilename)        
< # 
---
> #         print(self.fullpath_FITSfilename)
> #
6474c7455
< # 
---
> #
6477d7457
<         
6483c7463
< # 
---
> #
6486,6487d7465
< 
< 
6490c7468,7469
<         self.AstroImage = load_data(self.fullpath_FITSfilename, logger=self.logger)
---
>         self.AstroImage = load_data(
>             self.fullpath_FITSfilename, logger=self.logger)
6501c7480
<         
---
> 
6511c7490
<         points = CM.CompoundMixin.get_objects_by_kind(self.canvas,'point')
---
>         points = CM.CompoundMixin.get_objects_by_kind(self.canvas, 'point')
6513c7492
<         
---
> 
6515,6519c7494,7498
<         points = CM.CompoundMixin.get_objects_by_kind(self.canvas,'point')
<         list_point=list(points)
<         CM.CompoundMixin.delete_objects(self.canvas,list_point)
<         self.canvas.objects   #check that the points are gone
<            
---
>         points = CM.CompoundMixin.get_objects_by_kind(self.canvas, 'point')
>         list_point = list(points)
>         CM.CompoundMixin.delete_objects(self.canvas, list_point)
>         self.canvas.objects  # check that the points are gone
> 
6521,6529c7500,7507
<         points = CM.CompoundMixin.get_objects_by_kinds(self.canvas,['point','circle',
<                                                                     'rectangle', 'polygon', 
<                                                                     'triangle', 'righttriangle', 
<                                                                     'ellipse', 'square'])
<         list_points=list(points)
<         CM.CompoundMixin.delete_objects(self.canvas,list_points)
<         self.canvas.objects   #check that the points are gone
<         
<         
---
>         points = CM.CompoundMixin.get_objects_by_kinds(self.canvas, ['point', 'circle',
>                                                                      'rectangle', 'polygon',
>                                                                      'triangle', 'righttriangle',
>                                                                      'ellipse', 'square'])
>         list_points = list(points)
>         CM.CompoundMixin.delete_objects(self.canvas, list_points)
>         self.canvas.objects  # check that the points are gone
> 
6697c7675
<     def cursor_cb(self, viewer, button, data_x, data_y):          
---
>     def cursor_cb(self, viewer, button, data_x, data_y):
6707c7685
<             value = int(round(value,0))
---
>             value = int(round(value, 0))
6712c7690
<         
---
> 
6714c7692
<         
---
> 
6723a7702
>             ra_deg, dec_deg = image.pixtoradec(fits_x, fits_y)
6725c7704
<                                                format='str', coords='fits')
---
>                                                                format='str', coords='fits')
6732c7711,7715
<         coords_text = "RA: %s  DEC: %s \n"%(ra_txt, dec_txt)
---
>             ra_deg = 'BAD WCS'
>             dec_deg = 'BAD WCS'
>         coords_text = "RA: %s  DEC: %s \n" % (ra_txt, dec_txt)
> #        coords_text_DEG = "RA: %s  DEC: %s \n"%(str(ra_deg), str(dec_deg))
>         coords_text_DEG = "RA: %.9s DEC %.9s\n" % (str(ra_deg), str(dec_deg))
6734,6738c7717,7723
<         dmd_text = "DMD_X: %i  DMD_Y: %i \n"%(np.round(dmd_x), round(dmd_y))
<         text = "X: %.2f  Y: %.2f  Value: %s" % (
<             fits_x, fits_y, value)
<         
<         text = coords_text + dmd_text + text
---
> #        dmd_text = "DMD_X: %i  DMD_Y: %i \n"%(np.round(dmd_x), round(dmd_y))
>         dmd_text = "DMD_X: %i  DMD_Y: %i \n" % (
>             np.floor(dmd_x), np.floor(dmd_y))
>         text = "X: %i  Y: %i  Value: %s" % (
>             np.floor(fits_x), np.floor(fits_y), value)
> 
>         text = coords_text + coords_text_DEG + dmd_text + text
6741c7726
<     def quit(self,root):
---
>     def quit(self, root):
6748c7733
<         
---
> 
6754c7739
<         
---
> 
6762c7747
<                 obj.color='red'
---
>                 obj.color = 'red'
6765c7750
<         
---
> 
6771c7756,7760
<         obj.add_callback('pick-down', self.pick_cb, 'down')
---
>         
> #        obj.add_callback('pick-down', self.pick_cb, 'down')
>         obj.pickable = True
>         obj.add_callback('pick-key', self.pick_cb, 'key')
> 
6775c7764
<         # obj.add_callback('pick-enter', self.pick_cb, 'enter')
---
>         #obj.add_callback('pick-enter', self.pick_cb, 'enter')
6777,6778c7766
<         obj.add_callback('pick-key', self.pick_cb, 'key')
<         obj.pickable = True
---
>         
6783c7771
<         if kind=="box" and self.vslit.get()!=0:
---
>         if kind == "box" and self.vslit.get() != 0:
6787c7775
<                 kind=="box"
---
>                 kind == "box"
6789c7777
<                 
---
> 
6795d7782
<             
6800c7787
<             
---
> 
6802,6805c7789,7792
<             #self.SlitTabView.slit_obj_tags.append(tag)
<             
<         if self.vslit.get() != 0 and kind == 'point': # or kind == 'box':
<             true_kind='Slit'
---
>             # self.SlitTabView.slit_obj_tags.append(tag)
> 
>         if self.vslit.get() != 0 and kind == 'point':  # or kind == 'box':
>             true_kind = 'Slit'
6808c7795
<             
---
> 
6810d7796
<         
6812,6813d7797
<         
<         
6819,6821c7803,7804
<         
<         
<         if obj.kind=='point':
---
> 
>         if obj.kind == 'point':
6823c7806
<             x_c = obj.points[0][0]-1#really needed?
---
>             x_c = obj.points[0][0]-1  # really needed?
6827,6828c7810,7811
<                                         width=40, height=40,
<                                         angle = 0*u.deg)
---
>                                      width=40, height=40,
>                                      angle=0*u.deg)
6835c7818
<             # this retuns a Box object 
---
>             # this retuns a Box object
6837,6838c7820
<         
<             
---
> 
6840c7822
<         
---
> 
6842,6843c7824,7825
<         CM.CompoundMixin.delete_object(self.canvas,obj)
<         
---
>         CM.CompoundMixin.delete_object(self.canvas, obj)
> 
6852,6856c7834,7838
<         x1=obj.x-obj.xradius
<         y1=obj.y-obj.yradius
<         px,py=round(peaks[0][0]+x1),round(peaks[0][1]+y1)
<         print('peak found at: ', px,py)   #image coordinates
<         print('with counts: ',img_data[px,py]) #actual counts
---
>         x1 = obj.x-obj.xradius
>         y1 = obj.y-obj.yradius
>         px, py = round(peaks[0][0]+x1), round(peaks[0][1]+y1)
>         print('peak found at: ', px, py)  # image coordinates
>         print('with counts: ', img_data[px, py])  # actual counts
6858c7840
<         objs = iq.evaluate_peaks(peaks, data_box)       
---
>         objs = iq.evaluate_peaks(peaks, data_box)
6879,6884c7861,7866
<         print('full evaluation: ',objs)
<         print('fitted centroid: ', objs[0].objx,objs[0].objy) 
<         print('FWHM: ', objs[0].fwhm) 
<         print('peak value: ',objs[0].brightness)
<         print('sky level: ',objs[0].skylevel)
<         print('median of area: ',objs[0].background)
---
>         print('full evaluation: ', objs)
>         print('fitted centroid: ', objs[0].objx, objs[0].objy)
>         print('FWHM: ', objs[0].fwhm)
>         print('peak value: ', objs[0].brightness)
>         print('sky level: ', objs[0].skylevel)
>         print('median of area: ', objs[0].background)
6887c7869
<         print(x1,y1,x2,y2)
---
>         print(x1, y1, x2, y2)
6889c7871
<         print(self.AstroImage.pixtoradec(objs[0].objx,objs[0].objy))
---
>         print(self.AstroImage.pixtoradec(objs[0].objx, objs[0].objy))
6896c7878
<         
---
> 
6900,6909c7882,7891
<         new_slit_tag = self.canvas.add(slit_box(x=objs[0].objx+x1, 
<                                  y=objs[0].objy+y1, 
<                                  xradius = xradius,
<                                  yradius = yradius,
<                                  color = 'red',
<                                  alpha = 0.8,
<                                  fill = False,
<                                  angle=5*u.deg,
<                                  pickable=True))
<         
---
>         new_slit_tag = self.canvas.add(slit_box(x=objs[0].objx+x1,
>                                                 y=objs[0].objy+y1,
>                                                 xradius=xradius,
>                                                 yradius=yradius,
>                                                 color='red',
>                                                 alpha=0.8,
>                                                 fill=False,
>                                                 angle=5*u.deg,
>                                                 pickable=True))
> 
6911c7893
<         #CM.CompoundMixin.delete_object(self.canvas,obj)
---
>         # CM.CompoundMixin.delete_object(self.canvas,obj)
6913c7895
<         
---
> 
6915c7897
<         obj.add_callback('pick-down', self.pick_cb, 'down')
---
>         #obj.add_callback('pick-down', self.pick_cb, 'down')
6918d7899
<         
6920c7901
<         
---
> 
6925c7906
<         
---
> 
6928c7909
<         #if self.traces == 1:
---
>         # if self.traces == 1:
6930,6931c7911,7912
<         
<         #keep only the slits/boxes
---
> 
>         # keep only the slits/boxes
6933,6935c7914,7916
<         
<         #we should hanve only boxes/slits 
<         objects=CM.CompoundMixin.get_objects(self.canvas)
---
> 
>         # we should hanve only boxes/slits
>         objects = CM.CompoundMixin.get_objects(self.canvas)
6938,6939c7919,7920
<             
<             if objects[i].alpha==0:
---
> 
>             if objects[i].alpha == 0:
6941,6943c7922,7924
<             
<             o0=objects[i]
<             x_c = o0.x#really needed?
---
> 
>             o0 = objects[i]
>             x_c = o0.x  # really needed?
6948c7929
<             color_='green'
---
>             color_ = 'green'
6952c7933
< #                                        width=width_, height=height_, 
---
> #                                        width=width_, height=height_,
6954,6955c7935,7936
<             r = Rectangle(x1=round(x_c)-1024, y1=round(y_c)-o0.yradius,x2=round(x_c)+1024, y2=round(y_c)+o0.yradius,
<                                         angle = 0*u.deg,color='yellow',fill=1,fillalpha=0.5)
---
>             r = Rectangle(x1=round(x_c)-1024, y1=round(y_c)-o0.yradius, x2=round(x_c)+1024, y2=round(y_c)+o0.yradius,
>                           angle=0*u.deg, color='yellow', fill=1, fillalpha=0.5)
6957c7938
<             CM.CompoundMixin.draw(self.canvas,self.canvas.viewer)
---
>             CM.CompoundMixin.draw(self.canvas, self.canvas.viewer)
6960,6961c7941
<         
<         
---
> 
6963,6966c7943,7947
<         
<         if self.trace_boxes_objlist is not None and len(self.trace_boxes_objlist)>0:
<             
<             CM.CompoundMixin.delete_objects(self.canvas, self.trace_boxes_objlist)
---
> 
>         if self.trace_boxes_objlist is not None and len(self.trace_boxes_objlist) > 0:
> 
>             CM.CompoundMixin.delete_objects(
>                 self.canvas, self.trace_boxes_objlist)
6968c7949
<     
---
> 
6970,6973c7951,7953
<         
<         pattern_dirname = os.path.join(self.fits_dir,"SubPatterns")
<         
<         
---
> 
>         pattern_dirname = os.path.join(self.fits_dir, "SubPatterns")
> 
6976c7956
<         
---
> 
6978c7958
<             
---
> 
6983c7963
<                 
---
> 
6985,6986c7965,7968
<                 sky_regions = Regions(list(map(self.create_astropy_RectangleSkyRegion, pattern_data_rows)))
<                 new_regfname = os.path.join(pattern_dirname, pattern_name,".reg")
---
>                 sky_regions = Regions(
>                     list(map(self.create_astropy_RectangleSkyRegion, pattern_data_rows)))
>                 new_regfname = os.path.join(
>                     pattern_dirname, pattern_name, ".reg")
6988c7970
<         
---
> 
6990c7972
<     
---
> 
6992c7974
<         
---
> 
6995c7977
<         #print(self.pattern_series[pattern_list_index])
---
>         # print(self.pattern_series[pattern_list_index])
6997c7979
<         
---
> 
6999,7001c7981,7982
<         
<         
<         pattern_dirname = os.path.join(self.fits_dir,"SubPatterns")
---
> 
>         pattern_dirname = os.path.join(self.fits_dir, "SubPatterns")
7006,7008c7987,7990
<             
<             sky_regions = Regions(list(map(self.create_astropy_RectangleSkyRegion, pattern_data_rows)))
<             new_regfname = os.path.join(pattern_dirname,pattern_name,".reg")
---
> 
>             sky_regions = Regions(
>                 list(map(self.create_astropy_RectangleSkyRegion, pattern_data_rows)))
>             new_regfname = os.path.join(pattern_dirname, pattern_name, ".reg")
7010c7992
<         
---
> 
7012c7994
<         # given 
---
>         # given
7016c7998
<         
---
> 
7019c8001
<         
---
> 
7021,7024c8003,8005
<         sky_region = RectangleSkyRegion(center=center, width=ra_width*u.deg, height=dec_length*u.arcsec, )
<         
<         
<         
---
>         sky_region = RectangleSkyRegion(
>             center=center, width=ra_width*u.deg, height=dec_length*u.arcsec, )
> 
7026c8007
<     
---
> 
7028,7031c8009,8012
<         
<         if self.base_pattern_name_entry.get()!="Base Pattern Name":
<             
<             #self.base_pattern_name_entry.foreground="black"
---
> 
>         if self.base_pattern_name_entry.get() != "Base Pattern Name":
> 
>             # self.base_pattern_name_entry.foreground="black"
7035d8015
<         
7037c8017
<         
---
> 
7039c8019
<         
---
> 
7047,7048c8027
<         
<         
---
> 
7050,7052c8029,8032
<         
<         self.DMD_Group = DMDGroup(dmd_slitview_df=self.SlitTabView.slitDF, regfile=self.loaded_regfile)
<             
---
> 
>         self.DMD_Group = DMDGroup(
>             dmd_slitview_df=self.SlitTabView.slitDF, regfile=self.loaded_regfile)
> 
7054c8034
<         
---
> 
7057c8037
<         if (base_name!="Base Pattern Name" and base_name.strip(" ")!=""):
---
>         if (base_name != "Base Pattern Name" and base_name.strip(" ") != ""):
7061c8041
<         
---
> 
7066,7068c8046,8049
<         while len(redo_pattern)>0:
<             pattern_num +=1
<             good_pattern, redo_pattern = self.DMD_Group.pass_through_current_slits(redo_pattern)
---
>         while len(redo_pattern) > 0:
>             pattern_num += 1
>             good_pattern, redo_pattern = self.DMD_Group.pass_through_current_slits(
>                 redo_pattern)
7074c8055
<             
---
> 
7076c8057
<         
---
> 
7078,7079c8059,8061
<         self.all_slit_objects = [self.canvas.get_object_by_tag(tag) for tag in self.SlitTabView.slit_obj_tags]
<         
---
>         self.all_slit_objects = [self.canvas.get_object_by_tag(
>             tag) for tag in self.SlitTabView.slit_obj_tags]
> 
7082c8064
<         
---
> 
7084c8066
<                 
---
> 
7088c8070,8071
<             tags = ["@{}".format(int(obj_num)) for obj_num in pattern.object.values]
---
>             tags = ["@{}".format(int(obj_num))
>                     for obj_num in pattern.object.values]
7091c8074
<             
---
> 
7093c8076
<                 #print(c)
---
>                 # print(c)
7097c8080
<                 
---
> 
7099c8082
<         
---
> 
7103c8086
<         
---
> 
7106,7109d8088
<         
<         
<         current_pattern_tags = ["@{}".format(int(obj_num)) for obj_num in current_pattern.object.values]
<         
7111,7120c8090,8103
<         for tag in current_pattern_tags:
<                 obj_ind = self.SlitTabView.slit_obj_tags.index(tag)    
<                 
<                 obj = self.canvas.get_object_by_tag(tag)
<                 obj.alpha = 1
<                 
<                 self.canvas.redraw()
<         
<         hide_pattern_tags = [tag for tag in self.SlitTabView.slit_obj_tags if tag not in current_pattern_tags ]
<         
---
>         current_pattern_tags = [
>             "@{}".format(int(obj_num)) for obj_num in current_pattern.object.values]
> 
>         for tag in current_pattern_tags:
>             obj_ind = self.SlitTabView.slit_obj_tags.index(tag)
> 
>             obj = self.canvas.get_object_by_tag(tag)
>             obj.alpha = 1
> 
>             self.canvas.redraw()
> 
>         hide_pattern_tags = [
>             tag for tag in self.SlitTabView.slit_obj_tags if tag not in current_pattern_tags]
> 
7122c8105
<             
---
> 
7124c8107
<             
---
> 
7126c8109
<             
---
> 
7128,7130c8111
<             
<         
<         
---
> 
7132,7135c8113,8114
<         
<         
<             
<     def apply_to_all(self):       
---
> 
>     def apply_to_all(self):
7137c8116
<         
---
> 
7140c8119
<  
---
> 
7145,7147c8124,8126
<          
<         ## display
<         
---
> 
>         # display
> 
7150c8129
<         
---
> 
7153,7154c8132,8133
<         
<         #way faster than looping
---
> 
>         # way faster than looping
7156,7158c8135,8137
<         np.array(list(map(self.SlitTabView.update_table_from_obj, updated_objs, viewer_list)))
<         
<         
---
>         np.array(
>             list(map(self.SlitTabView.update_table_from_obj, updated_objs, viewer_list)))
> 
7171c8150
<     
---
> 
7173d8151
<         
7175,7176c8153,8154
<         
<         x0,y0,x1,y1 = picked_slit.get_llur()
---
> 
>         x0, y0, x1, y1 = picked_slit.get_llur()
7181c8159
<         
---
> 
7183c8161
<         
---
> 
7187c8165
<         
---
> 
7190c8168
<         
---
> 
7192d8169
<     
7194d8170
<     
7196c8172
<         """ to be written """        
---
>         """ to be written """
7199c8175
<             
---
> 
7202c8178
<             
---
> 
7205,7206c8181
<             
<                 
---
> 
7209c8184
<             
---
> 
7214c8189
<             
---
> 
7217c8192
<             
---
> 
7220c8195
<             
---
> 
7223,7225c8198,8200
<             
<             self.canvas.set_draw_mode('draw') #stupid but necessary to show 
<                                         # which object is selected
---
> 
>             self.canvas.set_draw_mode('draw')  # stupid but necessary to show
>             # which object is selected
7227c8202
<             
---
> 
7229,7230c8204,8206
<             obj_ind = list(self.SlitTabView.stab.get_column_data(0)).index(self.selected_obj_tag.strip("@"))
<             
---
>             obj_ind = list(self.SlitTabView.stab.get_column_data(
>                 0)).index(self.selected_obj_tag.strip("@"))
> 
7232,7234c8208,8209
<             
<             
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=5,redraw=True,
---
> 
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=5, redraw=True,
7236c8211
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=6,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=6, redraw=True,
7238c8213
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=7,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=7, redraw=True,
7240c8215
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=8,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=8, redraw=True,
7242c8217
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=11,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=11, redraw=True,
7244c8219
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=12,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=12, redraw=True,
7246c8221
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=13,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=13, redraw=True,
7248c8223
<             self.SlitTabView.stab.set_cell_data(r=obj_ind,c=14,redraw=True,
---
>             self.SlitTabView.stab.set_cell_data(r=obj_ind, c=14, redraw=True,
7250,7251c8225
<             
<             
---
> 
7255a8230,8262
>     def delete_obj_cb(self, obj, canvas, event, pt, ptype):
>         try:
>             if event.key == 'd':
>                 # print(event.key)
>                 canvas.delete_object(obj)
>                 print("start tab len", len(
>                     self.SlitTabView.stab.get_sheet_data()))
>                 self.SlitTabView.stab.delete_row(self.tab_row_ind)
>                 print("end tab len", len(self.SlitTabView.stab.get_sheet_data()))
>                 self.SlitTabView.stab.redraw()
>                 self.SlitTabView.slitDF = self.SlitTabView.slitDF.drop(
>                     index=self.obj_ind)
>                 #del self.SlitTabView.slit_obj_tags[self.obj_ind]
>                 self.SlitTabView.slit_obj_tags.remove(self.selected_obj_tag)
>                 canvas.clear_selected()
> 
>                 try:
> 
>                     for si in range(len(self.pattern_series)):
> 
>                         sub = self.pattern_series[si]
> 
>                         tag = int(obj.tag.strip("@"))
> 
>                         if tag in sub.object.values:
>                             sub_ind = sub.where(sub.object == tag).dropna(
>                                 how="all").index.values[0]
>                             sub = sub.drop(index=sub_ind)
> 
>                             self.pattern_series[si] = sub
> 
>                 except:
>                     print("try again")
7256a8264,8265
>         except:
>             pass
7260c8269
<         
---
> 
7265c8274
<         
---
> 
7267c8276
<             canvas.get_object_by_tag(self.selected_obj_tag).color='red'
---
>             canvas.get_object_by_tag(self.selected_obj_tag).color = 'red'
7272c8281
<         
---
> 
7276,7281c8285,8290
<         
<         canvas.set_draw_mode('draw') #stupid but necessary to show 
<                                     # which object is selected
<         canvas.set_draw_mode('pick') # this took me a solid 3 hours to figure out
<         
<       
---
> 
>         canvas.set_draw_mode('draw')  # stupid but necessary to show
>         # which object is selected
>         # this took me a solid 3 hours to figure out
>         canvas.set_draw_mode('pick')
> 
7283,7286c8292,8298
<         self.tab_row_ind = self.SlitTabView.stab.get_column_data(0).index(obj.tag.strip('@'))
<         dmd_x0, dmd_x1 = self.SlitTabView.slitDF.loc[self.obj_ind,['dmd_x0','dmd_x1']].astype(int)
<         dmd_y0, dmd_y1 = self.SlitTabView.slitDF.loc[self.obj_ind,['dmd_y0','dmd_y1']].astype(int)
<         
---
>         self.tab_row_ind = self.SlitTabView.stab.get_column_data(
>             0).index(obj.tag.strip('@'))
>         dmd_x0, dmd_x1 = self.SlitTabView.slitDF.loc[self.obj_ind, [
>             'dmd_x0', 'dmd_x1']].astype(int)
>         dmd_y0, dmd_y1 = self.SlitTabView.slitDF.loc[self.obj_ind, [
>             'dmd_y0', 'dmd_y1']].astype(int)
> 
7289c8301
<         
---
> 
7292,7294c8304,8306
<         
<         if ptype=='up' or ptype=='down': 
<             
---
> 
>         if ptype == 'up' or ptype == 'down':
> 
7298c8310
<             if event.key=='d':
---
>             if event.key == 'd':
7301c8313,8314
<                 print("start tab len",len(self.SlitTabView.stab.get_sheet_data()))
---
>                 print("start tab len", len(
>                     self.SlitTabView.stab.get_sheet_data()))
7305c8318,8319
<                 self.SlitTabView.slitDF = self.SlitTabView.slitDF.drop(index=self.obj_ind)
---
>                 self.SlitTabView.slitDF = self.SlitTabView.slitDF.drop(
>                     index=self.obj_ind)
7309c8323
<                 
---
> 
7311c8325
<                     
---
> 
7313c8327
<                         
---
> 
7315c8329
<                         
---
> 
7317c8331
<                         
---
> 
7319c8333,8334
<                             sub_ind = sub.where(sub.object==tag).dropna(how="all").index.values[0]
---
>                             sub_ind = sub.where(sub.object == tag).dropna(
>                                 how="all").index.values[0]
7321c8336
<                             
---
> 
7323c8338
<                     
---
> 
7326c8341
<                 
---
> 
7329c8344
<         
---
> 
7331c8346
<     
---
> 
7335c8350,8351
<         tab_row_ind = list(self.SlitTabView.stab.get_column_data(0)).index(obj.tag.strip("@"))
---
>         tab_row_ind = list(self.SlitTabView.stab.get_column_data(
>             0)).index(obj.tag.strip("@"))
7341c8357
<     def cleanup_kind(self,kind):
---
>     def cleanup_kind(self, kind):
7348,7351c8364,8367
<         found = CM.CompoundMixin.get_objects_by_kind(self.canvas,str(kind))
<         list_found=list(found)
<         CM.CompoundMixin.delete_objects(self.canvas,list_found)
<         self.canvas.objects   #check that the points are gone
---
>         found = CM.CompoundMixin.get_objects_by_kind(self.canvas, str(kind))
>         list_found = list(found)
>         CM.CompoundMixin.delete_objects(self.canvas, list_found)
>         self.canvas.objects  # check that the points are gone
7361,7363d8376
< 
< 
< 
7365,7367c8378,8380
<     def donothing(self):
<         """ to be written """
<         pass
---
> #    def donothing(self):
> #        """ to be written """
> #        pass
7370c8383
<     
---
> 
7375c8388
<         #Creation of init_window
---
>         # Creation of init_window
7383c8396
<         
---
> 
7385c8398
<             #self.SlitTabView.show_tab()
---
>             # self.SlitTabView.show_tab()
7389c8402
<         
---
> 
7393,7394c8406,8407
<                 
<                 #preserve the slit data frame so it is republished in the new window
---
> 
>                 # preserve the slit data frame so it is republished in the new window
7396c8409
<                 
---
> 
7399c8412
<                 # re-add the table rows 
---
>                 # re-add the table rows
7402,7406c8415,8417
<             self.slit_window.deiconify()        
<             
<         
<         
<         
---
>             self.slit_window.deiconify()
> 
> 
7414,7415d8424
< 
< 
7424d8432
<         self.textbox_filename.delete('1.0', tk.END)
7426,7431c8434,8439
<         filename = filedialog.askopenfilename(initialdir = os.path.join(dir_DMD,"DMD_csv","maps"),
<                                         title = "Select a File",
<                                         filetypes = (("Text files",
<                                                       "*.csv"),
<                                                      ("all files",
<                                                       "*.*")))
---
>         filename = filedialog.askopenfilename(initialdir=os.path.join(dir_DMD, "DMD_csv", "maps"),
>                                               title="Select a File",
>                                               filetypes=(("Text files",
>                                                           "*.csv"),
>                                                          ("all files",
>                                                           "*.*")))
7433,7434c8441
<         self.textbox_filename.insert(tk.END, tail)
<         
---
>         self.textbox_filename_slits.insert(tk.END, tail)
7438c8445
<         with open (filename,'r') as file:
---
>         with open(filename, 'r') as file:
7442,7443c8449,8450
<         # print(myList)         
<         
---
>         # print(myList)
> 
7446,7447c8453,8454
<         
<         test_shape = np.ones((1080,2048)) # This is the size of the DC2K    
---
> 
>         test_shape = np.ones((1080, 2048))  # This is the size of the DC2K
7449,7451c8456,8459
<             test_shape[int(myList[i][0]):int(myList[i][1]),int(myList[i][2]):int(myList[i][3])] = int(myList[i][4])
<         
<         DMD.apply_shape(test_shape)    
---
>             test_shape[int(myList[i][0]):int(myList[i][1]), int(
>                 myList[i][2]):int(myList[i][3])] = int(myList[i][4])
> 
>         DMD.apply_shape(test_shape)
7456,7457c8464,8465
<         image_map = Image.open(os.path.join(dir_DMD,"current_dmd_state.png"))
<         self.img= ImageTk.PhotoImage(image_map)
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
>         self.img = ImageTk.PhotoImage(image_map)
7460c8468
<         self.canvas.create_image(104,128,image=self.img)
---
>         self.canvas.create_image(104, 128, image=self.img)
7463c8471
<         
---
> 
7469c8477
<         
---
> 
7472d8479
<         self.textbox_filename.delete('1.0', tk.END)
7474,7479c8481,8486
<         filename_slits = filedialog.askopenfilename(initialdir = os.path.join(dir_DMD, "DMD_csv","slits"),
<                                         title = "Select a File",
<                                         filetypes = (("Text files",
<                                                       "*.csv"),
<                                                      ("all files",
<                                                       "*.*")))
---
>         filename_slits = filedialog.askopenfilename(initialdir=os.path.join(dir_DMD, "DMD_csv", "slits"),
>                                                     title="Select a File",
>                                                     filetypes=(("Text files",
>                                                                 "*.csv"),
>                                                                ("all files",
>                                                                 "*.*")))
7485c8492
<         yoffset = np.full(len(table.index),int(2048/4))
---
>         yoffset = np.full(len(table.index), int(2048/4))
7490c8497
<         self.slit_shape = np.ones((1080,2048)) # This is the size of the DC2K
---
>         self.slit_shape = np.ones((1080, 2048))  # This is the size of the DC2K
7492,7498c8499,8507
<            self.slit_shape[x1[i]:x2[i],y1[i]:y2[i]]=0
<         IP = self.PAR.IP_dict['IP_DMD']
<         [host,port] = IP.split(":")
<         DMD.initialize(address=host, port=int(port))
<         DMD._open()
<         DMD.apply_shape(self.slit_shape)
<         
---
>             self.slit_shape[x1[i]:x2[i], y1[i]:y2[i]] = 0
> 
>         self.push_slits()
>         #IP = self.PAR.IP_dict['IP_DMD']
>         #[host,port] = IP.split(":")
>         #DMD.initialize(address=host, port=int(port))
>         # DMD._open()
>         # DMD.apply_shape(self.slit_shape)
> 
7502,7503c8511,8512
<         image_map = Image.open(os.path.join(dir_DMD,"current_dmd_state.png"))
<         self.img= ImageTk.PhotoImage(image_map)
---
>         image_map = Image.open(os.path.join(dir_DMD, "current_dmd_state.png"))
>         self.img = ImageTk.PhotoImage(image_map)
7506,7508c8515,8516
<         print('img =', self.img)
<         self.canvas.create_image(104,128,image=self.img)
< 
---
>         #print('img =', self.img)
>         # self.canvas.create_image(104,128,image=self.img)
7515,7518c8523,8527
<         file = filedialog.asksaveasfile(filetypes = [("csv file", ".csv")], 
<                                         defaultextension = ".csv",
<                                         initialdir=os.path.join(dir_DMD,"DMD_csv","slits"),
<                                         initialfile = self.filename_regfile_RADEC[0:-4]+".csv")
---
>         file = filedialog.asksaveasfile(filetypes=[("csv file", ".csv")],
>                                         defaultextension=".csv",
>                                         initialdir=os.path.join(
>                                             dir_DMD, "DMD_csv", "slits"),
>                                         initialfile=self.filename_regfile_RADEC[0:-4]+".csv")
7521,7523c8530,8605
<         
<         
<     
---
> 
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> # &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
> 
>     def load_masks_file_HTS(self):
>         """load_masks_file for upload on DMD"""
>         self.textbox_filename_masks_HTS.delete('1.0', tk.END)
>         filename_masks = filedialog.askopenfilename(initialdir=os.path.join(local_dir, "Hadamard", "mask_sets"),
>                                                     title="Select a File",
>                                                     filetypes=(("Text files",
>                                                                 "*.bmp"),
>                                                                ("all files",
>                                                                 "*.*")))
>         self.head_HTS, self.tail_HTS = os.path.split(filename_masks)
>         self.textbox_filename_masks_HTS.insert(tk.END, self.tail_HTS)
>         #self.textbox_masknames_HTS.delete("1.0", tk.END)
>         #self.entrybox_newmasknames.delete(0, tk.END)
>         # self.entrybox_newmasknames.insert(tk.INSERT,str(tail[0:tail.rfind("_")]))
> 
>     def push_masks_file_HTS(self):
> 
>         # %% Open a file and check that the code worked
>         #name = 'H128_3w_mask_a1.bmp'
>         #name = 'H16_4w_mask_a1.bmp'
>         #name = 'S83_4w_mask_34.bmp'
>         #name = 'S11_3w_mask_9.bmp'
>         try:
>             im = np.asarray(Image.open(os.path.join(
>                 self.head_HTS, self.tail_HTS)), dtype='int')
>         #plt.imshow(im, cmap='gray')
>         except:
>             messagebox.showinfo(title='INFO', message='No mask')
>             return
>         DMD.initialize()
>         DMD.apply_shape(im)
>         # DMD.apply_invert()   #INVERT to push the pattern to SAMI, comment to see the mask on SISI
> 
>         self.textbox_filename_masks_HTS_pushed.delete("1.0", tk.END)
>         self.textbox_filename_masks_HTS_pushed.insert(tk.END, self.tail_HTS)
> 
>     def next_masks_file_HTS(self):
>         """look at the currently loaded mask and push the next one to the DMD"""
> 
>         # => find all positions of the '_' string in the filename
>         i_ = [x for x, v in enumerate(self.tail_HTS) if v == '_']
> 
>         # identify order, "signature ("a", "b", or "_" for H and S matrices) and counter of the current mask
>         order = self.tail_HTS[1:i_[0]]
>         ab_ = self.tail_HTS[i_[-1]-1]
>         counter = self.tail_HTS[i_[-1]+1:i_[-1]+4]
> 
>         # if we have reached the last mask and we are not in Hmask_a, exit with message
>         if ((int(counter) == int(order)) and (ab_ != 'a')):
>             print("exit")
>             messagebox.showinfo(title='INFO', message='No mask')
>             return
> 
>         # increment and set as the current mask:
>         str1 = self.tail_HTS
>         list1 = list(str1)
>         if ab_ == 'a':  # Hmask_a goes to Hmask_b
>             list1[i_[-1]-1] = 'b'
>         elif ab_ == 'b':  # Hmask_b goes to Hmask_a with increment of counter
>             list1[i_[-1]-1] = 'a'
>             counter_plus1 = "{:03d}".format(int(counter)+1)
>             list1[i_[-1]+1:i_[-1]+4] = list(counter_plus1)
>         else:  # Smask increment of counter
>             counter_plus1 = "{:03d}".format(int(counter)+1)
>             list1[i_[-1]+1:i_[-1]+4] = list(counter_plus1)
>         self.tail_HTS = ''.join(list1)
> 
>         # Push to the DMD
>         self.push_masks_file_HTS()
> 
7531c8613
<             files = [('All Files', '*.*')] 
---
>             files = [('All Files', '*.*')]
7536c8618
<         elif file_type == 'csv':   
---
>         elif file_type == 'csv':
7538,7541c8620,8623
<         file = filedialog.asksaveasfile(filetypes = files, defaultextension = files)
<       
<         # btn = ttk.Button(self, text = 'Save', command = lambda : save())        
<         
---
>         file = filedialog.asksaveasfile(
>             filetypes=files, defaultextension=files)
> 
>         # btn = ttk.Button(self, text = 'Save', command = lambda : save())
7545c8627
<         parent.geometry("1400x900")   #was ("1280x900")
---
>         parent.geometry("1400x900")  # was ("1280x900")
7550c8632,8633
<         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED, activebackground="#80B9DC")
---
>         menubar = tk.Menu(parent, bd=3, relief=tk.RAISED,
>                           activebackground="#80B9DC")
7553c8636,8637
<         filemenu = tk.Menu(menubar, tearoff=0, relief=tk.RAISED, activebackground="#026AA9")
---
>         filemenu = tk.Menu(menubar, tearoff=0,
>                            relief=tk.RAISED, activebackground="#026AA9")
7555,7561c8639,8654
<         filemenu.add_command(label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
<         filemenu.add_command(label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
<         filemenu.add_command(label="Recalibrate CCD2DMD", command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
<         filemenu.add_command(label="Motors", command=lambda: parent.show_frame(parent.Motors))
<         filemenu.add_command(label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
<         filemenu.add_command(label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
<         filemenu.add_command(label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
---
>         filemenu.add_command(
>             label="Config", command=lambda: parent.show_frame(parent.ConfigPage))
>         filemenu.add_command(
>             label="DMD", command=lambda: parent.show_frame(parent.DMDPage))
>         filemenu.add_command(label="Recalibrate CCD2DMD",
>                              command=lambda: parent.show_frame(parent.CCD2DMD_RecalPage))
>         filemenu.add_command(
>             label="Motors", command=lambda: parent.show_frame(parent.Motors))
>         filemenu.add_command(
>             label="CCD", command=lambda: parent.show_frame(parent.CCDPage))
>         filemenu.add_command(
>             label="SOAR TCS", command=lambda: parent.show_frame(parent.SOAR_Page))
>         filemenu.add_command(
>             label="MainPage", command=lambda: parent.show_frame(parent.MainPage))
>         filemenu.add_command(
>             label="Close", command=lambda: parent.show_frame(parent.ConfigPage))
7563c8656
<         filemenu.add_command(label="Exit", command=parent.quit)  
---
>         filemenu.add_command(label="Exit", command=parent.quit)
7583a8677
> 
7594,7597c8688,8693
<         
<         self.Image_on = tk.PhotoImage(file=os.path.join(local_dir,"Images","on.png"))
<         self.Image_off = tk.PhotoImage(file=os.path.join(local_dir,"Images","off.png"))
<         
---
> 
>         self.Image_on = tk.PhotoImage(file=os.path.join(
>             local_dir, "tk_utilities", "on.png"))
>         self.Image_off = tk.PhotoImage(file=os.path.join(
>             local_dir, "tk_utilities", "off.png"))
> 
7599,7602c8695,8698
<                          'dir_CCD'   : '/SAMOS_CCD_dev',
<                          'dir_DMD'   : '/SAMOS_DMD_dev',
<                          'dir_SOAR'  : '/SAMOS_SOAR_dev',
<                          'dir_SAMI'  : '/SAMOS_SAMI_dev',
---
>                          'dir_CCD': '/SAMOS_CCD_dev',
>                          'dir_DMD': '/SAMOS_DMD_dev',
>                          'dir_SOAR': '/SAMOS_SOAR_dev',
>                          'dir_SAMI': '/SAMOS_SAMI_dev',
7605,7606c8701,8702
<                         }
<         
---
>                          }
> 
7608c8704
<         ip_file_default = os.path.join(dir_SYSTEM,"IP_addresses_default.csv")
---
>         ip_file_default = os.path.join(dir_SYSTEM, "IP_addresses_default.csv")
7611c8707
<             dict_from_csv = {rows[0]:rows[1] for rows in reader}
---
>             dict_from_csv = {rows[0]: rows[1] for rows in reader}
7614,7625c8710,8721
<         self.IP_dict['IP_Motors']=dict_from_csv['IP_Motors']
<         self.IP_dict['IP_CCD']=dict_from_csv['IP_CCD']
<         self.IP_dict['IP_DMD']=dict_from_csv['IP_DMD']
<         self.IP_dict['IP_SOAR']=dict_from_csv['IP_SOAR']
<         self.IP_dict['IP_SAMI']=dict_from_csv['IP_SAMI']
< 
<         self.IP_status_dict = {'IP_Motors':False,
<                                'IP_CCD'   :False,
<                                'IP_DMD'   :False,
<                                'IP_SOAR'  :False,
<                                'IP_SAMI'   :False,
<                               }
---
>         self.IP_dict['IP_Motors'] = dict_from_csv['IP_Motors']
>         self.IP_dict['IP_CCD'] = dict_from_csv['IP_CCD']
>         self.IP_dict['IP_DMD'] = dict_from_csv['IP_DMD']
>         self.IP_dict['IP_SOAR'] = dict_from_csv['IP_SOAR']
>         self.IP_dict['IP_SAMI'] = dict_from_csv['IP_SAMI']
> 
>         self.IP_status_dict = {'IP_Motors': False,
>                                'IP_CCD': False,
>                                'IP_DMD': False,
>                                'IP_SOAR': False,
>                                'IP_SAMI': False,
>                                }
7635,7639c8731,8735
<         self.inoutvar=tk.StringVar()
<         self.inoutvar.set("outside") 
<         
<         self.scale_DMD2PIXEL = 0.892   #mirros to pixel as per e-mail by RB  Jan 207, 2023
<         
---
>         self.inoutvar = tk.StringVar()
>         self.inoutvar.set("outside")
> 
>         self.scale_DMD2PIXEL = 0.892  # mirros to pixel as per e-mail by RB  Jan 207, 2023
> 
7645,7646c8741,8742
<     ## set a style for the application so it works on various desktop themes
<     #ttk.Style().theme_use("clam")
---
>     # set a style for the application so it works on various desktop themes
>     # ttk.Style().theme_use("clam")
7648c8744
<     combostyle.configure("TCombobox", fieldbackground="dark gray", 
---
>     combostyle.configure("TCombobox", fieldbackground="dark gray",
7653d8748
< 
